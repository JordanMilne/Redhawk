Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     abstract_declarator_opt -> empty
Rule 2     abstract_declarator_opt -> abstract_declarator
Rule 3     assignment_expression_opt -> empty
Rule 4     assignment_expression_opt -> assignment_expression
Rule 5     block_item_list_opt -> empty
Rule 6     block_item_list_opt -> block_item_list
Rule 7     declaration_list_opt -> empty
Rule 8     declaration_list_opt -> declaration_list
Rule 9     declaration_specifiers_opt -> empty
Rule 10    declaration_specifiers_opt -> declaration_specifiers
Rule 11    designation_opt -> empty
Rule 12    designation_opt -> designation
Rule 13    expression_opt -> empty
Rule 14    expression_opt -> expression
Rule 15    identifier_list_opt -> empty
Rule 16    identifier_list_opt -> identifier_list
Rule 17    init_declarator_list_opt -> empty
Rule 18    init_declarator_list_opt -> init_declarator_list
Rule 19    parameter_type_list_opt -> empty
Rule 20    parameter_type_list_opt -> parameter_type_list
Rule 21    specifier_qualifier_list_opt -> empty
Rule 22    specifier_qualifier_list_opt -> specifier_qualifier_list
Rule 23    type_qualifier_list_opt -> empty
Rule 24    type_qualifier_list_opt -> type_qualifier_list
Rule 25    translation_unit -> external_declaration
Rule 26    translation_unit -> translation_unit external_declaration
Rule 27    external_declaration -> function_definition
Rule 28    external_declaration -> declaration
Rule 29    external_declaration -> pp_directive
Rule 30    pp_directive -> PPHASH
Rule 31    function_definition -> declarator declaration_list_opt compound_statement
Rule 32    function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement
Rule 33    statement -> labeled_statement
Rule 34    statement -> expression_statement
Rule 35    statement -> compound_statement
Rule 36    statement -> selection_statement
Rule 37    statement -> iteration_statement
Rule 38    statement -> jump_statement
Rule 39    decl_body -> declaration_specifiers init_declarator_list_opt
Rule 40    declaration -> decl_body SEMI
Rule 41    declaration_list -> declaration
Rule 42    declaration_list -> declaration_list declaration
Rule 43    declaration_specifiers -> type_qualifier declaration_specifiers_opt
Rule 44    declaration_specifiers -> type_specifier declaration_specifiers_opt
Rule 45    declaration_specifiers -> storage_class_specifier declaration_specifiers_opt
Rule 46    declaration_specifiers -> function_specifier declaration_specifiers_opt
Rule 47    storage_class_specifier -> AUTO
Rule 48    storage_class_specifier -> REGISTER
Rule 49    storage_class_specifier -> STATIC
Rule 50    storage_class_specifier -> EXTERN
Rule 51    storage_class_specifier -> TYPEDEF
Rule 52    function_specifier -> INLINE
Rule 53    type_specifier -> VOID
Rule 54    type_specifier -> CHAR
Rule 55    type_specifier -> SHORT
Rule 56    type_specifier -> INT
Rule 57    type_specifier -> LONG
Rule 58    type_specifier -> FLOAT
Rule 59    type_specifier -> DOUBLE
Rule 60    type_specifier -> SIGNED
Rule 61    type_specifier -> UNSIGNED
Rule 62    type_specifier -> typedef_name
Rule 63    type_specifier -> enum_specifier
Rule 64    type_specifier -> struct_or_union_specifier
Rule 65    type_qualifier -> CONST
Rule 66    type_qualifier -> RESTRICT
Rule 67    type_qualifier -> VOLATILE
Rule 68    init_declarator_list -> init_declarator
Rule 69    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 70    init_declarator -> declarator
Rule 71    init_declarator -> declarator EQUALS initializer
Rule 72    specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt
Rule 73    specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt
Rule 74    struct_or_union_specifier -> struct_or_union ID
Rule 75    struct_or_union_specifier -> struct_or_union TYPEID
Rule 76    struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE
Rule 77    struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE
Rule 78    struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
Rule 79    struct_or_union -> STRUCT
Rule 80    struct_or_union -> UNION
Rule 81    struct_declaration_list -> struct_declaration
Rule 82    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 83    struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 84    struct_declarator_list -> struct_declarator
Rule 85    struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 86    struct_declarator -> declarator
Rule 87    struct_declarator -> declarator COLON constant_expression
Rule 88    struct_declarator -> COLON constant_expression
Rule 89    enum_specifier -> ENUM ID
Rule 90    enum_specifier -> ENUM TYPEID
Rule 91    enum_specifier -> ENUM LBRACE enumerator_list RBRACE
Rule 92    enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE
Rule 93    enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE
Rule 94    enumerator_list -> enumerator
Rule 95    enumerator_list -> enumerator_list COMMA
Rule 96    enumerator_list -> enumerator_list COMMA enumerator
Rule 97    enumerator -> ID
Rule 98    enumerator -> ID EQUALS constant_expression
Rule 99    declarator -> direct_declarator
Rule 100   declarator -> pointer direct_declarator
Rule 101   direct_declarator -> ID
Rule 102   direct_declarator -> LPAREN declarator RPAREN
Rule 103   direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET
Rule 104   direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET
Rule 105   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 106   direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 107   pointer -> TIMES type_qualifier_list_opt
Rule 108   pointer -> TIMES type_qualifier_list_opt pointer
Rule 109   type_qualifier_list -> type_qualifier
Rule 110   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 111   parameter_type_list -> parameter_list
Rule 112   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 113   parameter_list -> parameter_declaration
Rule 114   parameter_list -> parameter_list COMMA parameter_declaration
Rule 115   parameter_declaration -> declaration_specifiers declarator
Rule 116   parameter_declaration -> declaration_specifiers abstract_declarator_opt
Rule 117   identifier_list -> identifier
Rule 118   identifier_list -> identifier_list COMMA identifier
Rule 119   initializer -> assignment_expression
Rule 120   initializer -> LBRACE initializer_list RBRACE
Rule 121   initializer -> LBRACE initializer_list COMMA RBRACE
Rule 122   initializer_list -> designation_opt initializer
Rule 123   initializer_list -> initializer_list COMMA designation_opt initializer
Rule 124   designation -> designator_list EQUALS
Rule 125   designator_list -> designator
Rule 126   designator_list -> designator_list designator
Rule 127   designator -> LBRACKET constant_expression RBRACKET
Rule 128   designator -> PERIOD identifier
Rule 129   type_name -> specifier_qualifier_list abstract_declarator_opt
Rule 130   abstract_declarator -> pointer
Rule 131   abstract_declarator -> pointer direct_abstract_declarator
Rule 132   abstract_declarator -> direct_abstract_declarator
Rule 133   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 134   direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
Rule 135   direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET
Rule 136   direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET
Rule 137   direct_abstract_declarator -> LBRACKET TIMES RBRACKET
Rule 138   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
Rule 139   direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN
Rule 140   block_item -> declaration
Rule 141   block_item -> statement
Rule 142   block_item_list -> block_item
Rule 143   block_item_list -> block_item_list block_item
Rule 144   compound_statement -> LBRACE block_item_list_opt RBRACE
Rule 145   labeled_statement -> ID COLON statement
Rule 146   labeled_statement -> CASE constant_expression COLON statement
Rule 147   labeled_statement -> DEFAULT COLON statement
Rule 148   selection_statement -> IF LPAREN expression RPAREN statement
Rule 149   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 150   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 151   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 152   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 153   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 154   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 155   jump_statement -> GOTO ID SEMI
Rule 156   jump_statement -> BREAK SEMI
Rule 157   jump_statement -> CONTINUE SEMI
Rule 158   jump_statement -> RETURN expression SEMI
Rule 159   jump_statement -> RETURN SEMI
Rule 160   expression_statement -> expression_opt SEMI
Rule 161   expression -> assignment_expression
Rule 162   expression -> expression COMMA assignment_expression
Rule 163   typedef_name -> TYPEID
Rule 164   assignment_expression -> conditional_expression
Rule 165   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 166   assignment_operator -> EQUALS
Rule 167   assignment_operator -> XOREQUAL
Rule 168   assignment_operator -> TIMESEQUAL
Rule 169   assignment_operator -> DIVEQUAL
Rule 170   assignment_operator -> MODEQUAL
Rule 171   assignment_operator -> PLUSEQUAL
Rule 172   assignment_operator -> MINUSEQUAL
Rule 173   assignment_operator -> LSHIFTEQUAL
Rule 174   assignment_operator -> RSHIFTEQUAL
Rule 175   assignment_operator -> ANDEQUAL
Rule 176   assignment_operator -> OREQUAL
Rule 177   constant_expression -> conditional_expression
Rule 178   conditional_expression -> binary_expression
Rule 179   conditional_expression -> binary_expression CONDOP expression COLON conditional_expression
Rule 180   binary_expression -> cast_expression
Rule 181   binary_expression -> binary_expression TIMES binary_expression
Rule 182   binary_expression -> binary_expression DIVIDE binary_expression
Rule 183   binary_expression -> binary_expression MOD binary_expression
Rule 184   binary_expression -> binary_expression PLUS binary_expression
Rule 185   binary_expression -> binary_expression MINUS binary_expression
Rule 186   binary_expression -> binary_expression RSHIFT binary_expression
Rule 187   binary_expression -> binary_expression LSHIFT binary_expression
Rule 188   binary_expression -> binary_expression LT binary_expression
Rule 189   binary_expression -> binary_expression LE binary_expression
Rule 190   binary_expression -> binary_expression GE binary_expression
Rule 191   binary_expression -> binary_expression GT binary_expression
Rule 192   binary_expression -> binary_expression EQ binary_expression
Rule 193   binary_expression -> binary_expression NE binary_expression
Rule 194   binary_expression -> binary_expression AND binary_expression
Rule 195   binary_expression -> binary_expression OR binary_expression
Rule 196   binary_expression -> binary_expression XOR binary_expression
Rule 197   binary_expression -> binary_expression LAND binary_expression
Rule 198   binary_expression -> binary_expression LOR binary_expression
Rule 199   cast_expression -> unary_expression
Rule 200   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 201   unary_expression -> postfix_expression
Rule 202   unary_expression -> PLUSPLUS unary_expression
Rule 203   unary_expression -> MINUSMINUS unary_expression
Rule 204   unary_expression -> unary_operator cast_expression
Rule 205   unary_expression -> SIZEOF unary_expression
Rule 206   unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 207   unary_operator -> AND
Rule 208   unary_operator -> TIMES
Rule 209   unary_operator -> PLUS
Rule 210   unary_operator -> MINUS
Rule 211   unary_operator -> NOT
Rule 212   unary_operator -> LNOT
Rule 213   postfix_expression -> primary_expression
Rule 214   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 215   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 216   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 217   postfix_expression -> postfix_expression PERIOD identifier
Rule 218   postfix_expression -> postfix_expression ARROW identifier
Rule 219   postfix_expression -> postfix_expression PLUSPLUS
Rule 220   postfix_expression -> postfix_expression MINUSMINUS
Rule 221   postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE
Rule 222   postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
Rule 223   primary_expression -> identifier
Rule 224   primary_expression -> constant
Rule 225   primary_expression -> unified_string_literal
Rule 226   primary_expression -> unified_wstring_literal
Rule 227   primary_expression -> LPAREN expression RPAREN
Rule 228   argument_expression_list -> assignment_expression
Rule 229   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 230   identifier -> ID
Rule 231   constant -> INT_CONST_DEC
Rule 232   constant -> INT_CONST_OCT
Rule 233   constant -> INT_CONST_HEX
Rule 234   constant -> FLOAT_CONST
Rule 235   constant -> CHAR_CONST
Rule 236   constant -> WCHAR_CONST
Rule 237   unified_string_literal -> STRING_LITERAL
Rule 238   unified_string_literal -> unified_string_literal STRING_LITERAL
Rule 239   unified_wstring_literal -> WSTRING_LITERAL
Rule 240   unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL
Rule 241   empty -> <empty>

Terminals, with rules where they appear

AND                  : 194 207
ANDEQUAL             : 175
ARROW                : 218
AUTO                 : 47
BREAK                : 156
CASE                 : 146
CHAR                 : 54
CHAR_CONST           : 235
COLON                : 87 88 145 146 147 179
COMMA                : 69 85 95 96 112 114 118 121 123 162 222 229
CONDOP               : 179
CONST                : 65
CONTINUE             : 157
DEFAULT              : 147
DIVEQUAL             : 169
DIVIDE               : 182
DO                   : 152
DOUBLE               : 59
ELLIPSIS             : 112
ELSE                 : 149
ENUM                 : 89 90 91 92 93
EQ                   : 192
EQUALS               : 71 98 124 166
EXTERN               : 50
FLOAT                : 58
FLOAT_CONST          : 234
FOR                  : 153 154
GE                   : 190
GOTO                 : 155
GT                   : 191
ID                   : 74 77 89 92 97 98 101 145 155 230
IF                   : 148 149
INLINE               : 52
INT                  : 56
INT_CONST_DEC        : 231
INT_CONST_HEX        : 233
INT_CONST_OCT        : 232
LAND                 : 197
LBRACE               : 76 77 78 91 92 93 120 121 144 221 222
LBRACKET             : 103 104 127 134 135 136 137 214
LE                   : 189
LNOT                 : 212
LONG                 : 57
LOR                  : 198
LPAREN               : 102 105 106 133 138 139 148 149 150 151 152 153 154 200 206 215 216 221 222 227
LSHIFT               : 187
LSHIFTEQUAL          : 173
LT                   : 188
MINUS                : 185 210
MINUSEQUAL           : 172
MINUSMINUS           : 203 220
MOD                  : 183
MODEQUAL             : 170
NE                   : 193
NOT                  : 211
OR                   : 195
OREQUAL              : 176
PERIOD               : 128 217
PLUS                 : 184 209
PLUSEQUAL            : 171
PLUSPLUS             : 202 219
PPHASH               : 30
RBRACE               : 76 77 78 91 92 93 120 121 144 221 222
RBRACKET             : 103 104 127 134 135 136 137 214
REGISTER             : 48
RESTRICT             : 66
RETURN               : 158 159
RPAREN               : 102 105 106 133 138 139 148 149 150 151 152 153 154 200 206 215 216 221 222 227
RSHIFT               : 186
RSHIFTEQUAL          : 174
SEMI                 : 40 83 152 153 153 154 155 156 157 158 159 160
SHORT                : 55
SIGNED               : 60
SIZEOF               : 205 206
STATIC               : 49
STRING_LITERAL       : 237 238
STRUCT               : 79
SWITCH               : 150
TIMES                : 104 107 108 136 137 181 208
TIMESEQUAL           : 168
TYPEDEF              : 51
TYPEID               : 75 78 90 93 163
UNION                : 80
UNSIGNED             : 61
VOID                 : 53
VOLATILE             : 67
WCHAR_CONST          : 236
WHILE                : 151 152
WSTRING_LITERAL      : 239 240
XOR                  : 196
XOREQUAL             : 167
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 2 133
abstract_declarator_opt : 116 129
argument_expression_list : 215 229
assignment_expression : 4 119 161 162 165 228 229
assignment_expression_opt : 103 134 135
assignment_operator  : 165
binary_expression    : 178 179 181 181 182 182 183 183 184 184 185 185 186 186 187 187 188 188 189 189 190 190 191 191 192 192 193 193 194 194 195 195 196 196 197 197 198 198
block_item           : 142 143
block_item_list      : 6 143
block_item_list_opt  : 144
cast_expression      : 180 200 204
compound_statement   : 31 32 35
conditional_expression : 164 177 179
constant             : 224
constant_expression  : 87 88 98 127 146
decl_body            : 40
declaration          : 28 41 42 140 154
declaration_list     : 8 42
declaration_list_opt : 31 32
declaration_specifiers : 10 32 39 115 116
declaration_specifiers_opt : 43 44 45 46
declarator           : 31 32 70 71 86 87 102 115
designation          : 12
designation_opt      : 122 123
designator           : 125 126
designator_list      : 124 126
direct_abstract_declarator : 131 132 134 136 138
direct_declarator    : 99 100 103 104 105 106
empty                : 1 3 5 7 9 11 13 15 17 19 21 23
enum_specifier       : 63
enumerator           : 94 96
enumerator_list      : 91 92 93 95 96
expression           : 14 148 149 150 151 152 158 162 179 214 227
expression_opt       : 153 153 153 154 154 160
expression_statement : 34
external_declaration : 25 26
function_definition  : 27
function_specifier   : 46
identifier           : 117 118 128 217 218 223
identifier_list      : 16 118
identifier_list_opt  : 106
init_declarator      : 68 69
init_declarator_list : 18 69
init_declarator_list_opt : 39
initializer          : 71 122 123
initializer_list     : 120 121 123 221 222
iteration_statement  : 37
jump_statement       : 38
labeled_statement    : 33
parameter_declaration : 113 114
parameter_list       : 111 112 114
parameter_type_list  : 20 105
parameter_type_list_opt : 138 139
pointer              : 100 108 130 131
postfix_expression   : 201 214 215 216 217 218 219 220
pp_directive         : 29
primary_expression   : 213
selection_statement  : 36
specifier_qualifier_list : 22 83 129
specifier_qualifier_list_opt : 72 73
statement            : 141 145 146 147 148 149 149 150 151 152 153 154
storage_class_specifier : 45
struct_declaration   : 81 82
struct_declaration_list : 76 77 78 82
struct_declarator    : 84 85
struct_declarator_list : 83 85
struct_or_union      : 74 75 76 77 78
struct_or_union_specifier : 64
translation_unit     : 26 0
type_name            : 200 206 221 222
type_qualifier       : 43 72 109 110
type_qualifier_list  : 24 110
type_qualifier_list_opt : 107 108
type_specifier       : 44 73
typedef_name         : 62
unary_expression     : 165 199 202 203 205
unary_operator       : 204
unified_string_literal : 225 238
unified_wstring_literal : 226 240

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (25) translation_unit -> . external_declaration
    (26) translation_unit -> . translation_unit external_declaration
    (27) external_declaration -> . function_definition
    (28) external_declaration -> . declaration
    (29) external_declaration -> . pp_directive
    (31) function_definition -> . declarator declaration_list_opt compound_statement
    (32) function_definition -> . declaration_specifiers declarator declaration_list_opt compound_statement
    (40) declaration -> . decl_body SEMI
    (30) pp_directive -> . PPHASH
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (39) decl_body -> . declaration_specifiers init_declarator_list_opt
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    PPHASH          shift and go to state 34
    ID              shift and go to state 29
    LPAREN          shift and go to state 4
    TIMES           shift and go to state 24
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    pp_directive                   shift and go to state 10
    external_declaration           shift and go to state 11
    type_specifier                 shift and go to state 12
    pointer                        shift and go to state 13
    translation_unit               shift and go to state 19
    struct_or_union                shift and go to state 7
    direct_declarator              shift and go to state 22
    declaration_specifiers         shift and go to state 26
    declaration                    shift and go to state 27
    typedef_name                   shift and go to state 25
    function_definition            shift and go to state 32
    enum_specifier                 shift and go to state 41
    decl_body                      shift and go to state 37
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    declarator                     shift and go to state 43

state 1

    (45) declaration_specifiers -> storage_class_specifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (241) empty -> .
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    ID              reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    SEMI            reduce using rule 241 (empty -> .)
    LBRACKET        reduce using rule 241 (empty -> .)
    COMMA           reduce using rule 241 (empty -> .)
    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 12
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    declaration_specifiers         shift and go to state 47
    declaration_specifiers_opt     shift and go to state 45
    typedef_name                   shift and go to state 25
    empty                          shift and go to state 46

state 2

    (55) type_specifier -> SHORT .

    CONST           reduce using rule 55 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 55 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 55 (type_specifier -> SHORT .)
    VOID            reduce using rule 55 (type_specifier -> SHORT .)
    CHAR            reduce using rule 55 (type_specifier -> SHORT .)
    SHORT           reduce using rule 55 (type_specifier -> SHORT .)
    INT             reduce using rule 55 (type_specifier -> SHORT .)
    LONG            reduce using rule 55 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 55 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 55 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 55 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 55 (type_specifier -> SHORT .)
    TYPEID          reduce using rule 55 (type_specifier -> SHORT .)
    ENUM            reduce using rule 55 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 55 (type_specifier -> SHORT .)
    UNION           reduce using rule 55 (type_specifier -> SHORT .)
    COLON           reduce using rule 55 (type_specifier -> SHORT .)
    ID              reduce using rule 55 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 55 (type_specifier -> SHORT .)
    TIMES           reduce using rule 55 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 55 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 55 (type_specifier -> SHORT .)
    AUTO            reduce using rule 55 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 55 (type_specifier -> SHORT .)
    STATIC          reduce using rule 55 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 55 (type_specifier -> SHORT .)
    TYPEDEF         reduce using rule 55 (type_specifier -> SHORT .)
    INLINE          reduce using rule 55 (type_specifier -> SHORT .)
    SEMI            reduce using rule 55 (type_specifier -> SHORT .)
    COMMA           reduce using rule 55 (type_specifier -> SHORT .)


state 3

    (65) type_qualifier -> CONST .

    CONST           reduce using rule 65 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 65 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 65 (type_qualifier -> CONST .)
    VOID            reduce using rule 65 (type_qualifier -> CONST .)
    CHAR            reduce using rule 65 (type_qualifier -> CONST .)
    SHORT           reduce using rule 65 (type_qualifier -> CONST .)
    INT             reduce using rule 65 (type_qualifier -> CONST .)
    LONG            reduce using rule 65 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 65 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 65 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 65 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 65 (type_qualifier -> CONST .)
    AUTO            reduce using rule 65 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 65 (type_qualifier -> CONST .)
    STATIC          reduce using rule 65 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 65 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 65 (type_qualifier -> CONST .)
    INLINE          reduce using rule 65 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 65 (type_qualifier -> CONST .)
    ENUM            reduce using rule 65 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 65 (type_qualifier -> CONST .)
    UNION           reduce using rule 65 (type_qualifier -> CONST .)
    ID              reduce using rule 65 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 65 (type_qualifier -> CONST .)
    TIMES           reduce using rule 65 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 65 (type_qualifier -> CONST .)
    COMMA           reduce using rule 65 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 65 (type_qualifier -> CONST .)
    SEMI            reduce using rule 65 (type_qualifier -> CONST .)
    COLON           reduce using rule 65 (type_qualifier -> CONST .)


state 4

    (102) direct_declarator -> LPAREN . declarator RPAREN
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 29
    LPAREN          shift and go to state 4
    TIMES           shift and go to state 24

    direct_declarator              shift and go to state 22
    declarator                     shift and go to state 48
    pointer                        shift and go to state 13

state 5

    (64) type_specifier -> struct_or_union_specifier .

    CONST           reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 64 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 64 (type_specifier -> struct_or_union_specifier .)


state 6

    (53) type_specifier -> VOID .

    CONST           reduce using rule 53 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 53 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 53 (type_specifier -> VOID .)
    VOID            reduce using rule 53 (type_specifier -> VOID .)
    CHAR            reduce using rule 53 (type_specifier -> VOID .)
    SHORT           reduce using rule 53 (type_specifier -> VOID .)
    INT             reduce using rule 53 (type_specifier -> VOID .)
    LONG            reduce using rule 53 (type_specifier -> VOID .)
    FLOAT           reduce using rule 53 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 53 (type_specifier -> VOID .)
    SIGNED          reduce using rule 53 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 53 (type_specifier -> VOID .)
    TYPEID          reduce using rule 53 (type_specifier -> VOID .)
    ENUM            reduce using rule 53 (type_specifier -> VOID .)
    STRUCT          reduce using rule 53 (type_specifier -> VOID .)
    UNION           reduce using rule 53 (type_specifier -> VOID .)
    COLON           reduce using rule 53 (type_specifier -> VOID .)
    ID              reduce using rule 53 (type_specifier -> VOID .)
    LPAREN          reduce using rule 53 (type_specifier -> VOID .)
    TIMES           reduce using rule 53 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 53 (type_specifier -> VOID .)
    RPAREN          reduce using rule 53 (type_specifier -> VOID .)
    AUTO            reduce using rule 53 (type_specifier -> VOID .)
    REGISTER        reduce using rule 53 (type_specifier -> VOID .)
    STATIC          reduce using rule 53 (type_specifier -> VOID .)
    EXTERN          reduce using rule 53 (type_specifier -> VOID .)
    TYPEDEF         reduce using rule 53 (type_specifier -> VOID .)
    INLINE          reduce using rule 53 (type_specifier -> VOID .)
    SEMI            reduce using rule 53 (type_specifier -> VOID .)
    COMMA           reduce using rule 53 (type_specifier -> VOID .)


state 7

    (74) struct_or_union_specifier -> struct_or_union . ID
    (75) struct_or_union_specifier -> struct_or_union . TYPEID
    (76) struct_or_union_specifier -> struct_or_union . LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> struct_or_union . ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> struct_or_union . TYPEID LBRACE struct_declaration_list RBRACE

    ID              shift and go to state 51
    TYPEID          shift and go to state 49
    LBRACE          shift and go to state 50


state 8

    (49) storage_class_specifier -> STATIC .

    CONST           reduce using rule 49 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 49 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 49 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 49 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 49 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 49 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 49 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 49 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 49 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 49 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 49 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 49 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 49 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 49 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 49 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 49 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 49 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 49 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 49 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 49 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 49 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 49 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 49 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 49 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 49 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 49 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 49 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 49 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 49 (storage_class_specifier -> STATIC .)


state 9

    (50) storage_class_specifier -> EXTERN .

    CONST           reduce using rule 50 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 50 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 50 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 50 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 50 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 50 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 50 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 50 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 50 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 50 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 50 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 50 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 50 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 50 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 50 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 50 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 50 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 50 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 50 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 50 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 50 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 50 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 50 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 50 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 50 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 50 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 50 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 50 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 50 (storage_class_specifier -> EXTERN .)


state 10

    (29) external_declaration -> pp_directive .

    PPHASH          reduce using rule 29 (external_declaration -> pp_directive .)
    ID              reduce using rule 29 (external_declaration -> pp_directive .)
    LPAREN          reduce using rule 29 (external_declaration -> pp_directive .)
    TIMES           reduce using rule 29 (external_declaration -> pp_directive .)
    CONST           reduce using rule 29 (external_declaration -> pp_directive .)
    RESTRICT        reduce using rule 29 (external_declaration -> pp_directive .)
    VOLATILE        reduce using rule 29 (external_declaration -> pp_directive .)
    VOID            reduce using rule 29 (external_declaration -> pp_directive .)
    CHAR            reduce using rule 29 (external_declaration -> pp_directive .)
    SHORT           reduce using rule 29 (external_declaration -> pp_directive .)
    INT             reduce using rule 29 (external_declaration -> pp_directive .)
    LONG            reduce using rule 29 (external_declaration -> pp_directive .)
    FLOAT           reduce using rule 29 (external_declaration -> pp_directive .)
    DOUBLE          reduce using rule 29 (external_declaration -> pp_directive .)
    SIGNED          reduce using rule 29 (external_declaration -> pp_directive .)
    UNSIGNED        reduce using rule 29 (external_declaration -> pp_directive .)
    AUTO            reduce using rule 29 (external_declaration -> pp_directive .)
    REGISTER        reduce using rule 29 (external_declaration -> pp_directive .)
    STATIC          reduce using rule 29 (external_declaration -> pp_directive .)
    EXTERN          reduce using rule 29 (external_declaration -> pp_directive .)
    TYPEDEF         reduce using rule 29 (external_declaration -> pp_directive .)
    INLINE          reduce using rule 29 (external_declaration -> pp_directive .)
    TYPEID          reduce using rule 29 (external_declaration -> pp_directive .)
    ENUM            reduce using rule 29 (external_declaration -> pp_directive .)
    STRUCT          reduce using rule 29 (external_declaration -> pp_directive .)
    UNION           reduce using rule 29 (external_declaration -> pp_directive .)
    $end            reduce using rule 29 (external_declaration -> pp_directive .)


state 11

    (25) translation_unit -> external_declaration .

    PPHASH          reduce using rule 25 (translation_unit -> external_declaration .)
    ID              reduce using rule 25 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 25 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 25 (translation_unit -> external_declaration .)
    CONST           reduce using rule 25 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 25 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 25 (translation_unit -> external_declaration .)
    VOID            reduce using rule 25 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 25 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 25 (translation_unit -> external_declaration .)
    INT             reduce using rule 25 (translation_unit -> external_declaration .)
    LONG            reduce using rule 25 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 25 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 25 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 25 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 25 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 25 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 25 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 25 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 25 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 25 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 25 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 25 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 25 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 25 (translation_unit -> external_declaration .)
    UNION           reduce using rule 25 (translation_unit -> external_declaration .)
    $end            reduce using rule 25 (translation_unit -> external_declaration .)


state 12

    (44) declaration_specifiers -> type_specifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (241) empty -> .
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    ID              reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    SEMI            reduce using rule 241 (empty -> .)
    LBRACKET        reduce using rule 241 (empty -> .)
    COMMA           reduce using rule 241 (empty -> .)
    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 12
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    declaration_specifiers         shift and go to state 47
    declaration_specifiers_opt     shift and go to state 52
    typedef_name                   shift and go to state 25
    empty                          shift and go to state 46

state 13

    (100) declarator -> pointer . direct_declarator
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 29
    LPAREN          shift and go to state 4

    direct_declarator              shift and go to state 53

state 14

    (48) storage_class_specifier -> REGISTER .

    CONST           reduce using rule 48 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 48 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 48 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 48 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 48 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 48 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 48 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 48 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 48 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 48 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 48 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 48 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 48 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 48 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 48 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 48 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 48 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 48 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 48 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 48 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 48 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 48 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 48 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 48 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 48 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 48 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 48 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 48 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 48 (storage_class_specifier -> REGISTER .)


state 15

    (61) type_specifier -> UNSIGNED .

    CONST           reduce using rule 61 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 61 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 61 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 61 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 61 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 61 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 61 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 61 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 61 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 61 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 61 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 61 (type_specifier -> UNSIGNED .)
    TYPEID          reduce using rule 61 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 61 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 61 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 61 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 61 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 61 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 61 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 61 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 61 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 61 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 61 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 61 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 61 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 61 (type_specifier -> UNSIGNED .)
    TYPEDEF         reduce using rule 61 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 61 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 61 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 61 (type_specifier -> UNSIGNED .)


state 16

    (57) type_specifier -> LONG .

    CONST           reduce using rule 57 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 57 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 57 (type_specifier -> LONG .)
    VOID            reduce using rule 57 (type_specifier -> LONG .)
    CHAR            reduce using rule 57 (type_specifier -> LONG .)
    SHORT           reduce using rule 57 (type_specifier -> LONG .)
    INT             reduce using rule 57 (type_specifier -> LONG .)
    LONG            reduce using rule 57 (type_specifier -> LONG .)
    FLOAT           reduce using rule 57 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 57 (type_specifier -> LONG .)
    SIGNED          reduce using rule 57 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 57 (type_specifier -> LONG .)
    TYPEID          reduce using rule 57 (type_specifier -> LONG .)
    ENUM            reduce using rule 57 (type_specifier -> LONG .)
    STRUCT          reduce using rule 57 (type_specifier -> LONG .)
    UNION           reduce using rule 57 (type_specifier -> LONG .)
    COLON           reduce using rule 57 (type_specifier -> LONG .)
    ID              reduce using rule 57 (type_specifier -> LONG .)
    LPAREN          reduce using rule 57 (type_specifier -> LONG .)
    TIMES           reduce using rule 57 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 57 (type_specifier -> LONG .)
    RPAREN          reduce using rule 57 (type_specifier -> LONG .)
    AUTO            reduce using rule 57 (type_specifier -> LONG .)
    REGISTER        reduce using rule 57 (type_specifier -> LONG .)
    STATIC          reduce using rule 57 (type_specifier -> LONG .)
    EXTERN          reduce using rule 57 (type_specifier -> LONG .)
    TYPEDEF         reduce using rule 57 (type_specifier -> LONG .)
    INLINE          reduce using rule 57 (type_specifier -> LONG .)
    SEMI            reduce using rule 57 (type_specifier -> LONG .)
    COMMA           reduce using rule 57 (type_specifier -> LONG .)


state 17

    (80) struct_or_union -> UNION .

    ID              reduce using rule 80 (struct_or_union -> UNION .)
    TYPEID          reduce using rule 80 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 80 (struct_or_union -> UNION .)


state 18

    (47) storage_class_specifier -> AUTO .

    CONST           reduce using rule 47 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 47 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 47 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 47 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 47 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 47 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 47 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 47 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 47 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 47 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 47 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 47 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 47 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 47 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 47 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 47 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 47 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 47 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 47 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 47 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 47 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 47 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 47 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 47 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 47 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 47 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 47 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 47 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 47 (storage_class_specifier -> AUTO .)


state 19

    (0) S' -> translation_unit .
    (26) translation_unit -> translation_unit . external_declaration
    (27) external_declaration -> . function_definition
    (28) external_declaration -> . declaration
    (29) external_declaration -> . pp_directive
    (31) function_definition -> . declarator declaration_list_opt compound_statement
    (32) function_definition -> . declaration_specifiers declarator declaration_list_opt compound_statement
    (40) declaration -> . decl_body SEMI
    (30) pp_directive -> . PPHASH
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (39) decl_body -> . declaration_specifiers init_declarator_list_opt
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    PPHASH          shift and go to state 34
    ID              shift and go to state 29
    LPAREN          shift and go to state 4
    TIMES           shift and go to state 24
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    pp_directive                   shift and go to state 10
    external_declaration           shift and go to state 54
    type_specifier                 shift and go to state 12
    pointer                        shift and go to state 13
    struct_or_union                shift and go to state 7
    direct_declarator              shift and go to state 22
    declaration_specifiers         shift and go to state 26
    declaration                    shift and go to state 27
    typedef_name                   shift and go to state 25
    function_definition            shift and go to state 32
    enum_specifier                 shift and go to state 41
    decl_body                      shift and go to state 37
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    declarator                     shift and go to state 43

state 20

    (51) storage_class_specifier -> TYPEDEF .

    CONST           reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 51 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 51 (storage_class_specifier -> TYPEDEF .)


state 21

    (163) typedef_name -> TYPEID .

    CONST           reduce using rule 163 (typedef_name -> TYPEID .)
    RESTRICT        reduce using rule 163 (typedef_name -> TYPEID .)
    VOLATILE        reduce using rule 163 (typedef_name -> TYPEID .)
    VOID            reduce using rule 163 (typedef_name -> TYPEID .)
    CHAR            reduce using rule 163 (typedef_name -> TYPEID .)
    SHORT           reduce using rule 163 (typedef_name -> TYPEID .)
    INT             reduce using rule 163 (typedef_name -> TYPEID .)
    LONG            reduce using rule 163 (typedef_name -> TYPEID .)
    FLOAT           reduce using rule 163 (typedef_name -> TYPEID .)
    DOUBLE          reduce using rule 163 (typedef_name -> TYPEID .)
    SIGNED          reduce using rule 163 (typedef_name -> TYPEID .)
    UNSIGNED        reduce using rule 163 (typedef_name -> TYPEID .)
    TYPEID          reduce using rule 163 (typedef_name -> TYPEID .)
    ENUM            reduce using rule 163 (typedef_name -> TYPEID .)
    STRUCT          reduce using rule 163 (typedef_name -> TYPEID .)
    UNION           reduce using rule 163 (typedef_name -> TYPEID .)
    COLON           reduce using rule 163 (typedef_name -> TYPEID .)
    ID              reduce using rule 163 (typedef_name -> TYPEID .)
    LPAREN          reduce using rule 163 (typedef_name -> TYPEID .)
    TIMES           reduce using rule 163 (typedef_name -> TYPEID .)
    AUTO            reduce using rule 163 (typedef_name -> TYPEID .)
    REGISTER        reduce using rule 163 (typedef_name -> TYPEID .)
    STATIC          reduce using rule 163 (typedef_name -> TYPEID .)
    EXTERN          reduce using rule 163 (typedef_name -> TYPEID .)
    TYPEDEF         reduce using rule 163 (typedef_name -> TYPEID .)
    INLINE          reduce using rule 163 (typedef_name -> TYPEID .)
    SEMI            reduce using rule 163 (typedef_name -> TYPEID .)
    LBRACKET        reduce using rule 163 (typedef_name -> TYPEID .)
    COMMA           reduce using rule 163 (typedef_name -> TYPEID .)
    RPAREN          reduce using rule 163 (typedef_name -> TYPEID .)


state 22

    (99) declarator -> direct_declarator .
    (103) direct_declarator -> direct_declarator . LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (105) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    CONST           reduce using rule 99 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 99 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 99 (declarator -> direct_declarator .)
    VOID            reduce using rule 99 (declarator -> direct_declarator .)
    CHAR            reduce using rule 99 (declarator -> direct_declarator .)
    SHORT           reduce using rule 99 (declarator -> direct_declarator .)
    INT             reduce using rule 99 (declarator -> direct_declarator .)
    LONG            reduce using rule 99 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 99 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 99 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 99 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 99 (declarator -> direct_declarator .)
    AUTO            reduce using rule 99 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 99 (declarator -> direct_declarator .)
    STATIC          reduce using rule 99 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 99 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 99 (declarator -> direct_declarator .)
    INLINE          reduce using rule 99 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 99 (declarator -> direct_declarator .)
    ENUM            reduce using rule 99 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 99 (declarator -> direct_declarator .)
    UNION           reduce using rule 99 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 99 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 99 (declarator -> direct_declarator .)
    COMMA           reduce using rule 99 (declarator -> direct_declarator .)
    SEMI            reduce using rule 99 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 99 (declarator -> direct_declarator .)
    COLON           reduce using rule 99 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 55
    LPAREN          shift and go to state 56


state 23

    (89) enum_specifier -> ENUM . ID
    (90) enum_specifier -> ENUM . TYPEID
    (91) enum_specifier -> ENUM . LBRACE enumerator_list RBRACE
    (92) enum_specifier -> ENUM . ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> ENUM . TYPEID LBRACE enumerator_list RBRACE

    ID              shift and go to state 59
    TYPEID          shift and go to state 57
    LBRACE          shift and go to state 58


state 24

    (107) pointer -> TIMES . type_qualifier_list_opt
    (108) pointer -> TIMES . type_qualifier_list_opt pointer
    (23) type_qualifier_list_opt -> . empty
    (24) type_qualifier_list_opt -> . type_qualifier_list
    (241) empty -> .
    (109) type_qualifier_list -> . type_qualifier
    (110) type_qualifier_list -> . type_qualifier_list type_qualifier
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE

    TIMES           reduce using rule 241 (empty -> .)
    ID              reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    LBRACKET        reduce using rule 241 (empty -> .)
    COMMA           reduce using rule 241 (empty -> .)
    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42

    type_qualifier_list_opt        shift and go to state 61
    type_qualifier_list            shift and go to state 60
    empty                          shift and go to state 63
    type_qualifier                 shift and go to state 62

state 25

    (62) type_specifier -> typedef_name .

    CONST           reduce using rule 62 (type_specifier -> typedef_name .)
    RESTRICT        reduce using rule 62 (type_specifier -> typedef_name .)
    VOLATILE        reduce using rule 62 (type_specifier -> typedef_name .)
    VOID            reduce using rule 62 (type_specifier -> typedef_name .)
    CHAR            reduce using rule 62 (type_specifier -> typedef_name .)
    SHORT           reduce using rule 62 (type_specifier -> typedef_name .)
    INT             reduce using rule 62 (type_specifier -> typedef_name .)
    LONG            reduce using rule 62 (type_specifier -> typedef_name .)
    FLOAT           reduce using rule 62 (type_specifier -> typedef_name .)
    DOUBLE          reduce using rule 62 (type_specifier -> typedef_name .)
    SIGNED          reduce using rule 62 (type_specifier -> typedef_name .)
    UNSIGNED        reduce using rule 62 (type_specifier -> typedef_name .)
    TYPEID          reduce using rule 62 (type_specifier -> typedef_name .)
    ENUM            reduce using rule 62 (type_specifier -> typedef_name .)
    STRUCT          reduce using rule 62 (type_specifier -> typedef_name .)
    UNION           reduce using rule 62 (type_specifier -> typedef_name .)
    COLON           reduce using rule 62 (type_specifier -> typedef_name .)
    ID              reduce using rule 62 (type_specifier -> typedef_name .)
    LPAREN          reduce using rule 62 (type_specifier -> typedef_name .)
    TIMES           reduce using rule 62 (type_specifier -> typedef_name .)
    LBRACKET        reduce using rule 62 (type_specifier -> typedef_name .)
    RPAREN          reduce using rule 62 (type_specifier -> typedef_name .)
    AUTO            reduce using rule 62 (type_specifier -> typedef_name .)
    REGISTER        reduce using rule 62 (type_specifier -> typedef_name .)
    STATIC          reduce using rule 62 (type_specifier -> typedef_name .)
    EXTERN          reduce using rule 62 (type_specifier -> typedef_name .)
    TYPEDEF         reduce using rule 62 (type_specifier -> typedef_name .)
    INLINE          reduce using rule 62 (type_specifier -> typedef_name .)
    SEMI            reduce using rule 62 (type_specifier -> typedef_name .)
    COMMA           reduce using rule 62 (type_specifier -> typedef_name .)


state 26

    (32) function_definition -> declaration_specifiers . declarator declaration_list_opt compound_statement
    (39) decl_body -> declaration_specifiers . init_declarator_list_opt
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (17) init_declarator_list_opt -> . empty
    (18) init_declarator_list_opt -> . init_declarator_list
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer
    (241) empty -> .
    (68) init_declarator_list -> . init_declarator
    (69) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (70) init_declarator -> . declarator
    (71) init_declarator -> . declarator EQUALS initializer

    ID              shift and go to state 29
    LPAREN          shift and go to state 4
    TIMES           shift and go to state 24
    SEMI            reduce using rule 241 (empty -> .)

    direct_declarator              shift and go to state 22
    init_declarator                shift and go to state 68
    init_declarator_list           shift and go to state 64
    init_declarator_list_opt       shift and go to state 65
    declarator                     shift and go to state 67
    pointer                        shift and go to state 13
    empty                          shift and go to state 66

state 27

    (28) external_declaration -> declaration .

    PPHASH          reduce using rule 28 (external_declaration -> declaration .)
    ID              reduce using rule 28 (external_declaration -> declaration .)
    LPAREN          reduce using rule 28 (external_declaration -> declaration .)
    TIMES           reduce using rule 28 (external_declaration -> declaration .)
    CONST           reduce using rule 28 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 28 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 28 (external_declaration -> declaration .)
    VOID            reduce using rule 28 (external_declaration -> declaration .)
    CHAR            reduce using rule 28 (external_declaration -> declaration .)
    SHORT           reduce using rule 28 (external_declaration -> declaration .)
    INT             reduce using rule 28 (external_declaration -> declaration .)
    LONG            reduce using rule 28 (external_declaration -> declaration .)
    FLOAT           reduce using rule 28 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 28 (external_declaration -> declaration .)
    SIGNED          reduce using rule 28 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 28 (external_declaration -> declaration .)
    AUTO            reduce using rule 28 (external_declaration -> declaration .)
    REGISTER        reduce using rule 28 (external_declaration -> declaration .)
    STATIC          reduce using rule 28 (external_declaration -> declaration .)
    EXTERN          reduce using rule 28 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 28 (external_declaration -> declaration .)
    INLINE          reduce using rule 28 (external_declaration -> declaration .)
    TYPEID          reduce using rule 28 (external_declaration -> declaration .)
    ENUM            reduce using rule 28 (external_declaration -> declaration .)
    STRUCT          reduce using rule 28 (external_declaration -> declaration .)
    UNION           reduce using rule 28 (external_declaration -> declaration .)
    $end            reduce using rule 28 (external_declaration -> declaration .)


state 28

    (66) type_qualifier -> RESTRICT .

    CONST           reduce using rule 66 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 66 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 66 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 66 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 66 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 66 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 66 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 66 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 66 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 66 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 66 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 66 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 66 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 66 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 66 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 66 (type_qualifier -> RESTRICT .)
    TYPEDEF         reduce using rule 66 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 66 (type_qualifier -> RESTRICT .)
    TYPEID          reduce using rule 66 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 66 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 66 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 66 (type_qualifier -> RESTRICT .)
    ID              reduce using rule 66 (type_qualifier -> RESTRICT .)
    LPAREN          reduce using rule 66 (type_qualifier -> RESTRICT .)
    TIMES           reduce using rule 66 (type_qualifier -> RESTRICT .)
    LBRACKET        reduce using rule 66 (type_qualifier -> RESTRICT .)
    COMMA           reduce using rule 66 (type_qualifier -> RESTRICT .)
    RPAREN          reduce using rule 66 (type_qualifier -> RESTRICT .)
    SEMI            reduce using rule 66 (type_qualifier -> RESTRICT .)
    COLON           reduce using rule 66 (type_qualifier -> RESTRICT .)


state 29

    (101) direct_declarator -> ID .

    LBRACKET        reduce using rule 101 (direct_declarator -> ID .)
    LPAREN          reduce using rule 101 (direct_declarator -> ID .)
    RPAREN          reduce using rule 101 (direct_declarator -> ID .)
    COLON           reduce using rule 101 (direct_declarator -> ID .)
    SEMI            reduce using rule 101 (direct_declarator -> ID .)
    COMMA           reduce using rule 101 (direct_declarator -> ID .)
    CONST           reduce using rule 101 (direct_declarator -> ID .)
    RESTRICT        reduce using rule 101 (direct_declarator -> ID .)
    VOLATILE        reduce using rule 101 (direct_declarator -> ID .)
    VOID            reduce using rule 101 (direct_declarator -> ID .)
    CHAR            reduce using rule 101 (direct_declarator -> ID .)
    SHORT           reduce using rule 101 (direct_declarator -> ID .)
    INT             reduce using rule 101 (direct_declarator -> ID .)
    LONG            reduce using rule 101 (direct_declarator -> ID .)
    FLOAT           reduce using rule 101 (direct_declarator -> ID .)
    DOUBLE          reduce using rule 101 (direct_declarator -> ID .)
    SIGNED          reduce using rule 101 (direct_declarator -> ID .)
    UNSIGNED        reduce using rule 101 (direct_declarator -> ID .)
    AUTO            reduce using rule 101 (direct_declarator -> ID .)
    REGISTER        reduce using rule 101 (direct_declarator -> ID .)
    STATIC          reduce using rule 101 (direct_declarator -> ID .)
    EXTERN          reduce using rule 101 (direct_declarator -> ID .)
    TYPEDEF         reduce using rule 101 (direct_declarator -> ID .)
    INLINE          reduce using rule 101 (direct_declarator -> ID .)
    TYPEID          reduce using rule 101 (direct_declarator -> ID .)
    ENUM            reduce using rule 101 (direct_declarator -> ID .)
    STRUCT          reduce using rule 101 (direct_declarator -> ID .)
    UNION           reduce using rule 101 (direct_declarator -> ID .)
    LBRACE          reduce using rule 101 (direct_declarator -> ID .)
    EQUALS          reduce using rule 101 (direct_declarator -> ID .)


state 30

    (79) struct_or_union -> STRUCT .

    ID              reduce using rule 79 (struct_or_union -> STRUCT .)
    TYPEID          reduce using rule 79 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 79 (struct_or_union -> STRUCT .)


state 31

    (58) type_specifier -> FLOAT .

    CONST           reduce using rule 58 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 58 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 58 (type_specifier -> FLOAT .)
    VOID            reduce using rule 58 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 58 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 58 (type_specifier -> FLOAT .)
    INT             reduce using rule 58 (type_specifier -> FLOAT .)
    LONG            reduce using rule 58 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 58 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 58 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 58 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 58 (type_specifier -> FLOAT .)
    TYPEID          reduce using rule 58 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 58 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 58 (type_specifier -> FLOAT .)
    UNION           reduce using rule 58 (type_specifier -> FLOAT .)
    COLON           reduce using rule 58 (type_specifier -> FLOAT .)
    ID              reduce using rule 58 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 58 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 58 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 58 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 58 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 58 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 58 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 58 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 58 (type_specifier -> FLOAT .)
    TYPEDEF         reduce using rule 58 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 58 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 58 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 58 (type_specifier -> FLOAT .)


state 32

    (27) external_declaration -> function_definition .

    PPHASH          reduce using rule 27 (external_declaration -> function_definition .)
    ID              reduce using rule 27 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 27 (external_declaration -> function_definition .)
    TIMES           reduce using rule 27 (external_declaration -> function_definition .)
    CONST           reduce using rule 27 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 27 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 27 (external_declaration -> function_definition .)
    VOID            reduce using rule 27 (external_declaration -> function_definition .)
    CHAR            reduce using rule 27 (external_declaration -> function_definition .)
    SHORT           reduce using rule 27 (external_declaration -> function_definition .)
    INT             reduce using rule 27 (external_declaration -> function_definition .)
    LONG            reduce using rule 27 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 27 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 27 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 27 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 27 (external_declaration -> function_definition .)
    AUTO            reduce using rule 27 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 27 (external_declaration -> function_definition .)
    STATIC          reduce using rule 27 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 27 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 27 (external_declaration -> function_definition .)
    INLINE          reduce using rule 27 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 27 (external_declaration -> function_definition .)
    ENUM            reduce using rule 27 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 27 (external_declaration -> function_definition .)
    UNION           reduce using rule 27 (external_declaration -> function_definition .)
    $end            reduce using rule 27 (external_declaration -> function_definition .)


state 33

    (54) type_specifier -> CHAR .

    CONST           reduce using rule 54 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 54 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 54 (type_specifier -> CHAR .)
    VOID            reduce using rule 54 (type_specifier -> CHAR .)
    CHAR            reduce using rule 54 (type_specifier -> CHAR .)
    SHORT           reduce using rule 54 (type_specifier -> CHAR .)
    INT             reduce using rule 54 (type_specifier -> CHAR .)
    LONG            reduce using rule 54 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 54 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 54 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 54 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 54 (type_specifier -> CHAR .)
    TYPEID          reduce using rule 54 (type_specifier -> CHAR .)
    ENUM            reduce using rule 54 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 54 (type_specifier -> CHAR .)
    UNION           reduce using rule 54 (type_specifier -> CHAR .)
    COLON           reduce using rule 54 (type_specifier -> CHAR .)
    ID              reduce using rule 54 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 54 (type_specifier -> CHAR .)
    TIMES           reduce using rule 54 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 54 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 54 (type_specifier -> CHAR .)
    AUTO            reduce using rule 54 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 54 (type_specifier -> CHAR .)
    STATIC          reduce using rule 54 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 54 (type_specifier -> CHAR .)
    TYPEDEF         reduce using rule 54 (type_specifier -> CHAR .)
    INLINE          reduce using rule 54 (type_specifier -> CHAR .)
    SEMI            reduce using rule 54 (type_specifier -> CHAR .)
    COMMA           reduce using rule 54 (type_specifier -> CHAR .)


state 34

    (30) pp_directive -> PPHASH .

    PPHASH          reduce using rule 30 (pp_directive -> PPHASH .)
    ID              reduce using rule 30 (pp_directive -> PPHASH .)
    LPAREN          reduce using rule 30 (pp_directive -> PPHASH .)
    TIMES           reduce using rule 30 (pp_directive -> PPHASH .)
    CONST           reduce using rule 30 (pp_directive -> PPHASH .)
    RESTRICT        reduce using rule 30 (pp_directive -> PPHASH .)
    VOLATILE        reduce using rule 30 (pp_directive -> PPHASH .)
    VOID            reduce using rule 30 (pp_directive -> PPHASH .)
    CHAR            reduce using rule 30 (pp_directive -> PPHASH .)
    SHORT           reduce using rule 30 (pp_directive -> PPHASH .)
    INT             reduce using rule 30 (pp_directive -> PPHASH .)
    LONG            reduce using rule 30 (pp_directive -> PPHASH .)
    FLOAT           reduce using rule 30 (pp_directive -> PPHASH .)
    DOUBLE          reduce using rule 30 (pp_directive -> PPHASH .)
    SIGNED          reduce using rule 30 (pp_directive -> PPHASH .)
    UNSIGNED        reduce using rule 30 (pp_directive -> PPHASH .)
    AUTO            reduce using rule 30 (pp_directive -> PPHASH .)
    REGISTER        reduce using rule 30 (pp_directive -> PPHASH .)
    STATIC          reduce using rule 30 (pp_directive -> PPHASH .)
    EXTERN          reduce using rule 30 (pp_directive -> PPHASH .)
    TYPEDEF         reduce using rule 30 (pp_directive -> PPHASH .)
    INLINE          reduce using rule 30 (pp_directive -> PPHASH .)
    TYPEID          reduce using rule 30 (pp_directive -> PPHASH .)
    ENUM            reduce using rule 30 (pp_directive -> PPHASH .)
    STRUCT          reduce using rule 30 (pp_directive -> PPHASH .)
    UNION           reduce using rule 30 (pp_directive -> PPHASH .)
    $end            reduce using rule 30 (pp_directive -> PPHASH .)


state 35

    (56) type_specifier -> INT .

    CONST           reduce using rule 56 (type_specifier -> INT .)
    RESTRICT        reduce using rule 56 (type_specifier -> INT .)
    VOLATILE        reduce using rule 56 (type_specifier -> INT .)
    VOID            reduce using rule 56 (type_specifier -> INT .)
    CHAR            reduce using rule 56 (type_specifier -> INT .)
    SHORT           reduce using rule 56 (type_specifier -> INT .)
    INT             reduce using rule 56 (type_specifier -> INT .)
    LONG            reduce using rule 56 (type_specifier -> INT .)
    FLOAT           reduce using rule 56 (type_specifier -> INT .)
    DOUBLE          reduce using rule 56 (type_specifier -> INT .)
    SIGNED          reduce using rule 56 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 56 (type_specifier -> INT .)
    TYPEID          reduce using rule 56 (type_specifier -> INT .)
    ENUM            reduce using rule 56 (type_specifier -> INT .)
    STRUCT          reduce using rule 56 (type_specifier -> INT .)
    UNION           reduce using rule 56 (type_specifier -> INT .)
    COLON           reduce using rule 56 (type_specifier -> INT .)
    ID              reduce using rule 56 (type_specifier -> INT .)
    LPAREN          reduce using rule 56 (type_specifier -> INT .)
    TIMES           reduce using rule 56 (type_specifier -> INT .)
    LBRACKET        reduce using rule 56 (type_specifier -> INT .)
    RPAREN          reduce using rule 56 (type_specifier -> INT .)
    AUTO            reduce using rule 56 (type_specifier -> INT .)
    REGISTER        reduce using rule 56 (type_specifier -> INT .)
    STATIC          reduce using rule 56 (type_specifier -> INT .)
    EXTERN          reduce using rule 56 (type_specifier -> INT .)
    TYPEDEF         reduce using rule 56 (type_specifier -> INT .)
    INLINE          reduce using rule 56 (type_specifier -> INT .)
    SEMI            reduce using rule 56 (type_specifier -> INT .)
    COMMA           reduce using rule 56 (type_specifier -> INT .)


state 36

    (59) type_specifier -> DOUBLE .

    CONST           reduce using rule 59 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 59 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 59 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 59 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 59 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 59 (type_specifier -> DOUBLE .)
    INT             reduce using rule 59 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 59 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 59 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 59 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 59 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 59 (type_specifier -> DOUBLE .)
    TYPEID          reduce using rule 59 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 59 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 59 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 59 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 59 (type_specifier -> DOUBLE .)
    ID              reduce using rule 59 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 59 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 59 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 59 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 59 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 59 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 59 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 59 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 59 (type_specifier -> DOUBLE .)
    TYPEDEF         reduce using rule 59 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 59 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 59 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 59 (type_specifier -> DOUBLE .)


state 37

    (40) declaration -> decl_body . SEMI

    SEMI            shift and go to state 69


state 38

    (43) declaration_specifiers -> type_qualifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (241) empty -> .
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    ID              reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    SEMI            reduce using rule 241 (empty -> .)
    LBRACKET        reduce using rule 241 (empty -> .)
    COMMA           reduce using rule 241 (empty -> .)
    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 12
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    declaration_specifiers         shift and go to state 47
    declaration_specifiers_opt     shift and go to state 70
    typedef_name                   shift and go to state 25
    empty                          shift and go to state 46

state 39

    (60) type_specifier -> SIGNED .

    CONST           reduce using rule 60 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 60 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 60 (type_specifier -> SIGNED .)
    VOID            reduce using rule 60 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 60 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 60 (type_specifier -> SIGNED .)
    INT             reduce using rule 60 (type_specifier -> SIGNED .)
    LONG            reduce using rule 60 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 60 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 60 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 60 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 60 (type_specifier -> SIGNED .)
    TYPEID          reduce using rule 60 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 60 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 60 (type_specifier -> SIGNED .)
    UNION           reduce using rule 60 (type_specifier -> SIGNED .)
    COLON           reduce using rule 60 (type_specifier -> SIGNED .)
    ID              reduce using rule 60 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 60 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 60 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 60 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 60 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 60 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 60 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 60 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 60 (type_specifier -> SIGNED .)
    TYPEDEF         reduce using rule 60 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 60 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 60 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 60 (type_specifier -> SIGNED .)


state 40

    (46) declaration_specifiers -> function_specifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (241) empty -> .
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    ID              reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    SEMI            reduce using rule 241 (empty -> .)
    LBRACKET        reduce using rule 241 (empty -> .)
    COMMA           reduce using rule 241 (empty -> .)
    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 12
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    declaration_specifiers         shift and go to state 47
    declaration_specifiers_opt     shift and go to state 71
    typedef_name                   shift and go to state 25
    empty                          shift and go to state 46

state 41

    (63) type_specifier -> enum_specifier .

    CONST           reduce using rule 63 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 63 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 63 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 63 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 63 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 63 (type_specifier -> enum_specifier .)
    INT             reduce using rule 63 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 63 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 63 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 63 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 63 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 63 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 63 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 63 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 63 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 63 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 63 (type_specifier -> enum_specifier .)
    ID              reduce using rule 63 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 63 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 63 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 63 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 63 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 63 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 63 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 63 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 63 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 63 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 63 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 63 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 63 (type_specifier -> enum_specifier .)


state 42

    (67) type_qualifier -> VOLATILE .

    CONST           reduce using rule 67 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 67 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 67 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 67 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 67 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 67 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 67 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 67 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 67 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 67 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 67 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 67 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 67 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 67 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 67 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 67 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 67 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 67 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 67 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 67 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 67 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 67 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 67 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 67 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 67 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 67 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 67 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 67 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 67 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 67 (type_qualifier -> VOLATILE .)


state 43

    (31) function_definition -> declarator . declaration_list_opt compound_statement
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (241) empty -> .
    (41) declaration_list -> . declaration
    (42) declaration_list -> . declaration_list declaration
    (40) declaration -> . decl_body SEMI
    (39) decl_body -> . declaration_specifiers init_declarator_list_opt
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    LBRACE          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    declaration_list_opt           shift and go to state 75
    struct_or_union                shift and go to state 7
    type_qualifier                 shift and go to state 38
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    decl_body                      shift and go to state 37
    declaration_list               shift and go to state 76
    type_specifier                 shift and go to state 12
    declaration_specifiers         shift and go to state 73
    declaration                    shift and go to state 74
    function_specifier             shift and go to state 40
    typedef_name                   shift and go to state 25
    empty                          shift and go to state 72

state 44

    (52) function_specifier -> INLINE .

    CONST           reduce using rule 52 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 52 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 52 (function_specifier -> INLINE .)
    VOID            reduce using rule 52 (function_specifier -> INLINE .)
    CHAR            reduce using rule 52 (function_specifier -> INLINE .)
    SHORT           reduce using rule 52 (function_specifier -> INLINE .)
    INT             reduce using rule 52 (function_specifier -> INLINE .)
    LONG            reduce using rule 52 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 52 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 52 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 52 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 52 (function_specifier -> INLINE .)
    AUTO            reduce using rule 52 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 52 (function_specifier -> INLINE .)
    STATIC          reduce using rule 52 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 52 (function_specifier -> INLINE .)
    TYPEDEF         reduce using rule 52 (function_specifier -> INLINE .)
    INLINE          reduce using rule 52 (function_specifier -> INLINE .)
    TYPEID          reduce using rule 52 (function_specifier -> INLINE .)
    ENUM            reduce using rule 52 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 52 (function_specifier -> INLINE .)
    UNION           reduce using rule 52 (function_specifier -> INLINE .)
    ID              reduce using rule 52 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 52 (function_specifier -> INLINE .)
    TIMES           reduce using rule 52 (function_specifier -> INLINE .)
    SEMI            reduce using rule 52 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 52 (function_specifier -> INLINE .)
    COMMA           reduce using rule 52 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 52 (function_specifier -> INLINE .)


state 45

    (45) declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .

    ID              reduce using rule 45 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 45 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 45 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 45 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    COMMA           reduce using rule 45 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 45 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    SEMI            reduce using rule 45 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)


state 46

    (9) declaration_specifiers_opt -> empty .

    ID              reduce using rule 9 (declaration_specifiers_opt -> empty .)
    LPAREN          reduce using rule 9 (declaration_specifiers_opt -> empty .)
    TIMES           reduce using rule 9 (declaration_specifiers_opt -> empty .)
    SEMI            reduce using rule 9 (declaration_specifiers_opt -> empty .)
    LBRACKET        reduce using rule 9 (declaration_specifiers_opt -> empty .)
    COMMA           reduce using rule 9 (declaration_specifiers_opt -> empty .)
    RPAREN          reduce using rule 9 (declaration_specifiers_opt -> empty .)


state 47

    (10) declaration_specifiers_opt -> declaration_specifiers .

    ID              reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    LPAREN          reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    TIMES           reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    SEMI            reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    LBRACKET        reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    COMMA           reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    RPAREN          reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)


state 48

    (102) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 77


state 49

    (75) struct_or_union_specifier -> struct_or_union TYPEID .
    (78) struct_or_union_specifier -> struct_or_union TYPEID . LBRACE struct_declaration_list RBRACE

    CONST           reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RESTRICT        reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOLATILE        reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOID            reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    CHAR            reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SHORT           reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INT             reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LONG            reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    FLOAT           reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    DOUBLE          reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SIGNED          reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    UNSIGNED        reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    AUTO            reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    REGISTER        reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    STATIC          reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    EXTERN          reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEDEF         reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INLINE          reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEID          reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ENUM            reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    STRUCT          reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    UNION           reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ID              reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LPAREN          reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TIMES           reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACKET        reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COMMA           reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RPAREN          reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COLON           reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SEMI            reduce using rule 75 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACE          shift and go to state 78


state 50

    (76) struct_or_union_specifier -> struct_or_union LBRACE . struct_declaration_list RBRACE
    (81) struct_declaration_list -> . struct_declaration
    (82) struct_declaration_list -> . struct_declaration_list struct_declaration
    (83) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 80
    struct_declaration             shift and go to state 81
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 83
    struct_declaration_list        shift and go to state 79
    typedef_name                   shift and go to state 25

state 51

    (74) struct_or_union_specifier -> struct_or_union ID .
    (77) struct_or_union_specifier -> struct_or_union ID . LBRACE struct_declaration_list RBRACE

    CONST           reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    RESTRICT        reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    VOLATILE        reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    VOID            reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    CHAR            reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    SHORT           reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    INT             reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    LONG            reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    FLOAT           reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    DOUBLE          reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    SIGNED          reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    UNSIGNED        reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    AUTO            reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    REGISTER        reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    STATIC          reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    EXTERN          reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEDEF         reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    INLINE          reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEID          reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    ENUM            reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    STRUCT          reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    UNION           reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    ID              reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    LPAREN          reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    TIMES           reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACKET        reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    COMMA           reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    RPAREN          reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    COLON           reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    SEMI            reduce using rule 74 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACE          shift and go to state 84


state 52

    (44) declaration_specifiers -> type_specifier declaration_specifiers_opt .

    ID              reduce using rule 44 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 44 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 44 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 44 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    COMMA           reduce using rule 44 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 44 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    SEMI            reduce using rule 44 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)


state 53

    (100) declarator -> pointer direct_declarator .
    (103) direct_declarator -> direct_declarator . LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (105) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    CONST           reduce using rule 100 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 100 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 100 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 100 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 100 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 100 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 100 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 100 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 100 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 100 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 100 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 100 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 100 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 100 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 100 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 100 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 100 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 100 (declarator -> pointer direct_declarator .)
    TYPEID          reduce using rule 100 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 100 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 100 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 100 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 100 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 100 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 100 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 100 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 100 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 100 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 55
    LPAREN          shift and go to state 56


state 54

    (26) translation_unit -> translation_unit external_declaration .

    PPHASH          reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 26 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 26 (translation_unit -> translation_unit external_declaration .)


state 55

    (103) direct_declarator -> direct_declarator LBRACKET . assignment_expression_opt RBRACKET
    (104) direct_declarator -> direct_declarator LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (241) empty -> .
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 104
    RBRACKET        reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 101
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    assignment_expression_opt      shift and go to state 97
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    constant                       shift and go to state 92
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    identifier                     shift and go to state 117
    empty                          shift and go to state 114
    binary_expression              shift and go to state 112

state 56

    (105) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (106) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (111) parameter_type_list -> . parameter_list
    (112) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (15) identifier_list_opt -> . empty
    (16) identifier_list_opt -> . identifier_list
    (113) parameter_list -> . parameter_declaration
    (114) parameter_list -> . parameter_list COMMA parameter_declaration
    (241) empty -> .
    (117) identifier_list -> . identifier
    (118) identifier_list -> . identifier_list COMMA identifier
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (230) identifier -> . ID
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    RPAREN          reduce using rule 241 (empty -> .)
    ID              shift and go to state 108
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    identifier_list_opt            shift and go to state 118
    struct_or_union_specifier      shift and go to state 5
    type_specifier                 shift and go to state 12
    empty                          shift and go to state 119
    struct_or_union                shift and go to state 7
    parameter_type_list            shift and go to state 120
    parameter_declaration          shift and go to state 121
    declaration_specifiers         shift and go to state 122
    identifier_list                shift and go to state 123
    typedef_name                   shift and go to state 25
    parameter_list                 shift and go to state 124
    enum_specifier                 shift and go to state 41
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    identifier                     shift and go to state 125

state 57

    (90) enum_specifier -> ENUM TYPEID .
    (93) enum_specifier -> ENUM TYPEID . LBRACE enumerator_list RBRACE

    CONST           reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    RESTRICT        reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    VOLATILE        reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    VOID            reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    CHAR            reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    SHORT           reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    INT             reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    LONG            reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    FLOAT           reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    DOUBLE          reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    SIGNED          reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    UNSIGNED        reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    AUTO            reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    REGISTER        reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    STATIC          reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    EXTERN          reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    TYPEDEF         reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    INLINE          reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    TYPEID          reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    ENUM            reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    STRUCT          reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    UNION           reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    ID              reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    LPAREN          reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    TIMES           reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    SEMI            reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    COLON           reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    LBRACKET        reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    RPAREN          reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    COMMA           reduce using rule 90 (enum_specifier -> ENUM TYPEID .)
    LBRACE          shift and go to state 126


state 58

    (91) enum_specifier -> ENUM LBRACE . enumerator_list RBRACE
    (94) enumerator_list -> . enumerator
    (95) enumerator_list -> . enumerator_list COMMA
    (96) enumerator_list -> . enumerator_list COMMA enumerator
    (97) enumerator -> . ID
    (98) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 129

    enumerator_list                shift and go to state 128
    enumerator                     shift and go to state 127

state 59

    (89) enum_specifier -> ENUM ID .
    (92) enum_specifier -> ENUM ID . LBRACE enumerator_list RBRACE

    CONST           reduce using rule 89 (enum_specifier -> ENUM ID .)
    RESTRICT        reduce using rule 89 (enum_specifier -> ENUM ID .)
    VOLATILE        reduce using rule 89 (enum_specifier -> ENUM ID .)
    VOID            reduce using rule 89 (enum_specifier -> ENUM ID .)
    CHAR            reduce using rule 89 (enum_specifier -> ENUM ID .)
    SHORT           reduce using rule 89 (enum_specifier -> ENUM ID .)
    INT             reduce using rule 89 (enum_specifier -> ENUM ID .)
    LONG            reduce using rule 89 (enum_specifier -> ENUM ID .)
    FLOAT           reduce using rule 89 (enum_specifier -> ENUM ID .)
    DOUBLE          reduce using rule 89 (enum_specifier -> ENUM ID .)
    SIGNED          reduce using rule 89 (enum_specifier -> ENUM ID .)
    UNSIGNED        reduce using rule 89 (enum_specifier -> ENUM ID .)
    AUTO            reduce using rule 89 (enum_specifier -> ENUM ID .)
    REGISTER        reduce using rule 89 (enum_specifier -> ENUM ID .)
    STATIC          reduce using rule 89 (enum_specifier -> ENUM ID .)
    EXTERN          reduce using rule 89 (enum_specifier -> ENUM ID .)
    TYPEDEF         reduce using rule 89 (enum_specifier -> ENUM ID .)
    INLINE          reduce using rule 89 (enum_specifier -> ENUM ID .)
    TYPEID          reduce using rule 89 (enum_specifier -> ENUM ID .)
    ENUM            reduce using rule 89 (enum_specifier -> ENUM ID .)
    STRUCT          reduce using rule 89 (enum_specifier -> ENUM ID .)
    UNION           reduce using rule 89 (enum_specifier -> ENUM ID .)
    ID              reduce using rule 89 (enum_specifier -> ENUM ID .)
    LPAREN          reduce using rule 89 (enum_specifier -> ENUM ID .)
    TIMES           reduce using rule 89 (enum_specifier -> ENUM ID .)
    SEMI            reduce using rule 89 (enum_specifier -> ENUM ID .)
    COLON           reduce using rule 89 (enum_specifier -> ENUM ID .)
    LBRACKET        reduce using rule 89 (enum_specifier -> ENUM ID .)
    RPAREN          reduce using rule 89 (enum_specifier -> ENUM ID .)
    COMMA           reduce using rule 89 (enum_specifier -> ENUM ID .)
    LBRACE          shift and go to state 130


state 60

    (24) type_qualifier_list_opt -> type_qualifier_list .
    (110) type_qualifier_list -> type_qualifier_list . type_qualifier
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE

    TIMES           reduce using rule 24 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 24 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 24 (type_qualifier_list_opt -> type_qualifier_list .)
    LBRACKET        reduce using rule 24 (type_qualifier_list_opt -> type_qualifier_list .)
    COMMA           reduce using rule 24 (type_qualifier_list_opt -> type_qualifier_list .)
    RPAREN          reduce using rule 24 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42

    type_qualifier                 shift and go to state 131

state 61

    (107) pointer -> TIMES type_qualifier_list_opt .
    (108) pointer -> TIMES type_qualifier_list_opt . pointer
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              reduce using rule 107 (pointer -> TIMES type_qualifier_list_opt .)
    LPAREN          reduce using rule 107 (pointer -> TIMES type_qualifier_list_opt .)
    LBRACKET        reduce using rule 107 (pointer -> TIMES type_qualifier_list_opt .)
    RPAREN          reduce using rule 107 (pointer -> TIMES type_qualifier_list_opt .)
    COMMA           reduce using rule 107 (pointer -> TIMES type_qualifier_list_opt .)
    TIMES           shift and go to state 24

    pointer                        shift and go to state 132

state 62

    (109) type_qualifier_list -> type_qualifier .

    CONST           reduce using rule 109 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 109 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 109 (type_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 109 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 109 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 109 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 109 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 109 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 109 (type_qualifier_list -> type_qualifier .)


state 63

    (23) type_qualifier_list_opt -> empty .

    TIMES           reduce using rule 23 (type_qualifier_list_opt -> empty .)
    ID              reduce using rule 23 (type_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 23 (type_qualifier_list_opt -> empty .)
    LBRACKET        reduce using rule 23 (type_qualifier_list_opt -> empty .)
    COMMA           reduce using rule 23 (type_qualifier_list_opt -> empty .)
    RPAREN          reduce using rule 23 (type_qualifier_list_opt -> empty .)


state 64

    (18) init_declarator_list_opt -> init_declarator_list .
    (69) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 18 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 133


state 65

    (39) decl_body -> declaration_specifiers init_declarator_list_opt .

    SEMI            reduce using rule 39 (decl_body -> declaration_specifiers init_declarator_list_opt .)


state 66

    (17) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 17 (init_declarator_list_opt -> empty .)


state 67

    (32) function_definition -> declaration_specifiers declarator . declaration_list_opt compound_statement
    (70) init_declarator -> declarator .
    (71) init_declarator -> declarator . EQUALS initializer
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (241) empty -> .
    (41) declaration_list -> . declaration
    (42) declaration_list -> . declaration_list declaration
    (40) declaration -> . decl_body SEMI
    (39) decl_body -> . declaration_specifiers init_declarator_list_opt
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    COMMA           reduce using rule 70 (init_declarator -> declarator .)
    SEMI            reduce using rule 70 (init_declarator -> declarator .)
    EQUALS          shift and go to state 134
    LBRACE          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    declaration_list_opt           shift and go to state 135
    struct_or_union                shift and go to state 7
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    decl_body                      shift and go to state 37
    declaration                    shift and go to state 74
    type_specifier                 shift and go to state 12
    declaration_specifiers         shift and go to state 73
    declaration_list               shift and go to state 76
    typedef_name                   shift and go to state 25
    empty                          shift and go to state 72

state 68

    (68) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 68 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 68 (init_declarator_list -> init_declarator .)


state 69

    (40) declaration -> decl_body SEMI .

    PPHASH          reduce using rule 40 (declaration -> decl_body SEMI .)
    ID              reduce using rule 40 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 40 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 40 (declaration -> decl_body SEMI .)
    CONST           reduce using rule 40 (declaration -> decl_body SEMI .)
    RESTRICT        reduce using rule 40 (declaration -> decl_body SEMI .)
    VOLATILE        reduce using rule 40 (declaration -> decl_body SEMI .)
    VOID            reduce using rule 40 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 40 (declaration -> decl_body SEMI .)
    SHORT           reduce using rule 40 (declaration -> decl_body SEMI .)
    INT             reduce using rule 40 (declaration -> decl_body SEMI .)
    LONG            reduce using rule 40 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 40 (declaration -> decl_body SEMI .)
    DOUBLE          reduce using rule 40 (declaration -> decl_body SEMI .)
    SIGNED          reduce using rule 40 (declaration -> decl_body SEMI .)
    UNSIGNED        reduce using rule 40 (declaration -> decl_body SEMI .)
    AUTO            reduce using rule 40 (declaration -> decl_body SEMI .)
    REGISTER        reduce using rule 40 (declaration -> decl_body SEMI .)
    STATIC          reduce using rule 40 (declaration -> decl_body SEMI .)
    EXTERN          reduce using rule 40 (declaration -> decl_body SEMI .)
    TYPEDEF         reduce using rule 40 (declaration -> decl_body SEMI .)
    INLINE          reduce using rule 40 (declaration -> decl_body SEMI .)
    TYPEID          reduce using rule 40 (declaration -> decl_body SEMI .)
    ENUM            reduce using rule 40 (declaration -> decl_body SEMI .)
    STRUCT          reduce using rule 40 (declaration -> decl_body SEMI .)
    UNION           reduce using rule 40 (declaration -> decl_body SEMI .)
    $end            reduce using rule 40 (declaration -> decl_body SEMI .)
    CASE            reduce using rule 40 (declaration -> decl_body SEMI .)
    DEFAULT         reduce using rule 40 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 40 (declaration -> decl_body SEMI .)
    IF              reduce using rule 40 (declaration -> decl_body SEMI .)
    SWITCH          reduce using rule 40 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 40 (declaration -> decl_body SEMI .)
    DO              reduce using rule 40 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 40 (declaration -> decl_body SEMI .)
    GOTO            reduce using rule 40 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 40 (declaration -> decl_body SEMI .)
    CONTINUE        reduce using rule 40 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 40 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 40 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 40 (declaration -> decl_body SEMI .)
    SIZEOF          reduce using rule 40 (declaration -> decl_body SEMI .)
    AND             reduce using rule 40 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 40 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 40 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 40 (declaration -> decl_body SEMI .)
    LNOT            reduce using rule 40 (declaration -> decl_body SEMI .)
    INT_CONST_DEC   reduce using rule 40 (declaration -> decl_body SEMI .)
    INT_CONST_OCT   reduce using rule 40 (declaration -> decl_body SEMI .)
    INT_CONST_HEX   reduce using rule 40 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 40 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 40 (declaration -> decl_body SEMI .)
    WCHAR_CONST     reduce using rule 40 (declaration -> decl_body SEMI .)
    STRING_LITERAL  reduce using rule 40 (declaration -> decl_body SEMI .)
    WSTRING_LITERAL reduce using rule 40 (declaration -> decl_body SEMI .)
    SEMI            reduce using rule 40 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 40 (declaration -> decl_body SEMI .)


state 70

    (43) declaration_specifiers -> type_qualifier declaration_specifiers_opt .

    ID              reduce using rule 43 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 43 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    TIMES           reduce using rule 43 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 43 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    COMMA           reduce using rule 43 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 43 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    SEMI            reduce using rule 43 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)


state 71

    (46) declaration_specifiers -> function_specifier declaration_specifiers_opt .

    ID              reduce using rule 46 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 46 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 46 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 46 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    COMMA           reduce using rule 46 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 46 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    SEMI            reduce using rule 46 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)


state 72

    (7) declaration_list_opt -> empty .

    LBRACE          reduce using rule 7 (declaration_list_opt -> empty .)


state 73

    (39) decl_body -> declaration_specifiers . init_declarator_list_opt
    (17) init_declarator_list_opt -> . empty
    (18) init_declarator_list_opt -> . init_declarator_list
    (241) empty -> .
    (68) init_declarator_list -> . init_declarator
    (69) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (70) init_declarator -> . declarator
    (71) init_declarator -> . declarator EQUALS initializer
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer

    SEMI            reduce using rule 241 (empty -> .)
    ID              shift and go to state 29
    LPAREN          shift and go to state 4
    TIMES           shift and go to state 24

    direct_declarator              shift and go to state 22
    declarator                     shift and go to state 136
    init_declarator_list           shift and go to state 64
    init_declarator_list_opt       shift and go to state 65
    init_declarator                shift and go to state 68
    pointer                        shift and go to state 13
    empty                          shift and go to state 66

state 74

    (41) declaration_list -> declaration .

    CONST           reduce using rule 41 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 41 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 41 (declaration_list -> declaration .)
    VOID            reduce using rule 41 (declaration_list -> declaration .)
    CHAR            reduce using rule 41 (declaration_list -> declaration .)
    SHORT           reduce using rule 41 (declaration_list -> declaration .)
    INT             reduce using rule 41 (declaration_list -> declaration .)
    LONG            reduce using rule 41 (declaration_list -> declaration .)
    FLOAT           reduce using rule 41 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 41 (declaration_list -> declaration .)
    SIGNED          reduce using rule 41 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 41 (declaration_list -> declaration .)
    AUTO            reduce using rule 41 (declaration_list -> declaration .)
    REGISTER        reduce using rule 41 (declaration_list -> declaration .)
    STATIC          reduce using rule 41 (declaration_list -> declaration .)
    EXTERN          reduce using rule 41 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 41 (declaration_list -> declaration .)
    INLINE          reduce using rule 41 (declaration_list -> declaration .)
    TYPEID          reduce using rule 41 (declaration_list -> declaration .)
    ENUM            reduce using rule 41 (declaration_list -> declaration .)
    STRUCT          reduce using rule 41 (declaration_list -> declaration .)
    UNION           reduce using rule 41 (declaration_list -> declaration .)
    LBRACE          reduce using rule 41 (declaration_list -> declaration .)


state 75

    (31) function_definition -> declarator declaration_list_opt . compound_statement
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE

    LBRACE          shift and go to state 137

    compound_statement             shift and go to state 138

state 76

    (8) declaration_list_opt -> declaration_list .
    (42) declaration_list -> declaration_list . declaration
    (40) declaration -> . decl_body SEMI
    (39) decl_body -> . declaration_specifiers init_declarator_list_opt
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    LBRACE          reduce using rule 8 (declaration_list_opt -> declaration_list .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 12
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    decl_body                      shift and go to state 37
    type_qualifier                 shift and go to state 38
    declaration_specifiers         shift and go to state 73
    declaration                    shift and go to state 139
    function_specifier             shift and go to state 40
    typedef_name                   shift and go to state 25

state 77

    (102) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    RESTRICT        reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    INLINE          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 102 (direct_declarator -> LPAREN declarator RPAREN .)


state 78

    (78) struct_or_union_specifier -> struct_or_union TYPEID LBRACE . struct_declaration_list RBRACE
    (81) struct_declaration_list -> . struct_declaration
    (82) struct_declaration_list -> . struct_declaration_list struct_declaration
    (83) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 80
    struct_declaration             shift and go to state 81
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 83
    struct_declaration_list        shift and go to state 140
    typedef_name                   shift and go to state 25

state 79

    (76) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list . RBRACE
    (82) struct_declaration_list -> struct_declaration_list . struct_declaration
    (83) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    RBRACE          shift and go to state 142
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 80
    struct_declaration             shift and go to state 141
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 83
    typedef_name                   shift and go to state 25

state 80

    (73) specifier_qualifier_list -> type_specifier . specifier_qualifier_list_opt
    (21) specifier_qualifier_list_opt -> . empty
    (22) specifier_qualifier_list_opt -> . specifier_qualifier_list
    (241) empty -> .
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    COLON           reduce using rule 241 (empty -> .)
    ID              reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    LBRACKET        reduce using rule 241 (empty -> .)
    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 80
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 145
    specifier_qualifier_list_opt   shift and go to state 144
    typedef_name                   shift and go to state 25
    empty                          shift and go to state 143

state 81

    (81) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    TYPEID          reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 81 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 81 (struct_declaration_list -> struct_declaration .)


state 82

    (72) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list_opt
    (21) specifier_qualifier_list_opt -> . empty
    (22) specifier_qualifier_list_opt -> . specifier_qualifier_list
    (241) empty -> .
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    COLON           reduce using rule 241 (empty -> .)
    ID              reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    LBRACKET        reduce using rule 241 (empty -> .)
    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 80
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 145
    specifier_qualifier_list_opt   shift and go to state 146
    typedef_name                   shift and go to state 25
    empty                          shift and go to state 143

state 83

    (83) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (84) struct_declarator_list -> . struct_declarator
    (85) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (86) struct_declarator -> . declarator
    (87) struct_declarator -> . declarator COLON constant_expression
    (88) struct_declarator -> . COLON constant_expression
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer

    COLON           shift and go to state 149
    ID              shift and go to state 29
    LPAREN          shift and go to state 4
    TIMES           shift and go to state 24

    struct_declarator              shift and go to state 147
    pointer                        shift and go to state 13
    direct_declarator              shift and go to state 22
    declarator                     shift and go to state 148
    struct_declarator_list         shift and go to state 150

state 84

    (77) struct_or_union_specifier -> struct_or_union ID LBRACE . struct_declaration_list RBRACE
    (81) struct_declaration_list -> . struct_declaration
    (82) struct_declaration_list -> . struct_declaration_list struct_declaration
    (83) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 80
    struct_declaration             shift and go to state 81
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 83
    struct_declaration_list        shift and go to state 151
    typedef_name                   shift and go to state 25

state 85

    (212) unary_operator -> LNOT .

    LPAREN          reduce using rule 212 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 212 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 212 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 212 (unary_operator -> LNOT .)
    AND             reduce using rule 212 (unary_operator -> LNOT .)
    TIMES           reduce using rule 212 (unary_operator -> LNOT .)
    PLUS            reduce using rule 212 (unary_operator -> LNOT .)
    MINUS           reduce using rule 212 (unary_operator -> LNOT .)
    NOT             reduce using rule 212 (unary_operator -> LNOT .)
    LNOT            reduce using rule 212 (unary_operator -> LNOT .)
    ID              reduce using rule 212 (unary_operator -> LNOT .)
    INT_CONST_DEC   reduce using rule 212 (unary_operator -> LNOT .)
    INT_CONST_OCT   reduce using rule 212 (unary_operator -> LNOT .)
    INT_CONST_HEX   reduce using rule 212 (unary_operator -> LNOT .)
    FLOAT_CONST     reduce using rule 212 (unary_operator -> LNOT .)
    CHAR_CONST      reduce using rule 212 (unary_operator -> LNOT .)
    WCHAR_CONST     reduce using rule 212 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 212 (unary_operator -> LNOT .)
    WSTRING_LITERAL reduce using rule 212 (unary_operator -> LNOT .)


state 86

    (165) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (199) cast_expression -> unary_expression .
    (166) assignment_operator -> . EQUALS
    (167) assignment_operator -> . XOREQUAL
    (168) assignment_operator -> . TIMESEQUAL
    (169) assignment_operator -> . DIVEQUAL
    (170) assignment_operator -> . MODEQUAL
    (171) assignment_operator -> . PLUSEQUAL
    (172) assignment_operator -> . MINUSEQUAL
    (173) assignment_operator -> . LSHIFTEQUAL
    (174) assignment_operator -> . RSHIFTEQUAL
    (175) assignment_operator -> . ANDEQUAL
    (176) assignment_operator -> . OREQUAL

    CONDOP          reduce using rule 199 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 199 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 199 (cast_expression -> unary_expression .)
    MOD             reduce using rule 199 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 199 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 199 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 199 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 199 (cast_expression -> unary_expression .)
    LT              reduce using rule 199 (cast_expression -> unary_expression .)
    LE              reduce using rule 199 (cast_expression -> unary_expression .)
    GE              reduce using rule 199 (cast_expression -> unary_expression .)
    GT              reduce using rule 199 (cast_expression -> unary_expression .)
    EQ              reduce using rule 199 (cast_expression -> unary_expression .)
    NE              reduce using rule 199 (cast_expression -> unary_expression .)
    AND             reduce using rule 199 (cast_expression -> unary_expression .)
    OR              reduce using rule 199 (cast_expression -> unary_expression .)
    XOR             reduce using rule 199 (cast_expression -> unary_expression .)
    LAND            reduce using rule 199 (cast_expression -> unary_expression .)
    LOR             reduce using rule 199 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 199 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 199 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 199 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 199 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 199 (cast_expression -> unary_expression .)
    COLON           reduce using rule 199 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 155
    XOREQUAL        shift and go to state 156
    TIMESEQUAL      shift and go to state 162
    DIVEQUAL        shift and go to state 152
    MODEQUAL        shift and go to state 154
    PLUSEQUAL       shift and go to state 157
    MINUSEQUAL      shift and go to state 153
    LSHIFTEQUAL     shift and go to state 158
    RSHIFTEQUAL     shift and go to state 163
    ANDEQUAL        shift and go to state 160
    OREQUAL         shift and go to state 161

    assignment_operator            shift and go to state 159

state 87

    (226) primary_expression -> unified_wstring_literal .
    (240) unified_wstring_literal -> unified_wstring_literal . WSTRING_LITERAL

    LBRACKET        reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    LPAREN          reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    PERIOD          reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    ARROW           reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    PLUSPLUS        reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    MINUSMINUS      reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    EQUALS          reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    XOREQUAL        reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    TIMESEQUAL      reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    DIVEQUAL        reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    MODEQUAL        reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    PLUSEQUAL       reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    MINUSEQUAL      reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    LSHIFTEQUAL     reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    RSHIFTEQUAL     reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    ANDEQUAL        reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    OREQUAL         reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    CONDOP          reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    TIMES           reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    DIVIDE          reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    MOD             reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    PLUS            reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    MINUS           reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    RSHIFT          reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    LSHIFT          reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    LT              reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    LE              reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    GE              reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    GT              reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    EQ              reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    NE              reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    AND             reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    OR              reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    XOR             reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    LAND            reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    LOR             reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    COMMA           reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    RPAREN          reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    RBRACE          reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    RBRACKET        reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    SEMI            reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    COLON           reduce using rule 226 (primary_expression -> unified_wstring_literal .)
    WSTRING_LITERAL shift and go to state 164


state 88

    (235) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 235 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 235 (constant -> CHAR_CONST .)
    PERIOD          reduce using rule 235 (constant -> CHAR_CONST .)
    ARROW           reduce using rule 235 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 235 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 235 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 235 (constant -> CHAR_CONST .)
    XOREQUAL        reduce using rule 235 (constant -> CHAR_CONST .)
    TIMESEQUAL      reduce using rule 235 (constant -> CHAR_CONST .)
    DIVEQUAL        reduce using rule 235 (constant -> CHAR_CONST .)
    MODEQUAL        reduce using rule 235 (constant -> CHAR_CONST .)
    PLUSEQUAL       reduce using rule 235 (constant -> CHAR_CONST .)
    MINUSEQUAL      reduce using rule 235 (constant -> CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 235 (constant -> CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 235 (constant -> CHAR_CONST .)
    ANDEQUAL        reduce using rule 235 (constant -> CHAR_CONST .)
    OREQUAL         reduce using rule 235 (constant -> CHAR_CONST .)
    CONDOP          reduce using rule 235 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 235 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 235 (constant -> CHAR_CONST .)
    MOD             reduce using rule 235 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 235 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 235 (constant -> CHAR_CONST .)
    RSHIFT          reduce using rule 235 (constant -> CHAR_CONST .)
    LSHIFT          reduce using rule 235 (constant -> CHAR_CONST .)
    LT              reduce using rule 235 (constant -> CHAR_CONST .)
    LE              reduce using rule 235 (constant -> CHAR_CONST .)
    GE              reduce using rule 235 (constant -> CHAR_CONST .)
    GT              reduce using rule 235 (constant -> CHAR_CONST .)
    EQ              reduce using rule 235 (constant -> CHAR_CONST .)
    NE              reduce using rule 235 (constant -> CHAR_CONST .)
    AND             reduce using rule 235 (constant -> CHAR_CONST .)
    OR              reduce using rule 235 (constant -> CHAR_CONST .)
    XOR             reduce using rule 235 (constant -> CHAR_CONST .)
    LAND            reduce using rule 235 (constant -> CHAR_CONST .)
    LOR             reduce using rule 235 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 235 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 235 (constant -> CHAR_CONST .)
    COLON           reduce using rule 235 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 235 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 235 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 235 (constant -> CHAR_CONST .)


state 89

    (239) unified_wstring_literal -> WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    LBRACKET        reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    LPAREN          reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    PERIOD          reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    ARROW           reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQUALS          reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    OREQUAL         reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    CONDOP          reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMES           reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVIDE          reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    MOD             reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUS            reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUS           reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFT          reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFT          reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    LT              reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    LE              reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    GE              reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    GT              reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQ              reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    NE              reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    AND             reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    OR              reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOR             reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    LAND            reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    LOR             reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACKET        reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    RPAREN          reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    COMMA           reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    SEMI            reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    COLON           reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACE          reduce using rule 239 (unified_wstring_literal -> WSTRING_LITERAL .)


state 90

    (236) constant -> WCHAR_CONST .

    LBRACKET        reduce using rule 236 (constant -> WCHAR_CONST .)
    LPAREN          reduce using rule 236 (constant -> WCHAR_CONST .)
    PERIOD          reduce using rule 236 (constant -> WCHAR_CONST .)
    ARROW           reduce using rule 236 (constant -> WCHAR_CONST .)
    PLUSPLUS        reduce using rule 236 (constant -> WCHAR_CONST .)
    MINUSMINUS      reduce using rule 236 (constant -> WCHAR_CONST .)
    EQUALS          reduce using rule 236 (constant -> WCHAR_CONST .)
    XOREQUAL        reduce using rule 236 (constant -> WCHAR_CONST .)
    TIMESEQUAL      reduce using rule 236 (constant -> WCHAR_CONST .)
    DIVEQUAL        reduce using rule 236 (constant -> WCHAR_CONST .)
    MODEQUAL        reduce using rule 236 (constant -> WCHAR_CONST .)
    PLUSEQUAL       reduce using rule 236 (constant -> WCHAR_CONST .)
    MINUSEQUAL      reduce using rule 236 (constant -> WCHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 236 (constant -> WCHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 236 (constant -> WCHAR_CONST .)
    ANDEQUAL        reduce using rule 236 (constant -> WCHAR_CONST .)
    OREQUAL         reduce using rule 236 (constant -> WCHAR_CONST .)
    CONDOP          reduce using rule 236 (constant -> WCHAR_CONST .)
    TIMES           reduce using rule 236 (constant -> WCHAR_CONST .)
    DIVIDE          reduce using rule 236 (constant -> WCHAR_CONST .)
    MOD             reduce using rule 236 (constant -> WCHAR_CONST .)
    PLUS            reduce using rule 236 (constant -> WCHAR_CONST .)
    MINUS           reduce using rule 236 (constant -> WCHAR_CONST .)
    RSHIFT          reduce using rule 236 (constant -> WCHAR_CONST .)
    LSHIFT          reduce using rule 236 (constant -> WCHAR_CONST .)
    LT              reduce using rule 236 (constant -> WCHAR_CONST .)
    LE              reduce using rule 236 (constant -> WCHAR_CONST .)
    GE              reduce using rule 236 (constant -> WCHAR_CONST .)
    GT              reduce using rule 236 (constant -> WCHAR_CONST .)
    EQ              reduce using rule 236 (constant -> WCHAR_CONST .)
    NE              reduce using rule 236 (constant -> WCHAR_CONST .)
    AND             reduce using rule 236 (constant -> WCHAR_CONST .)
    OR              reduce using rule 236 (constant -> WCHAR_CONST .)
    XOR             reduce using rule 236 (constant -> WCHAR_CONST .)
    LAND            reduce using rule 236 (constant -> WCHAR_CONST .)
    LOR             reduce using rule 236 (constant -> WCHAR_CONST .)
    COMMA           reduce using rule 236 (constant -> WCHAR_CONST .)
    RPAREN          reduce using rule 236 (constant -> WCHAR_CONST .)
    COLON           reduce using rule 236 (constant -> WCHAR_CONST .)
    RBRACKET        reduce using rule 236 (constant -> WCHAR_CONST .)
    SEMI            reduce using rule 236 (constant -> WCHAR_CONST .)
    RBRACE          reduce using rule 236 (constant -> WCHAR_CONST .)


state 91

    (234) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 234 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 234 (constant -> FLOAT_CONST .)
    PERIOD          reduce using rule 234 (constant -> FLOAT_CONST .)
    ARROW           reduce using rule 234 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 234 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 234 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 234 (constant -> FLOAT_CONST .)
    XOREQUAL        reduce using rule 234 (constant -> FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 234 (constant -> FLOAT_CONST .)
    DIVEQUAL        reduce using rule 234 (constant -> FLOAT_CONST .)
    MODEQUAL        reduce using rule 234 (constant -> FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 234 (constant -> FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 234 (constant -> FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 234 (constant -> FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 234 (constant -> FLOAT_CONST .)
    ANDEQUAL        reduce using rule 234 (constant -> FLOAT_CONST .)
    OREQUAL         reduce using rule 234 (constant -> FLOAT_CONST .)
    CONDOP          reduce using rule 234 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 234 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 234 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 234 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 234 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 234 (constant -> FLOAT_CONST .)
    RSHIFT          reduce using rule 234 (constant -> FLOAT_CONST .)
    LSHIFT          reduce using rule 234 (constant -> FLOAT_CONST .)
    LT              reduce using rule 234 (constant -> FLOAT_CONST .)
    LE              reduce using rule 234 (constant -> FLOAT_CONST .)
    GE              reduce using rule 234 (constant -> FLOAT_CONST .)
    GT              reduce using rule 234 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 234 (constant -> FLOAT_CONST .)
    NE              reduce using rule 234 (constant -> FLOAT_CONST .)
    AND             reduce using rule 234 (constant -> FLOAT_CONST .)
    OR              reduce using rule 234 (constant -> FLOAT_CONST .)
    XOR             reduce using rule 234 (constant -> FLOAT_CONST .)
    LAND            reduce using rule 234 (constant -> FLOAT_CONST .)
    LOR             reduce using rule 234 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 234 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 234 (constant -> FLOAT_CONST .)
    COLON           reduce using rule 234 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 234 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 234 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 234 (constant -> FLOAT_CONST .)


state 92

    (224) primary_expression -> constant .

    LBRACKET        reduce using rule 224 (primary_expression -> constant .)
    LPAREN          reduce using rule 224 (primary_expression -> constant .)
    PERIOD          reduce using rule 224 (primary_expression -> constant .)
    ARROW           reduce using rule 224 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 224 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 224 (primary_expression -> constant .)
    EQUALS          reduce using rule 224 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 224 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 224 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 224 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 224 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 224 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 224 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 224 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 224 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 224 (primary_expression -> constant .)
    OREQUAL         reduce using rule 224 (primary_expression -> constant .)
    CONDOP          reduce using rule 224 (primary_expression -> constant .)
    TIMES           reduce using rule 224 (primary_expression -> constant .)
    DIVIDE          reduce using rule 224 (primary_expression -> constant .)
    MOD             reduce using rule 224 (primary_expression -> constant .)
    PLUS            reduce using rule 224 (primary_expression -> constant .)
    MINUS           reduce using rule 224 (primary_expression -> constant .)
    RSHIFT          reduce using rule 224 (primary_expression -> constant .)
    LSHIFT          reduce using rule 224 (primary_expression -> constant .)
    LT              reduce using rule 224 (primary_expression -> constant .)
    LE              reduce using rule 224 (primary_expression -> constant .)
    GE              reduce using rule 224 (primary_expression -> constant .)
    GT              reduce using rule 224 (primary_expression -> constant .)
    EQ              reduce using rule 224 (primary_expression -> constant .)
    NE              reduce using rule 224 (primary_expression -> constant .)
    AND             reduce using rule 224 (primary_expression -> constant .)
    OR              reduce using rule 224 (primary_expression -> constant .)
    XOR             reduce using rule 224 (primary_expression -> constant .)
    LAND            reduce using rule 224 (primary_expression -> constant .)
    LOR             reduce using rule 224 (primary_expression -> constant .)
    COMMA           reduce using rule 224 (primary_expression -> constant .)
    RPAREN          reduce using rule 224 (primary_expression -> constant .)
    RBRACE          reduce using rule 224 (primary_expression -> constant .)
    RBRACKET        reduce using rule 224 (primary_expression -> constant .)
    SEMI            reduce using rule 224 (primary_expression -> constant .)
    COLON           reduce using rule 224 (primary_expression -> constant .)


state 93

    (205) unary_expression -> SIZEOF . unary_expression
    (206) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 165
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 166
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 94

    (210) unary_operator -> MINUS .

    LPAREN          reduce using rule 210 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 210 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 210 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 210 (unary_operator -> MINUS .)
    AND             reduce using rule 210 (unary_operator -> MINUS .)
    TIMES           reduce using rule 210 (unary_operator -> MINUS .)
    PLUS            reduce using rule 210 (unary_operator -> MINUS .)
    MINUS           reduce using rule 210 (unary_operator -> MINUS .)
    NOT             reduce using rule 210 (unary_operator -> MINUS .)
    LNOT            reduce using rule 210 (unary_operator -> MINUS .)
    ID              reduce using rule 210 (unary_operator -> MINUS .)
    INT_CONST_DEC   reduce using rule 210 (unary_operator -> MINUS .)
    INT_CONST_OCT   reduce using rule 210 (unary_operator -> MINUS .)
    INT_CONST_HEX   reduce using rule 210 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 210 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 210 (unary_operator -> MINUS .)
    WCHAR_CONST     reduce using rule 210 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 210 (unary_operator -> MINUS .)
    WSTRING_LITERAL reduce using rule 210 (unary_operator -> MINUS .)


state 95

    (225) primary_expression -> unified_string_literal .
    (238) unified_string_literal -> unified_string_literal . STRING_LITERAL

    LBRACKET        reduce using rule 225 (primary_expression -> unified_string_literal .)
    LPAREN          reduce using rule 225 (primary_expression -> unified_string_literal .)
    PERIOD          reduce using rule 225 (primary_expression -> unified_string_literal .)
    ARROW           reduce using rule 225 (primary_expression -> unified_string_literal .)
    PLUSPLUS        reduce using rule 225 (primary_expression -> unified_string_literal .)
    MINUSMINUS      reduce using rule 225 (primary_expression -> unified_string_literal .)
    EQUALS          reduce using rule 225 (primary_expression -> unified_string_literal .)
    XOREQUAL        reduce using rule 225 (primary_expression -> unified_string_literal .)
    TIMESEQUAL      reduce using rule 225 (primary_expression -> unified_string_literal .)
    DIVEQUAL        reduce using rule 225 (primary_expression -> unified_string_literal .)
    MODEQUAL        reduce using rule 225 (primary_expression -> unified_string_literal .)
    PLUSEQUAL       reduce using rule 225 (primary_expression -> unified_string_literal .)
    MINUSEQUAL      reduce using rule 225 (primary_expression -> unified_string_literal .)
    LSHIFTEQUAL     reduce using rule 225 (primary_expression -> unified_string_literal .)
    RSHIFTEQUAL     reduce using rule 225 (primary_expression -> unified_string_literal .)
    ANDEQUAL        reduce using rule 225 (primary_expression -> unified_string_literal .)
    OREQUAL         reduce using rule 225 (primary_expression -> unified_string_literal .)
    CONDOP          reduce using rule 225 (primary_expression -> unified_string_literal .)
    TIMES           reduce using rule 225 (primary_expression -> unified_string_literal .)
    DIVIDE          reduce using rule 225 (primary_expression -> unified_string_literal .)
    MOD             reduce using rule 225 (primary_expression -> unified_string_literal .)
    PLUS            reduce using rule 225 (primary_expression -> unified_string_literal .)
    MINUS           reduce using rule 225 (primary_expression -> unified_string_literal .)
    RSHIFT          reduce using rule 225 (primary_expression -> unified_string_literal .)
    LSHIFT          reduce using rule 225 (primary_expression -> unified_string_literal .)
    LT              reduce using rule 225 (primary_expression -> unified_string_literal .)
    LE              reduce using rule 225 (primary_expression -> unified_string_literal .)
    GE              reduce using rule 225 (primary_expression -> unified_string_literal .)
    GT              reduce using rule 225 (primary_expression -> unified_string_literal .)
    EQ              reduce using rule 225 (primary_expression -> unified_string_literal .)
    NE              reduce using rule 225 (primary_expression -> unified_string_literal .)
    AND             reduce using rule 225 (primary_expression -> unified_string_literal .)
    OR              reduce using rule 225 (primary_expression -> unified_string_literal .)
    XOR             reduce using rule 225 (primary_expression -> unified_string_literal .)
    LAND            reduce using rule 225 (primary_expression -> unified_string_literal .)
    LOR             reduce using rule 225 (primary_expression -> unified_string_literal .)
    COMMA           reduce using rule 225 (primary_expression -> unified_string_literal .)
    RPAREN          reduce using rule 225 (primary_expression -> unified_string_literal .)
    RBRACE          reduce using rule 225 (primary_expression -> unified_string_literal .)
    RBRACKET        reduce using rule 225 (primary_expression -> unified_string_literal .)
    SEMI            reduce using rule 225 (primary_expression -> unified_string_literal .)
    COLON           reduce using rule 225 (primary_expression -> unified_string_literal .)
    STRING_LITERAL  shift and go to state 168


state 96

    (201) unary_expression -> postfix_expression .
    (214) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (215) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> postfix_expression . LPAREN RPAREN
    (217) postfix_expression -> postfix_expression . PERIOD identifier
    (218) postfix_expression -> postfix_expression . ARROW identifier
    (219) postfix_expression -> postfix_expression . PLUSPLUS
    (220) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 201 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 201 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 201 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 201 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 201 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 201 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 201 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 201 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 201 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 201 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 201 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 201 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 201 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 201 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 201 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 201 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 201 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 201 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 201 (unary_expression -> postfix_expression .)
    LT              reduce using rule 201 (unary_expression -> postfix_expression .)
    LE              reduce using rule 201 (unary_expression -> postfix_expression .)
    GE              reduce using rule 201 (unary_expression -> postfix_expression .)
    GT              reduce using rule 201 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 201 (unary_expression -> postfix_expression .)
    NE              reduce using rule 201 (unary_expression -> postfix_expression .)
    AND             reduce using rule 201 (unary_expression -> postfix_expression .)
    OR              reduce using rule 201 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 201 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 201 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 201 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 201 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 201 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 201 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 201 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 201 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 201 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 172
    LPAREN          shift and go to state 173
    PERIOD          shift and go to state 171
    ARROW           shift and go to state 169
    PLUSPLUS        shift and go to state 170
    MINUSMINUS      shift and go to state 174


state 97

    (103) direct_declarator -> direct_declarator LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 175


state 98

    (180) binary_expression -> cast_expression .

    CONDOP          reduce using rule 180 (binary_expression -> cast_expression .)
    TIMES           reduce using rule 180 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 180 (binary_expression -> cast_expression .)
    MOD             reduce using rule 180 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 180 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 180 (binary_expression -> cast_expression .)
    RSHIFT          reduce using rule 180 (binary_expression -> cast_expression .)
    LSHIFT          reduce using rule 180 (binary_expression -> cast_expression .)
    LT              reduce using rule 180 (binary_expression -> cast_expression .)
    LE              reduce using rule 180 (binary_expression -> cast_expression .)
    GE              reduce using rule 180 (binary_expression -> cast_expression .)
    GT              reduce using rule 180 (binary_expression -> cast_expression .)
    EQ              reduce using rule 180 (binary_expression -> cast_expression .)
    NE              reduce using rule 180 (binary_expression -> cast_expression .)
    AND             reduce using rule 180 (binary_expression -> cast_expression .)
    OR              reduce using rule 180 (binary_expression -> cast_expression .)
    XOR             reduce using rule 180 (binary_expression -> cast_expression .)
    LAND            reduce using rule 180 (binary_expression -> cast_expression .)
    LOR             reduce using rule 180 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 180 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 180 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 180 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 180 (binary_expression -> cast_expression .)
    COLON           reduce using rule 180 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 180 (binary_expression -> cast_expression .)


state 99

    (204) unary_expression -> unary_operator . cast_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 178
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 100

    (209) unary_operator -> PLUS .

    LPAREN          reduce using rule 209 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 209 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 209 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 209 (unary_operator -> PLUS .)
    AND             reduce using rule 209 (unary_operator -> PLUS .)
    TIMES           reduce using rule 209 (unary_operator -> PLUS .)
    PLUS            reduce using rule 209 (unary_operator -> PLUS .)
    MINUS           reduce using rule 209 (unary_operator -> PLUS .)
    NOT             reduce using rule 209 (unary_operator -> PLUS .)
    LNOT            reduce using rule 209 (unary_operator -> PLUS .)
    ID              reduce using rule 209 (unary_operator -> PLUS .)
    INT_CONST_DEC   reduce using rule 209 (unary_operator -> PLUS .)
    INT_CONST_OCT   reduce using rule 209 (unary_operator -> PLUS .)
    INT_CONST_HEX   reduce using rule 209 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 209 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 209 (unary_operator -> PLUS .)
    WCHAR_CONST     reduce using rule 209 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 209 (unary_operator -> PLUS .)
    WSTRING_LITERAL reduce using rule 209 (unary_operator -> PLUS .)


state 101

    (4) assignment_expression_opt -> assignment_expression .

    RBRACKET        reduce using rule 4 (assignment_expression_opt -> assignment_expression .)


state 102

    (202) unary_expression -> PLUSPLUS . unary_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 179
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 180
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 103

    (233) constant -> INT_CONST_HEX .

    LBRACKET        reduce using rule 233 (constant -> INT_CONST_HEX .)
    LPAREN          reduce using rule 233 (constant -> INT_CONST_HEX .)
    PERIOD          reduce using rule 233 (constant -> INT_CONST_HEX .)
    ARROW           reduce using rule 233 (constant -> INT_CONST_HEX .)
    PLUSPLUS        reduce using rule 233 (constant -> INT_CONST_HEX .)
    MINUSMINUS      reduce using rule 233 (constant -> INT_CONST_HEX .)
    EQUALS          reduce using rule 233 (constant -> INT_CONST_HEX .)
    XOREQUAL        reduce using rule 233 (constant -> INT_CONST_HEX .)
    TIMESEQUAL      reduce using rule 233 (constant -> INT_CONST_HEX .)
    DIVEQUAL        reduce using rule 233 (constant -> INT_CONST_HEX .)
    MODEQUAL        reduce using rule 233 (constant -> INT_CONST_HEX .)
    PLUSEQUAL       reduce using rule 233 (constant -> INT_CONST_HEX .)
    MINUSEQUAL      reduce using rule 233 (constant -> INT_CONST_HEX .)
    LSHIFTEQUAL     reduce using rule 233 (constant -> INT_CONST_HEX .)
    RSHIFTEQUAL     reduce using rule 233 (constant -> INT_CONST_HEX .)
    ANDEQUAL        reduce using rule 233 (constant -> INT_CONST_HEX .)
    OREQUAL         reduce using rule 233 (constant -> INT_CONST_HEX .)
    CONDOP          reduce using rule 233 (constant -> INT_CONST_HEX .)
    TIMES           reduce using rule 233 (constant -> INT_CONST_HEX .)
    DIVIDE          reduce using rule 233 (constant -> INT_CONST_HEX .)
    MOD             reduce using rule 233 (constant -> INT_CONST_HEX .)
    PLUS            reduce using rule 233 (constant -> INT_CONST_HEX .)
    MINUS           reduce using rule 233 (constant -> INT_CONST_HEX .)
    RSHIFT          reduce using rule 233 (constant -> INT_CONST_HEX .)
    LSHIFT          reduce using rule 233 (constant -> INT_CONST_HEX .)
    LT              reduce using rule 233 (constant -> INT_CONST_HEX .)
    LE              reduce using rule 233 (constant -> INT_CONST_HEX .)
    GE              reduce using rule 233 (constant -> INT_CONST_HEX .)
    GT              reduce using rule 233 (constant -> INT_CONST_HEX .)
    EQ              reduce using rule 233 (constant -> INT_CONST_HEX .)
    NE              reduce using rule 233 (constant -> INT_CONST_HEX .)
    AND             reduce using rule 233 (constant -> INT_CONST_HEX .)
    OR              reduce using rule 233 (constant -> INT_CONST_HEX .)
    XOR             reduce using rule 233 (constant -> INT_CONST_HEX .)
    LAND            reduce using rule 233 (constant -> INT_CONST_HEX .)
    LOR             reduce using rule 233 (constant -> INT_CONST_HEX .)
    COMMA           reduce using rule 233 (constant -> INT_CONST_HEX .)
    RPAREN          reduce using rule 233 (constant -> INT_CONST_HEX .)
    COLON           reduce using rule 233 (constant -> INT_CONST_HEX .)
    RBRACKET        reduce using rule 233 (constant -> INT_CONST_HEX .)
    SEMI            reduce using rule 233 (constant -> INT_CONST_HEX .)
    RBRACE          reduce using rule 233 (constant -> INT_CONST_HEX .)


state 104

    (104) direct_declarator -> direct_declarator LBRACKET TIMES . RBRACKET
    (208) unary_operator -> TIMES .

    RBRACKET        shift and go to state 181
    LPAREN          reduce using rule 208 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 208 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 208 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 208 (unary_operator -> TIMES .)
    AND             reduce using rule 208 (unary_operator -> TIMES .)
    TIMES           reduce using rule 208 (unary_operator -> TIMES .)
    PLUS            reduce using rule 208 (unary_operator -> TIMES .)
    MINUS           reduce using rule 208 (unary_operator -> TIMES .)
    NOT             reduce using rule 208 (unary_operator -> TIMES .)
    LNOT            reduce using rule 208 (unary_operator -> TIMES .)
    ID              reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 208 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 208 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 208 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 208 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 208 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 208 (unary_operator -> TIMES .)


state 105

    (213) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 213 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 213 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 213 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 213 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 213 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 213 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 213 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 213 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 213 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 213 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 213 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 213 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 213 (postfix_expression -> primary_expression .)
    LT              reduce using rule 213 (postfix_expression -> primary_expression .)
    LE              reduce using rule 213 (postfix_expression -> primary_expression .)
    GE              reduce using rule 213 (postfix_expression -> primary_expression .)
    GT              reduce using rule 213 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 213 (postfix_expression -> primary_expression .)
    NE              reduce using rule 213 (postfix_expression -> primary_expression .)
    AND             reduce using rule 213 (postfix_expression -> primary_expression .)
    OR              reduce using rule 213 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 213 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 213 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 213 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 213 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 213 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 213 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 213 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 213 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 213 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 213 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 213 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 213 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 213 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 213 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 213 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 213 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 213 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 213 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 213 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 213 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 213 (postfix_expression -> primary_expression .)


state 106

    (221) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (200) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (227) primary_expression -> LPAREN . expression RPAREN
    (129) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    struct_or_union_specifier      shift and go to state 5
    unified_wstring_literal        shift and go to state 87
    type_specifier                 shift and go to state 80
    type_name                      shift and go to state 183
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    struct_or_union                shift and go to state 7
    assignment_expression          shift and go to state 184
    primary_expression             shift and go to state 105
    typedef_name                   shift and go to state 25
    binary_expression              shift and go to state 112
    enum_specifier                 shift and go to state 41
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 185
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 182

state 107

    (203) unary_expression -> MINUSMINUS . unary_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 179
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 186
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 108

    (230) identifier -> ID .

    LBRACKET        reduce using rule 230 (identifier -> ID .)
    LPAREN          reduce using rule 230 (identifier -> ID .)
    PERIOD          reduce using rule 230 (identifier -> ID .)
    ARROW           reduce using rule 230 (identifier -> ID .)
    PLUSPLUS        reduce using rule 230 (identifier -> ID .)
    MINUSMINUS      reduce using rule 230 (identifier -> ID .)
    EQUALS          reduce using rule 230 (identifier -> ID .)
    XOREQUAL        reduce using rule 230 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 230 (identifier -> ID .)
    DIVEQUAL        reduce using rule 230 (identifier -> ID .)
    MODEQUAL        reduce using rule 230 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 230 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 230 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 230 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 230 (identifier -> ID .)
    ANDEQUAL        reduce using rule 230 (identifier -> ID .)
    OREQUAL         reduce using rule 230 (identifier -> ID .)
    CONDOP          reduce using rule 230 (identifier -> ID .)
    TIMES           reduce using rule 230 (identifier -> ID .)
    DIVIDE          reduce using rule 230 (identifier -> ID .)
    MOD             reduce using rule 230 (identifier -> ID .)
    PLUS            reduce using rule 230 (identifier -> ID .)
    MINUS           reduce using rule 230 (identifier -> ID .)
    RSHIFT          reduce using rule 230 (identifier -> ID .)
    LSHIFT          reduce using rule 230 (identifier -> ID .)
    LT              reduce using rule 230 (identifier -> ID .)
    LE              reduce using rule 230 (identifier -> ID .)
    GE              reduce using rule 230 (identifier -> ID .)
    GT              reduce using rule 230 (identifier -> ID .)
    EQ              reduce using rule 230 (identifier -> ID .)
    NE              reduce using rule 230 (identifier -> ID .)
    AND             reduce using rule 230 (identifier -> ID .)
    OR              reduce using rule 230 (identifier -> ID .)
    XOR             reduce using rule 230 (identifier -> ID .)
    LAND            reduce using rule 230 (identifier -> ID .)
    LOR             reduce using rule 230 (identifier -> ID .)
    RBRACKET        reduce using rule 230 (identifier -> ID .)
    RPAREN          reduce using rule 230 (identifier -> ID .)
    COMMA           reduce using rule 230 (identifier -> ID .)
    SEMI            reduce using rule 230 (identifier -> ID .)
    COLON           reduce using rule 230 (identifier -> ID .)
    RBRACE          reduce using rule 230 (identifier -> ID .)


state 109

    (237) unified_string_literal -> STRING_LITERAL .

    STRING_LITERAL  reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    LBRACKET        reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    LPAREN          reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    PERIOD          reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    ARROW           reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    PLUSPLUS        reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    CONDOP          reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    TIMES           reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    MOD             reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    PLUS            reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    MINUS           reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    LT              reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    LE              reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    GE              reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    GT              reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    EQ              reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    NE              reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    AND             reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    OR              reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    XOR             reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    LAND            reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    LOR             reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    SEMI            reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    COMMA           reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    RBRACKET        reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    COLON           reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    RBRACE          reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    EQUALS          reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    XOREQUAL        reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    DIVEQUAL        reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    MODEQUAL        reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    ANDEQUAL        reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)
    OREQUAL         reduce using rule 237 (unified_string_literal -> STRING_LITERAL .)


state 110

    (207) unary_operator -> AND .

    LPAREN          reduce using rule 207 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 207 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 207 (unary_operator -> AND .)
    SIZEOF          reduce using rule 207 (unary_operator -> AND .)
    AND             reduce using rule 207 (unary_operator -> AND .)
    TIMES           reduce using rule 207 (unary_operator -> AND .)
    PLUS            reduce using rule 207 (unary_operator -> AND .)
    MINUS           reduce using rule 207 (unary_operator -> AND .)
    NOT             reduce using rule 207 (unary_operator -> AND .)
    LNOT            reduce using rule 207 (unary_operator -> AND .)
    ID              reduce using rule 207 (unary_operator -> AND .)
    INT_CONST_DEC   reduce using rule 207 (unary_operator -> AND .)
    INT_CONST_OCT   reduce using rule 207 (unary_operator -> AND .)
    INT_CONST_HEX   reduce using rule 207 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 207 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 207 (unary_operator -> AND .)
    WCHAR_CONST     reduce using rule 207 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 207 (unary_operator -> AND .)
    WSTRING_LITERAL reduce using rule 207 (unary_operator -> AND .)


state 111

    (231) constant -> INT_CONST_DEC .

    LBRACKET        reduce using rule 231 (constant -> INT_CONST_DEC .)
    LPAREN          reduce using rule 231 (constant -> INT_CONST_DEC .)
    PERIOD          reduce using rule 231 (constant -> INT_CONST_DEC .)
    ARROW           reduce using rule 231 (constant -> INT_CONST_DEC .)
    PLUSPLUS        reduce using rule 231 (constant -> INT_CONST_DEC .)
    MINUSMINUS      reduce using rule 231 (constant -> INT_CONST_DEC .)
    EQUALS          reduce using rule 231 (constant -> INT_CONST_DEC .)
    XOREQUAL        reduce using rule 231 (constant -> INT_CONST_DEC .)
    TIMESEQUAL      reduce using rule 231 (constant -> INT_CONST_DEC .)
    DIVEQUAL        reduce using rule 231 (constant -> INT_CONST_DEC .)
    MODEQUAL        reduce using rule 231 (constant -> INT_CONST_DEC .)
    PLUSEQUAL       reduce using rule 231 (constant -> INT_CONST_DEC .)
    MINUSEQUAL      reduce using rule 231 (constant -> INT_CONST_DEC .)
    LSHIFTEQUAL     reduce using rule 231 (constant -> INT_CONST_DEC .)
    RSHIFTEQUAL     reduce using rule 231 (constant -> INT_CONST_DEC .)
    ANDEQUAL        reduce using rule 231 (constant -> INT_CONST_DEC .)
    OREQUAL         reduce using rule 231 (constant -> INT_CONST_DEC .)
    CONDOP          reduce using rule 231 (constant -> INT_CONST_DEC .)
    TIMES           reduce using rule 231 (constant -> INT_CONST_DEC .)
    DIVIDE          reduce using rule 231 (constant -> INT_CONST_DEC .)
    MOD             reduce using rule 231 (constant -> INT_CONST_DEC .)
    PLUS            reduce using rule 231 (constant -> INT_CONST_DEC .)
    MINUS           reduce using rule 231 (constant -> INT_CONST_DEC .)
    RSHIFT          reduce using rule 231 (constant -> INT_CONST_DEC .)
    LSHIFT          reduce using rule 231 (constant -> INT_CONST_DEC .)
    LT              reduce using rule 231 (constant -> INT_CONST_DEC .)
    LE              reduce using rule 231 (constant -> INT_CONST_DEC .)
    GE              reduce using rule 231 (constant -> INT_CONST_DEC .)
    GT              reduce using rule 231 (constant -> INT_CONST_DEC .)
    EQ              reduce using rule 231 (constant -> INT_CONST_DEC .)
    NE              reduce using rule 231 (constant -> INT_CONST_DEC .)
    AND             reduce using rule 231 (constant -> INT_CONST_DEC .)
    OR              reduce using rule 231 (constant -> INT_CONST_DEC .)
    XOR             reduce using rule 231 (constant -> INT_CONST_DEC .)
    LAND            reduce using rule 231 (constant -> INT_CONST_DEC .)
    LOR             reduce using rule 231 (constant -> INT_CONST_DEC .)
    COMMA           reduce using rule 231 (constant -> INT_CONST_DEC .)
    RPAREN          reduce using rule 231 (constant -> INT_CONST_DEC .)
    COLON           reduce using rule 231 (constant -> INT_CONST_DEC .)
    RBRACKET        reduce using rule 231 (constant -> INT_CONST_DEC .)
    SEMI            reduce using rule 231 (constant -> INT_CONST_DEC .)
    RBRACE          reduce using rule 231 (constant -> INT_CONST_DEC .)


state 112

    (178) conditional_expression -> binary_expression .
    (179) conditional_expression -> binary_expression . CONDOP expression COLON conditional_expression
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    RPAREN          reduce using rule 178 (conditional_expression -> binary_expression .)
    COMMA           reduce using rule 178 (conditional_expression -> binary_expression .)
    RBRACE          reduce using rule 178 (conditional_expression -> binary_expression .)
    SEMI            reduce using rule 178 (conditional_expression -> binary_expression .)
    COLON           reduce using rule 178 (conditional_expression -> binary_expression .)
    RBRACKET        reduce using rule 178 (conditional_expression -> binary_expression .)
    CONDOP          shift and go to state 203
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189
    LT              shift and go to state 193
    LE              shift and go to state 191
    GE              shift and go to state 199
    GT              shift and go to state 195
    EQ              shift and go to state 201
    NE              shift and go to state 192
    AND             shift and go to state 202
    OR              shift and go to state 204
    XOR             shift and go to state 196
    LAND            shift and go to state 200
    LOR             shift and go to state 188


state 113

    (232) constant -> INT_CONST_OCT .

    LBRACKET        reduce using rule 232 (constant -> INT_CONST_OCT .)
    LPAREN          reduce using rule 232 (constant -> INT_CONST_OCT .)
    PERIOD          reduce using rule 232 (constant -> INT_CONST_OCT .)
    ARROW           reduce using rule 232 (constant -> INT_CONST_OCT .)
    PLUSPLUS        reduce using rule 232 (constant -> INT_CONST_OCT .)
    MINUSMINUS      reduce using rule 232 (constant -> INT_CONST_OCT .)
    EQUALS          reduce using rule 232 (constant -> INT_CONST_OCT .)
    XOREQUAL        reduce using rule 232 (constant -> INT_CONST_OCT .)
    TIMESEQUAL      reduce using rule 232 (constant -> INT_CONST_OCT .)
    DIVEQUAL        reduce using rule 232 (constant -> INT_CONST_OCT .)
    MODEQUAL        reduce using rule 232 (constant -> INT_CONST_OCT .)
    PLUSEQUAL       reduce using rule 232 (constant -> INT_CONST_OCT .)
    MINUSEQUAL      reduce using rule 232 (constant -> INT_CONST_OCT .)
    LSHIFTEQUAL     reduce using rule 232 (constant -> INT_CONST_OCT .)
    RSHIFTEQUAL     reduce using rule 232 (constant -> INT_CONST_OCT .)
    ANDEQUAL        reduce using rule 232 (constant -> INT_CONST_OCT .)
    OREQUAL         reduce using rule 232 (constant -> INT_CONST_OCT .)
    CONDOP          reduce using rule 232 (constant -> INT_CONST_OCT .)
    TIMES           reduce using rule 232 (constant -> INT_CONST_OCT .)
    DIVIDE          reduce using rule 232 (constant -> INT_CONST_OCT .)
    MOD             reduce using rule 232 (constant -> INT_CONST_OCT .)
    PLUS            reduce using rule 232 (constant -> INT_CONST_OCT .)
    MINUS           reduce using rule 232 (constant -> INT_CONST_OCT .)
    RSHIFT          reduce using rule 232 (constant -> INT_CONST_OCT .)
    LSHIFT          reduce using rule 232 (constant -> INT_CONST_OCT .)
    LT              reduce using rule 232 (constant -> INT_CONST_OCT .)
    LE              reduce using rule 232 (constant -> INT_CONST_OCT .)
    GE              reduce using rule 232 (constant -> INT_CONST_OCT .)
    GT              reduce using rule 232 (constant -> INT_CONST_OCT .)
    EQ              reduce using rule 232 (constant -> INT_CONST_OCT .)
    NE              reduce using rule 232 (constant -> INT_CONST_OCT .)
    AND             reduce using rule 232 (constant -> INT_CONST_OCT .)
    OR              reduce using rule 232 (constant -> INT_CONST_OCT .)
    XOR             reduce using rule 232 (constant -> INT_CONST_OCT .)
    LAND            reduce using rule 232 (constant -> INT_CONST_OCT .)
    LOR             reduce using rule 232 (constant -> INT_CONST_OCT .)
    COMMA           reduce using rule 232 (constant -> INT_CONST_OCT .)
    RPAREN          reduce using rule 232 (constant -> INT_CONST_OCT .)
    COLON           reduce using rule 232 (constant -> INT_CONST_OCT .)
    RBRACKET        reduce using rule 232 (constant -> INT_CONST_OCT .)
    SEMI            reduce using rule 232 (constant -> INT_CONST_OCT .)
    RBRACE          reduce using rule 232 (constant -> INT_CONST_OCT .)


state 114

    (3) assignment_expression_opt -> empty .

    RBRACKET        reduce using rule 3 (assignment_expression_opt -> empty .)


state 115

    (164) assignment_expression -> conditional_expression .

    RBRACE          reduce using rule 164 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 164 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 164 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 164 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 164 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 164 (assignment_expression -> conditional_expression .)


state 116

    (211) unary_operator -> NOT .

    LPAREN          reduce using rule 211 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 211 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 211 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 211 (unary_operator -> NOT .)
    AND             reduce using rule 211 (unary_operator -> NOT .)
    TIMES           reduce using rule 211 (unary_operator -> NOT .)
    PLUS            reduce using rule 211 (unary_operator -> NOT .)
    MINUS           reduce using rule 211 (unary_operator -> NOT .)
    NOT             reduce using rule 211 (unary_operator -> NOT .)
    LNOT            reduce using rule 211 (unary_operator -> NOT .)
    ID              reduce using rule 211 (unary_operator -> NOT .)
    INT_CONST_DEC   reduce using rule 211 (unary_operator -> NOT .)
    INT_CONST_OCT   reduce using rule 211 (unary_operator -> NOT .)
    INT_CONST_HEX   reduce using rule 211 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 211 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 211 (unary_operator -> NOT .)
    WCHAR_CONST     reduce using rule 211 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 211 (unary_operator -> NOT .)
    WSTRING_LITERAL reduce using rule 211 (unary_operator -> NOT .)


state 117

    (223) primary_expression -> identifier .

    LBRACKET        reduce using rule 223 (primary_expression -> identifier .)
    LPAREN          reduce using rule 223 (primary_expression -> identifier .)
    PERIOD          reduce using rule 223 (primary_expression -> identifier .)
    ARROW           reduce using rule 223 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 223 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 223 (primary_expression -> identifier .)
    EQUALS          reduce using rule 223 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 223 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 223 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 223 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 223 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 223 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 223 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 223 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 223 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 223 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 223 (primary_expression -> identifier .)
    CONDOP          reduce using rule 223 (primary_expression -> identifier .)
    TIMES           reduce using rule 223 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 223 (primary_expression -> identifier .)
    MOD             reduce using rule 223 (primary_expression -> identifier .)
    PLUS            reduce using rule 223 (primary_expression -> identifier .)
    MINUS           reduce using rule 223 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 223 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 223 (primary_expression -> identifier .)
    LT              reduce using rule 223 (primary_expression -> identifier .)
    LE              reduce using rule 223 (primary_expression -> identifier .)
    GE              reduce using rule 223 (primary_expression -> identifier .)
    GT              reduce using rule 223 (primary_expression -> identifier .)
    EQ              reduce using rule 223 (primary_expression -> identifier .)
    NE              reduce using rule 223 (primary_expression -> identifier .)
    AND             reduce using rule 223 (primary_expression -> identifier .)
    OR              reduce using rule 223 (primary_expression -> identifier .)
    XOR             reduce using rule 223 (primary_expression -> identifier .)
    LAND            reduce using rule 223 (primary_expression -> identifier .)
    LOR             reduce using rule 223 (primary_expression -> identifier .)
    COMMA           reduce using rule 223 (primary_expression -> identifier .)
    RPAREN          reduce using rule 223 (primary_expression -> identifier .)
    RBRACE          reduce using rule 223 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 223 (primary_expression -> identifier .)
    SEMI            reduce using rule 223 (primary_expression -> identifier .)
    COLON           reduce using rule 223 (primary_expression -> identifier .)


state 118

    (106) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 206


state 119

    (15) identifier_list_opt -> empty .

    RPAREN          reduce using rule 15 (identifier_list_opt -> empty .)


state 120

    (105) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 207


state 121

    (113) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 113 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 113 (parameter_list -> parameter_declaration .)


state 122

    (115) parameter_declaration -> declaration_specifiers . declarator
    (116) parameter_declaration -> declaration_specifiers . abstract_declarator_opt
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer
    (241) empty -> .
    (130) abstract_declarator -> . pointer
    (131) abstract_declarator -> . pointer direct_abstract_declarator
    (132) abstract_declarator -> . direct_abstract_declarator
    (133) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (134) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (135) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (136) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (137) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (138) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (139) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    ID              shift and go to state 29
    LPAREN          shift and go to state 208
    TIMES           shift and go to state 24
    COMMA           reduce using rule 241 (empty -> .)
    RPAREN          reduce using rule 241 (empty -> .)
    LBRACKET        shift and go to state 211

    direct_declarator              shift and go to state 22
    abstract_declarator_opt        shift and go to state 209
    abstract_declarator            shift and go to state 210
    declarator                     shift and go to state 212
    direct_abstract_declarator     shift and go to state 213
    pointer                        shift and go to state 214
    empty                          shift and go to state 215

state 123

    (16) identifier_list_opt -> identifier_list .
    (118) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 16 (identifier_list_opt -> identifier_list .)
    COMMA           shift and go to state 216


state 124

    (111) parameter_type_list -> parameter_list .
    (112) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (114) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 111 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 217


state 125

    (117) identifier_list -> identifier .

    COMMA           reduce using rule 117 (identifier_list -> identifier .)
    RPAREN          reduce using rule 117 (identifier_list -> identifier .)


state 126

    (93) enum_specifier -> ENUM TYPEID LBRACE . enumerator_list RBRACE
    (94) enumerator_list -> . enumerator
    (95) enumerator_list -> . enumerator_list COMMA
    (96) enumerator_list -> . enumerator_list COMMA enumerator
    (97) enumerator -> . ID
    (98) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 129

    enumerator_list                shift and go to state 218
    enumerator                     shift and go to state 127

state 127

    (94) enumerator_list -> enumerator .

    RBRACE          reduce using rule 94 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 94 (enumerator_list -> enumerator .)


state 128

    (91) enum_specifier -> ENUM LBRACE enumerator_list . RBRACE
    (95) enumerator_list -> enumerator_list . COMMA
    (96) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 219
    COMMA           shift and go to state 220


state 129

    (97) enumerator -> ID .
    (98) enumerator -> ID . EQUALS constant_expression

    RBRACE          reduce using rule 97 (enumerator -> ID .)
    COMMA           reduce using rule 97 (enumerator -> ID .)
    EQUALS          shift and go to state 221


state 130

    (92) enum_specifier -> ENUM ID LBRACE . enumerator_list RBRACE
    (94) enumerator_list -> . enumerator
    (95) enumerator_list -> . enumerator_list COMMA
    (96) enumerator_list -> . enumerator_list COMMA enumerator
    (97) enumerator -> . ID
    (98) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 129

    enumerator_list                shift and go to state 222
    enumerator                     shift and go to state 127

state 131

    (110) type_qualifier_list -> type_qualifier_list type_qualifier .

    CONST           reduce using rule 110 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 110 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 110 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TIMES           reduce using rule 110 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 110 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 110 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 110 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 110 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 110 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 132

    (108) pointer -> TIMES type_qualifier_list_opt pointer .

    ID              reduce using rule 108 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LPAREN          reduce using rule 108 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LBRACKET        reduce using rule 108 (pointer -> TIMES type_qualifier_list_opt pointer .)
    RPAREN          reduce using rule 108 (pointer -> TIMES type_qualifier_list_opt pointer .)
    COMMA           reduce using rule 108 (pointer -> TIMES type_qualifier_list_opt pointer .)


state 133

    (69) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (70) init_declarator -> . declarator
    (71) init_declarator -> . declarator EQUALS initializer
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 29
    LPAREN          shift and go to state 4
    TIMES           shift and go to state 24

    direct_declarator              shift and go to state 22
    init_declarator                shift and go to state 223
    declarator                     shift and go to state 136
    pointer                        shift and go to state 13

state 134

    (71) init_declarator -> declarator EQUALS . initializer
    (119) initializer -> . assignment_expression
    (120) initializer -> . LBRACE initializer_list RBRACE
    (121) initializer -> . LBRACE initializer_list COMMA RBRACE
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 226
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    assignment_expression          shift and go to state 225
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    initializer                    shift and go to state 224
    identifier                     shift and go to state 117
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 135

    (32) function_definition -> declaration_specifiers declarator declaration_list_opt . compound_statement
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE

    LBRACE          shift and go to state 137

    compound_statement             shift and go to state 227

state 136

    (70) init_declarator -> declarator .
    (71) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 70 (init_declarator -> declarator .)
    SEMI            reduce using rule 70 (init_declarator -> declarator .)
    EQUALS          shift and go to state 134


state 137

    (144) compound_statement -> LBRACE . block_item_list_opt RBRACE
    (5) block_item_list_opt -> . empty
    (6) block_item_list_opt -> . block_item_list
    (241) empty -> .
    (142) block_item_list -> . block_item
    (143) block_item_list -> . block_item_list block_item
    (140) block_item -> . declaration
    (141) block_item -> . statement
    (40) declaration -> . decl_body SEMI
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (39) decl_body -> . declaration_specifiers init_declarator_list_opt
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RBRACE          reduce using rule 241 (empty -> .)
    SEMI            reduce using rule 241 (empty -> .)
    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    storage_class_specifier        shift and go to state 1
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    struct_or_union_specifier      shift and go to state 5
    unified_wstring_literal        shift and go to state 87
    type_specifier                 shift and go to state 12
    compound_statement             shift and go to state 234
    iteration_statement            shift and go to state 229
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    typedef_name                   shift and go to state 25
    statement                      shift and go to state 243
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 98
    struct_or_union                shift and go to state 7
    block_item_list_opt            shift and go to state 251
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    declaration_specifiers         shift and go to state 73
    declaration                    shift and go to state 244
    block_item_list                shift and go to state 241
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    enum_specifier                 shift and go to state 41
    decl_body                      shift and go to state 37
    type_qualifier                 shift and go to state 38
    labeled_statement              shift and go to state 232
    function_specifier             shift and go to state 40
    block_item                     shift and go to state 247
    empty                          shift and go to state 248
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 138

    (31) function_definition -> declarator declaration_list_opt compound_statement .

    PPHASH          reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 31 (function_definition -> declarator declaration_list_opt compound_statement .)


state 139

    (42) declaration_list -> declaration_list declaration .

    CONST           reduce using rule 42 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 42 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 42 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 42 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 42 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 42 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 42 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 42 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 42 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 42 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 42 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 42 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 42 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 42 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 42 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 42 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 42 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 42 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 42 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 42 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 42 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 42 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 42 (declaration_list -> declaration_list declaration .)


state 140

    (78) struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list . RBRACE
    (82) struct_declaration_list -> struct_declaration_list . struct_declaration
    (83) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    RBRACE          shift and go to state 254
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 80
    struct_declaration             shift and go to state 141
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 83
    typedef_name                   shift and go to state 25

state 141

    (82) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPEID          reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 82 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 142

    (76) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .

    CONST           reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RESTRICT        reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INLINE          reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPEID          reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ID              reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 76 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)


state 143

    (21) specifier_qualifier_list_opt -> empty .

    COLON           reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    ID              reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    TIMES           reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    LBRACKET        reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    RPAREN          reduce using rule 21 (specifier_qualifier_list_opt -> empty .)


state 144

    (73) specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .

    COLON           reduce using rule 73 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    ID              reduce using rule 73 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    LPAREN          reduce using rule 73 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    TIMES           reduce using rule 73 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    LBRACKET        reduce using rule 73 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    RPAREN          reduce using rule 73 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)


state 145

    (22) specifier_qualifier_list_opt -> specifier_qualifier_list .

    COLON           reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    ID              reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    LPAREN          reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    TIMES           reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    LBRACKET        reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    RPAREN          reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)


state 146

    (72) specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .

    COLON           reduce using rule 72 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    ID              reduce using rule 72 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    LPAREN          reduce using rule 72 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    TIMES           reduce using rule 72 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    LBRACKET        reduce using rule 72 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    RPAREN          reduce using rule 72 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)


state 147

    (84) struct_declarator_list -> struct_declarator .

    SEMI            reduce using rule 84 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 84 (struct_declarator_list -> struct_declarator .)


state 148

    (86) struct_declarator -> declarator .
    (87) struct_declarator -> declarator . COLON constant_expression

    SEMI            reduce using rule 86 (struct_declarator -> declarator .)
    COMMA           reduce using rule 86 (struct_declarator -> declarator .)
    COLON           shift and go to state 255


state 149

    (88) struct_declarator -> COLON . constant_expression
    (177) constant_expression -> . conditional_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 257
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    constant_expression            shift and go to state 256
    primary_expression             shift and go to state 105

state 150

    (83) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI
    (85) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            shift and go to state 259
    COMMA           shift and go to state 258


state 151

    (77) struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list . RBRACE
    (82) struct_declaration_list -> struct_declaration_list . struct_declaration
    (83) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    RBRACE          shift and go to state 260
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 80
    struct_declaration             shift and go to state 141
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 83
    typedef_name                   shift and go to state 25

state 152

    (169) assignment_operator -> DIVEQUAL .

    PLUSPLUS        reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    INT_CONST_DEC   reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    INT_CONST_OCT   reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    INT_CONST_HEX   reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    FLOAT_CONST     reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    CHAR_CONST      reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    WCHAR_CONST     reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    STRING_LITERAL  reduce using rule 169 (assignment_operator -> DIVEQUAL .)
    WSTRING_LITERAL reduce using rule 169 (assignment_operator -> DIVEQUAL .)


state 153

    (172) assignment_operator -> MINUSEQUAL .

    PLUSPLUS        reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_DEC   reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_OCT   reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_HEX   reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    FLOAT_CONST     reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    CHAR_CONST      reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    WCHAR_CONST     reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    STRING_LITERAL  reduce using rule 172 (assignment_operator -> MINUSEQUAL .)
    WSTRING_LITERAL reduce using rule 172 (assignment_operator -> MINUSEQUAL .)


state 154

    (170) assignment_operator -> MODEQUAL .

    PLUSPLUS        reduce using rule 170 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 170 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 170 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 170 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 170 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 170 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 170 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 170 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 170 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 170 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 170 (assignment_operator -> MODEQUAL .)
    INT_CONST_DEC   reduce using rule 170 (assignment_operator -> MODEQUAL .)
    INT_CONST_OCT   reduce using rule 170 (assignment_operator -> MODEQUAL .)
    INT_CONST_HEX   reduce using rule 170 (assignment_operator -> MODEQUAL .)
    FLOAT_CONST     reduce using rule 170 (assignment_operator -> MODEQUAL .)
    CHAR_CONST      reduce using rule 170 (assignment_operator -> MODEQUAL .)
    WCHAR_CONST     reduce using rule 170 (assignment_operator -> MODEQUAL .)
    STRING_LITERAL  reduce using rule 170 (assignment_operator -> MODEQUAL .)
    WSTRING_LITERAL reduce using rule 170 (assignment_operator -> MODEQUAL .)


state 155

    (166) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 166 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 166 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 166 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 166 (assignment_operator -> EQUALS .)
    AND             reduce using rule 166 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 166 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 166 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 166 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 166 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 166 (assignment_operator -> EQUALS .)
    ID              reduce using rule 166 (assignment_operator -> EQUALS .)
    INT_CONST_DEC   reduce using rule 166 (assignment_operator -> EQUALS .)
    INT_CONST_OCT   reduce using rule 166 (assignment_operator -> EQUALS .)
    INT_CONST_HEX   reduce using rule 166 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 166 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 166 (assignment_operator -> EQUALS .)
    WCHAR_CONST     reduce using rule 166 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 166 (assignment_operator -> EQUALS .)
    WSTRING_LITERAL reduce using rule 166 (assignment_operator -> EQUALS .)


state 156

    (167) assignment_operator -> XOREQUAL .

    PLUSPLUS        reduce using rule 167 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 167 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 167 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 167 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 167 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 167 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 167 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 167 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 167 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 167 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 167 (assignment_operator -> XOREQUAL .)
    INT_CONST_DEC   reduce using rule 167 (assignment_operator -> XOREQUAL .)
    INT_CONST_OCT   reduce using rule 167 (assignment_operator -> XOREQUAL .)
    INT_CONST_HEX   reduce using rule 167 (assignment_operator -> XOREQUAL .)
    FLOAT_CONST     reduce using rule 167 (assignment_operator -> XOREQUAL .)
    CHAR_CONST      reduce using rule 167 (assignment_operator -> XOREQUAL .)
    WCHAR_CONST     reduce using rule 167 (assignment_operator -> XOREQUAL .)
    STRING_LITERAL  reduce using rule 167 (assignment_operator -> XOREQUAL .)
    WSTRING_LITERAL reduce using rule 167 (assignment_operator -> XOREQUAL .)


state 157

    (171) assignment_operator -> PLUSEQUAL .

    PLUSPLUS        reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_DEC   reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_OCT   reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_HEX   reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    FLOAT_CONST     reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    CHAR_CONST      reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    WCHAR_CONST     reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    STRING_LITERAL  reduce using rule 171 (assignment_operator -> PLUSEQUAL .)
    WSTRING_LITERAL reduce using rule 171 (assignment_operator -> PLUSEQUAL .)


state 158

    (173) assignment_operator -> LSHIFTEQUAL .

    PLUSPLUS        reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 173 (assignment_operator -> LSHIFTEQUAL .)


state 159

    (165) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99
    assignment_expression          shift and go to state 261

state 160

    (175) assignment_operator -> ANDEQUAL .

    PLUSPLUS        reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    INT_CONST_DEC   reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    INT_CONST_OCT   reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    INT_CONST_HEX   reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    FLOAT_CONST     reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    CHAR_CONST      reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    WCHAR_CONST     reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    STRING_LITERAL  reduce using rule 175 (assignment_operator -> ANDEQUAL .)
    WSTRING_LITERAL reduce using rule 175 (assignment_operator -> ANDEQUAL .)


state 161

    (176) assignment_operator -> OREQUAL .

    PLUSPLUS        reduce using rule 176 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 176 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 176 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 176 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 176 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 176 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 176 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 176 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 176 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 176 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 176 (assignment_operator -> OREQUAL .)
    INT_CONST_DEC   reduce using rule 176 (assignment_operator -> OREQUAL .)
    INT_CONST_OCT   reduce using rule 176 (assignment_operator -> OREQUAL .)
    INT_CONST_HEX   reduce using rule 176 (assignment_operator -> OREQUAL .)
    FLOAT_CONST     reduce using rule 176 (assignment_operator -> OREQUAL .)
    CHAR_CONST      reduce using rule 176 (assignment_operator -> OREQUAL .)
    WCHAR_CONST     reduce using rule 176 (assignment_operator -> OREQUAL .)
    STRING_LITERAL  reduce using rule 176 (assignment_operator -> OREQUAL .)
    WSTRING_LITERAL reduce using rule 176 (assignment_operator -> OREQUAL .)


state 162

    (168) assignment_operator -> TIMESEQUAL .

    PLUSPLUS        reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_DEC   reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_OCT   reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_HEX   reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    FLOAT_CONST     reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    CHAR_CONST      reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    WCHAR_CONST     reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    STRING_LITERAL  reduce using rule 168 (assignment_operator -> TIMESEQUAL .)
    WSTRING_LITERAL reduce using rule 168 (assignment_operator -> TIMESEQUAL .)


state 163

    (174) assignment_operator -> RSHIFTEQUAL .

    PLUSPLUS        reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 174 (assignment_operator -> RSHIFTEQUAL .)


state 164

    (240) unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LBRACKET        reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LPAREN          reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PERIOD          reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ARROW           reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQUALS          reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OREQUAL         reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    CONDOP          reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMES           reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVIDE          reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MOD             reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUS            reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUS           reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFT          reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFT          reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LT              reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LE              reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GE              reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GT              reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQ              reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    NE              reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    AND             reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OR              reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOR             reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LAND            reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LOR             reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACKET        reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RPAREN          reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COMMA           reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    SEMI            reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COLON           reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACE          reduce using rule 240 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)


state 165

    (206) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (221) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (227) primary_expression -> LPAREN . expression RPAREN
    (129) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    struct_or_union_specifier      shift and go to state 5
    unified_wstring_literal        shift and go to state 87
    type_specifier                 shift and go to state 80
    type_name                      shift and go to state 262
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    struct_or_union                shift and go to state 7
    assignment_expression          shift and go to state 184
    primary_expression             shift and go to state 105
    typedef_name                   shift and go to state 25
    binary_expression              shift and go to state 112
    enum_specifier                 shift and go to state 41
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 185
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 182

state 166

    (205) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 205 (unary_expression -> SIZEOF unary_expression .)


state 167

    (208) unary_operator -> TIMES .

    LPAREN          reduce using rule 208 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 208 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 208 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 208 (unary_operator -> TIMES .)
    AND             reduce using rule 208 (unary_operator -> TIMES .)
    TIMES           reduce using rule 208 (unary_operator -> TIMES .)
    PLUS            reduce using rule 208 (unary_operator -> TIMES .)
    MINUS           reduce using rule 208 (unary_operator -> TIMES .)
    NOT             reduce using rule 208 (unary_operator -> TIMES .)
    LNOT            reduce using rule 208 (unary_operator -> TIMES .)
    ID              reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 208 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 208 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 208 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 208 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 208 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 208 (unary_operator -> TIMES .)


state 168

    (238) unified_string_literal -> unified_string_literal STRING_LITERAL .

    STRING_LITERAL  reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LBRACKET        reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LPAREN          reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PERIOD          reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ARROW           reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSPLUS        reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSMINUS      reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    CONDOP          reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMES           reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVIDE          reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MOD             reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUS            reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUS           reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFT          reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFT          reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LT              reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LE              reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GE              reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GT              reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQ              reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    NE              reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    AND             reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OR              reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOR             reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LAND            reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LOR             reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    SEMI            reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COMMA           reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACKET        reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RPAREN          reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COLON           reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACE          reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQUALS          reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOREQUAL        reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVEQUAL        reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MODEQUAL        reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ANDEQUAL        reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OREQUAL         reduce using rule 238 (unified_string_literal -> unified_string_literal STRING_LITERAL .)


state 169

    (218) postfix_expression -> postfix_expression ARROW . identifier
    (230) identifier -> . ID

    ID              shift and go to state 108

    identifier                     shift and go to state 263

state 170

    (219) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 219 (postfix_expression -> postfix_expression PLUSPLUS .)


state 171

    (217) postfix_expression -> postfix_expression PERIOD . identifier
    (230) identifier -> . ID

    ID              shift and go to state 108

    identifier                     shift and go to state 264

state 172

    (214) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    expression                     shift and go to state 265
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 173

    (215) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (216) postfix_expression -> postfix_expression LPAREN . RPAREN
    (228) argument_expression_list -> . assignment_expression
    (229) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          shift and go to state 267
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 266
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    argument_expression_list       shift and go to state 268
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 174

    (220) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 220 (postfix_expression -> postfix_expression MINUSMINUS .)


state 175

    (103) direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    COLON           reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    CONST           reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RESTRICT        reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    VOLATILE        reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    VOID            reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    CHAR            reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    SHORT           reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    INT             reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LONG            reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    FLOAT           reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    DOUBLE          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    SIGNED          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    UNSIGNED        reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    AUTO            reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    REGISTER        reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    STATIC          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    EXTERN          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    TYPEDEF         reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    INLINE          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    TYPEID          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    ENUM            reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    STRUCT          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    UNION           reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LBRACE          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 103 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)


state 176

    (200) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (221) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (227) primary_expression -> LPAREN . expression RPAREN
    (129) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    struct_or_union_specifier      shift and go to state 5
    unified_wstring_literal        shift and go to state 87
    type_specifier                 shift and go to state 80
    type_name                      shift and go to state 269
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    struct_or_union                shift and go to state 7
    assignment_expression          shift and go to state 184
    primary_expression             shift and go to state 105
    typedef_name                   shift and go to state 25
    binary_expression              shift and go to state 112
    enum_specifier                 shift and go to state 41
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 185
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 182

state 177

    (199) cast_expression -> unary_expression .

    TIMES           reduce using rule 199 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 199 (cast_expression -> unary_expression .)
    MOD             reduce using rule 199 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 199 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 199 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 199 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 199 (cast_expression -> unary_expression .)
    LT              reduce using rule 199 (cast_expression -> unary_expression .)
    LE              reduce using rule 199 (cast_expression -> unary_expression .)
    GE              reduce using rule 199 (cast_expression -> unary_expression .)
    GT              reduce using rule 199 (cast_expression -> unary_expression .)
    EQ              reduce using rule 199 (cast_expression -> unary_expression .)
    NE              reduce using rule 199 (cast_expression -> unary_expression .)
    AND             reduce using rule 199 (cast_expression -> unary_expression .)
    OR              reduce using rule 199 (cast_expression -> unary_expression .)
    XOR             reduce using rule 199 (cast_expression -> unary_expression .)
    LAND            reduce using rule 199 (cast_expression -> unary_expression .)
    LOR             reduce using rule 199 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 199 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 199 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 199 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 199 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 199 (cast_expression -> unary_expression .)
    COLON           reduce using rule 199 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 199 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 199 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 199 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 199 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 199 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 199 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 199 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 199 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 199 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 199 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 199 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 199 (cast_expression -> unary_expression .)


state 178

    (204) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 204 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 204 (unary_expression -> unary_operator cast_expression .)


state 179

    (221) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (227) primary_expression -> LPAREN . expression RPAREN
    (129) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (72) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (73) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    struct_or_union_specifier      shift and go to state 5
    unified_wstring_literal        shift and go to state 87
    type_specifier                 shift and go to state 80
    type_name                      shift and go to state 270
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    struct_or_union                shift and go to state 7
    assignment_expression          shift and go to state 184
    primary_expression             shift and go to state 105
    typedef_name                   shift and go to state 25
    binary_expression              shift and go to state 112
    enum_specifier                 shift and go to state 41
    type_qualifier                 shift and go to state 82
    specifier_qualifier_list       shift and go to state 185
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 182

state 180

    (202) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 202 (unary_expression -> PLUSPLUS unary_expression .)


state 181

    (104) direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SEMI            reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CONST           reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RESTRICT        reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOLATILE        reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOID            reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CHAR            reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SHORT           reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INT             reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LONG            reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    FLOAT           reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    DOUBLE          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SIGNED          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNSIGNED        reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    AUTO            reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    REGISTER        reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STATIC          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EXTERN          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    TYPEDEF         reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INLINE          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    TYPEID          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    ENUM            reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STRUCT          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNION           reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LBRACE          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EQUALS          reduce using rule 104 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)


state 182

    (227) primary_expression -> LPAREN expression . RPAREN
    (162) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 271
    COMMA           shift and go to state 272


state 183

    (221) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE
    (200) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 273


state 184

    (161) expression -> assignment_expression .

    COMMA           reduce using rule 161 (expression -> assignment_expression .)
    SEMI            reduce using rule 161 (expression -> assignment_expression .)
    RPAREN          reduce using rule 161 (expression -> assignment_expression .)
    COLON           reduce using rule 161 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 161 (expression -> assignment_expression .)


state 185

    (129) type_name -> specifier_qualifier_list . abstract_declarator_opt
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (241) empty -> .
    (130) abstract_declarator -> . pointer
    (131) abstract_declarator -> . pointer direct_abstract_declarator
    (132) abstract_declarator -> . direct_abstract_declarator
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer
    (133) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (134) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (135) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (136) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (137) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (138) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (139) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 241 (empty -> .)
    TIMES           shift and go to state 24
    LPAREN          shift and go to state 275
    LBRACKET        shift and go to state 211

    abstract_declarator_opt        shift and go to state 274
    abstract_declarator            shift and go to state 210
    direct_abstract_declarator     shift and go to state 213
    pointer                        shift and go to state 276
    empty                          shift and go to state 215

state 186

    (203) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 203 (unary_expression -> MINUSMINUS unary_expression .)


state 187

    (186) binary_expression -> binary_expression RSHIFT . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 277
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 188

    (198) binary_expression -> binary_expression LOR . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 278
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 189

    (187) binary_expression -> binary_expression LSHIFT . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 279
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 190

    (185) binary_expression -> binary_expression MINUS . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 280
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 191

    (189) binary_expression -> binary_expression LE . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 281
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 192

    (193) binary_expression -> binary_expression NE . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 282
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 193

    (188) binary_expression -> binary_expression LT . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 283
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 194

    (184) binary_expression -> binary_expression PLUS . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 284
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 195

    (191) binary_expression -> binary_expression GT . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 285
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 196

    (196) binary_expression -> binary_expression XOR . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 286
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 197

    (182) binary_expression -> binary_expression DIVIDE . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 287
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 198

    (181) binary_expression -> binary_expression TIMES . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 288
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 199

    (190) binary_expression -> binary_expression GE . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 289
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 200

    (197) binary_expression -> binary_expression LAND . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 290
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 201

    (192) binary_expression -> binary_expression EQ . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 291
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 202

    (194) binary_expression -> binary_expression AND . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 292
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 203

    (179) conditional_expression -> binary_expression CONDOP . expression COLON conditional_expression
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    expression                     shift and go to state 293
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 204

    (195) binary_expression -> binary_expression OR . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 294
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 205

    (183) binary_expression -> binary_expression MOD . binary_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 295
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 206

    (106) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COLON           reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CONST           reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RESTRICT        reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOLATILE        reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SHORT           reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LONG            reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    DOUBLE          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SIGNED          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    UNSIGNED        reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    AUTO            reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    REGISTER        reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    STATIC          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EXTERN          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEDEF         reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INLINE          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEID          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    ENUM            reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    STRUCT          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    UNION           reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 106 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 207

    (105) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RESTRICT        reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INLINE          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 105 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 208

    (102) direct_declarator -> LPAREN . declarator RPAREN
    (133) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (139) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (130) abstract_declarator -> . pointer
    (131) abstract_declarator -> . pointer direct_abstract_declarator
    (132) abstract_declarator -> . direct_abstract_declarator
    (19) parameter_type_list_opt -> . empty
    (20) parameter_type_list_opt -> . parameter_type_list
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer
    (133) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (134) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (135) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (136) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (137) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (138) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (139) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (241) empty -> .
    (111) parameter_type_list -> . parameter_list
    (112) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (113) parameter_list -> . parameter_declaration
    (114) parameter_list -> . parameter_list COMMA parameter_declaration
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    ID              shift and go to state 29
    LPAREN          shift and go to state 208
    TIMES           shift and go to state 24
    LBRACKET        shift and go to state 211
    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    abstract_declarator            shift and go to state 299
    type_specifier                 shift and go to state 12
    pointer                        shift and go to state 214
    parameter_declaration          shift and go to state 121
    empty                          shift and go to state 296
    struct_or_union                shift and go to state 7
    parameter_type_list            shift and go to state 297
    direct_declarator              shift and go to state 22
    declaration_specifiers         shift and go to state 122
    typedef_name                   shift and go to state 25
    parameter_type_list_opt        shift and go to state 298
    parameter_list                 shift and go to state 124
    enum_specifier                 shift and go to state 41
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    declarator                     shift and go to state 48
    direct_abstract_declarator     shift and go to state 213

state 209

    (116) parameter_declaration -> declaration_specifiers abstract_declarator_opt .

    COMMA           reduce using rule 116 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)
    RPAREN          reduce using rule 116 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)


state 210

    (2) abstract_declarator_opt -> abstract_declarator .

    RPAREN          reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)
    COMMA           reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)


state 211

    (135) direct_abstract_declarator -> LBRACKET . assignment_expression_opt RBRACKET
    (137) direct_abstract_declarator -> LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (241) empty -> .
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 301
    RBRACKET        reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 101
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    assignment_expression_opt      shift and go to state 300
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    constant                       shift and go to state 92
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    identifier                     shift and go to state 117
    empty                          shift and go to state 114
    binary_expression              shift and go to state 112

state 212

    (115) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 115 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 115 (parameter_declaration -> declaration_specifiers declarator .)


state 213

    (132) abstract_declarator -> direct_abstract_declarator .
    (134) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (136) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (138) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 132 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 132 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 302
    LPAREN          shift and go to state 303


state 214

    (100) declarator -> pointer . direct_declarator
    (130) abstract_declarator -> pointer .
    (131) abstract_declarator -> pointer . direct_abstract_declarator
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (133) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (134) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (135) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (136) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (137) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (138) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (139) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 130 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 130 (abstract_declarator -> pointer .)
    ID              shift and go to state 29
    LPAREN          shift and go to state 208
    LBRACKET        shift and go to state 211

    direct_declarator              shift and go to state 53
    direct_abstract_declarator     shift and go to state 304

state 215

    (1) abstract_declarator_opt -> empty .

    RPAREN          reduce using rule 1 (abstract_declarator_opt -> empty .)
    COMMA           reduce using rule 1 (abstract_declarator_opt -> empty .)


state 216

    (118) identifier_list -> identifier_list COMMA . identifier
    (230) identifier -> . ID

    ID              shift and go to state 108

    identifier                     shift and go to state 305

state 217

    (112) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (114) parameter_list -> parameter_list COMMA . parameter_declaration
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 306
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 12
    enum_specifier                 shift and go to state 41
    parameter_declaration          shift and go to state 307
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 122
    typedef_name                   shift and go to state 25

state 218

    (93) enum_specifier -> ENUM TYPEID LBRACE enumerator_list . RBRACE
    (95) enumerator_list -> enumerator_list . COMMA
    (96) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 308
    COMMA           shift and go to state 220


state 219

    (91) enum_specifier -> ENUM LBRACE enumerator_list RBRACE .

    CONST           reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RESTRICT        reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INLINE          reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPEID          reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ID              reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 91 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)


state 220

    (95) enumerator_list -> enumerator_list COMMA .
    (96) enumerator_list -> enumerator_list COMMA . enumerator
    (97) enumerator -> . ID
    (98) enumerator -> . ID EQUALS constant_expression

    RBRACE          reduce using rule 95 (enumerator_list -> enumerator_list COMMA .)
    COMMA           reduce using rule 95 (enumerator_list -> enumerator_list COMMA .)
    ID              shift and go to state 129

    enumerator                     shift and go to state 309

state 221

    (98) enumerator -> ID EQUALS . constant_expression
    (177) constant_expression -> . conditional_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 257
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    constant_expression            shift and go to state 310
    primary_expression             shift and go to state 105

state 222

    (92) enum_specifier -> ENUM ID LBRACE enumerator_list . RBRACE
    (95) enumerator_list -> enumerator_list . COMMA
    (96) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 311
    COMMA           shift and go to state 220


state 223

    (69) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 69 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 69 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 224

    (71) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 71 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 71 (init_declarator -> declarator EQUALS initializer .)


state 225

    (119) initializer -> assignment_expression .

    RBRACE          reduce using rule 119 (initializer -> assignment_expression .)
    COMMA           reduce using rule 119 (initializer -> assignment_expression .)
    SEMI            reduce using rule 119 (initializer -> assignment_expression .)


state 226

    (120) initializer -> LBRACE . initializer_list RBRACE
    (121) initializer -> LBRACE . initializer_list COMMA RBRACE
    (122) initializer_list -> . designation_opt initializer
    (123) initializer_list -> . initializer_list COMMA designation_opt initializer
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (241) empty -> .
    (124) designation -> . designator_list EQUALS
    (125) designator_list -> . designator
    (126) designator_list -> . designator_list designator
    (127) designator -> . LBRACKET constant_expression RBRACKET
    (128) designator -> . PERIOD identifier

    LBRACE          reduce using rule 241 (empty -> .)
    PLUSPLUS        reduce using rule 241 (empty -> .)
    MINUSMINUS      reduce using rule 241 (empty -> .)
    SIZEOF          reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    AND             reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    PLUS            reduce using rule 241 (empty -> .)
    MINUS           reduce using rule 241 (empty -> .)
    NOT             reduce using rule 241 (empty -> .)
    LNOT            reduce using rule 241 (empty -> .)
    ID              reduce using rule 241 (empty -> .)
    INT_CONST_DEC   reduce using rule 241 (empty -> .)
    INT_CONST_OCT   reduce using rule 241 (empty -> .)
    INT_CONST_HEX   reduce using rule 241 (empty -> .)
    FLOAT_CONST     reduce using rule 241 (empty -> .)
    CHAR_CONST      reduce using rule 241 (empty -> .)
    WCHAR_CONST     reduce using rule 241 (empty -> .)
    STRING_LITERAL  reduce using rule 241 (empty -> .)
    WSTRING_LITERAL reduce using rule 241 (empty -> .)
    LBRACKET        shift and go to state 315
    PERIOD          shift and go to state 314

    designation                    shift and go to state 312
    designator                     shift and go to state 313
    designation_opt                shift and go to state 316
    initializer_list               shift and go to state 317
    designator_list                shift and go to state 318
    empty                          shift and go to state 319

state 227

    (32) function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .

    PPHASH          reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 32 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)


state 228

    (34) statement -> expression_statement .

    ID              reduce using rule 34 (statement -> expression_statement .)
    CASE            reduce using rule 34 (statement -> expression_statement .)
    DEFAULT         reduce using rule 34 (statement -> expression_statement .)
    LBRACE          reduce using rule 34 (statement -> expression_statement .)
    IF              reduce using rule 34 (statement -> expression_statement .)
    SWITCH          reduce using rule 34 (statement -> expression_statement .)
    WHILE           reduce using rule 34 (statement -> expression_statement .)
    DO              reduce using rule 34 (statement -> expression_statement .)
    FOR             reduce using rule 34 (statement -> expression_statement .)
    GOTO            reduce using rule 34 (statement -> expression_statement .)
    BREAK           reduce using rule 34 (statement -> expression_statement .)
    CONTINUE        reduce using rule 34 (statement -> expression_statement .)
    RETURN          reduce using rule 34 (statement -> expression_statement .)
    CONST           reduce using rule 34 (statement -> expression_statement .)
    RESTRICT        reduce using rule 34 (statement -> expression_statement .)
    VOLATILE        reduce using rule 34 (statement -> expression_statement .)
    VOID            reduce using rule 34 (statement -> expression_statement .)
    CHAR            reduce using rule 34 (statement -> expression_statement .)
    SHORT           reduce using rule 34 (statement -> expression_statement .)
    INT             reduce using rule 34 (statement -> expression_statement .)
    LONG            reduce using rule 34 (statement -> expression_statement .)
    FLOAT           reduce using rule 34 (statement -> expression_statement .)
    DOUBLE          reduce using rule 34 (statement -> expression_statement .)
    SIGNED          reduce using rule 34 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 34 (statement -> expression_statement .)
    AUTO            reduce using rule 34 (statement -> expression_statement .)
    REGISTER        reduce using rule 34 (statement -> expression_statement .)
    STATIC          reduce using rule 34 (statement -> expression_statement .)
    EXTERN          reduce using rule 34 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 34 (statement -> expression_statement .)
    INLINE          reduce using rule 34 (statement -> expression_statement .)
    TYPEID          reduce using rule 34 (statement -> expression_statement .)
    ENUM            reduce using rule 34 (statement -> expression_statement .)
    STRUCT          reduce using rule 34 (statement -> expression_statement .)
    UNION           reduce using rule 34 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 34 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 34 (statement -> expression_statement .)
    SIZEOF          reduce using rule 34 (statement -> expression_statement .)
    LPAREN          reduce using rule 34 (statement -> expression_statement .)
    AND             reduce using rule 34 (statement -> expression_statement .)
    TIMES           reduce using rule 34 (statement -> expression_statement .)
    PLUS            reduce using rule 34 (statement -> expression_statement .)
    MINUS           reduce using rule 34 (statement -> expression_statement .)
    NOT             reduce using rule 34 (statement -> expression_statement .)
    LNOT            reduce using rule 34 (statement -> expression_statement .)
    INT_CONST_DEC   reduce using rule 34 (statement -> expression_statement .)
    INT_CONST_OCT   reduce using rule 34 (statement -> expression_statement .)
    INT_CONST_HEX   reduce using rule 34 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 34 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 34 (statement -> expression_statement .)
    WCHAR_CONST     reduce using rule 34 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 34 (statement -> expression_statement .)
    WSTRING_LITERAL reduce using rule 34 (statement -> expression_statement .)
    SEMI            reduce using rule 34 (statement -> expression_statement .)
    RBRACE          reduce using rule 34 (statement -> expression_statement .)
    ELSE            reduce using rule 34 (statement -> expression_statement .)


state 229

    (37) statement -> iteration_statement .

    ID              reduce using rule 37 (statement -> iteration_statement .)
    CASE            reduce using rule 37 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 37 (statement -> iteration_statement .)
    LBRACE          reduce using rule 37 (statement -> iteration_statement .)
    IF              reduce using rule 37 (statement -> iteration_statement .)
    SWITCH          reduce using rule 37 (statement -> iteration_statement .)
    WHILE           reduce using rule 37 (statement -> iteration_statement .)
    DO              reduce using rule 37 (statement -> iteration_statement .)
    FOR             reduce using rule 37 (statement -> iteration_statement .)
    GOTO            reduce using rule 37 (statement -> iteration_statement .)
    BREAK           reduce using rule 37 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 37 (statement -> iteration_statement .)
    RETURN          reduce using rule 37 (statement -> iteration_statement .)
    CONST           reduce using rule 37 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 37 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 37 (statement -> iteration_statement .)
    VOID            reduce using rule 37 (statement -> iteration_statement .)
    CHAR            reduce using rule 37 (statement -> iteration_statement .)
    SHORT           reduce using rule 37 (statement -> iteration_statement .)
    INT             reduce using rule 37 (statement -> iteration_statement .)
    LONG            reduce using rule 37 (statement -> iteration_statement .)
    FLOAT           reduce using rule 37 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 37 (statement -> iteration_statement .)
    SIGNED          reduce using rule 37 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 37 (statement -> iteration_statement .)
    AUTO            reduce using rule 37 (statement -> iteration_statement .)
    REGISTER        reduce using rule 37 (statement -> iteration_statement .)
    STATIC          reduce using rule 37 (statement -> iteration_statement .)
    EXTERN          reduce using rule 37 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 37 (statement -> iteration_statement .)
    INLINE          reduce using rule 37 (statement -> iteration_statement .)
    TYPEID          reduce using rule 37 (statement -> iteration_statement .)
    ENUM            reduce using rule 37 (statement -> iteration_statement .)
    STRUCT          reduce using rule 37 (statement -> iteration_statement .)
    UNION           reduce using rule 37 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 37 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 37 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 37 (statement -> iteration_statement .)
    LPAREN          reduce using rule 37 (statement -> iteration_statement .)
    AND             reduce using rule 37 (statement -> iteration_statement .)
    TIMES           reduce using rule 37 (statement -> iteration_statement .)
    PLUS            reduce using rule 37 (statement -> iteration_statement .)
    MINUS           reduce using rule 37 (statement -> iteration_statement .)
    NOT             reduce using rule 37 (statement -> iteration_statement .)
    LNOT            reduce using rule 37 (statement -> iteration_statement .)
    INT_CONST_DEC   reduce using rule 37 (statement -> iteration_statement .)
    INT_CONST_OCT   reduce using rule 37 (statement -> iteration_statement .)
    INT_CONST_HEX   reduce using rule 37 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 37 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 37 (statement -> iteration_statement .)
    WCHAR_CONST     reduce using rule 37 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 37 (statement -> iteration_statement .)
    WSTRING_LITERAL reduce using rule 37 (statement -> iteration_statement .)
    SEMI            reduce using rule 37 (statement -> iteration_statement .)
    RBRACE          reduce using rule 37 (statement -> iteration_statement .)
    ELSE            reduce using rule 37 (statement -> iteration_statement .)


state 230

    (155) jump_statement -> GOTO . ID SEMI

    ID              shift and go to state 320


state 231

    (160) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 321


state 232

    (33) statement -> labeled_statement .

    ID              reduce using rule 33 (statement -> labeled_statement .)
    CASE            reduce using rule 33 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 33 (statement -> labeled_statement .)
    LBRACE          reduce using rule 33 (statement -> labeled_statement .)
    IF              reduce using rule 33 (statement -> labeled_statement .)
    SWITCH          reduce using rule 33 (statement -> labeled_statement .)
    WHILE           reduce using rule 33 (statement -> labeled_statement .)
    DO              reduce using rule 33 (statement -> labeled_statement .)
    FOR             reduce using rule 33 (statement -> labeled_statement .)
    GOTO            reduce using rule 33 (statement -> labeled_statement .)
    BREAK           reduce using rule 33 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 33 (statement -> labeled_statement .)
    RETURN          reduce using rule 33 (statement -> labeled_statement .)
    CONST           reduce using rule 33 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 33 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 33 (statement -> labeled_statement .)
    VOID            reduce using rule 33 (statement -> labeled_statement .)
    CHAR            reduce using rule 33 (statement -> labeled_statement .)
    SHORT           reduce using rule 33 (statement -> labeled_statement .)
    INT             reduce using rule 33 (statement -> labeled_statement .)
    LONG            reduce using rule 33 (statement -> labeled_statement .)
    FLOAT           reduce using rule 33 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 33 (statement -> labeled_statement .)
    SIGNED          reduce using rule 33 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 33 (statement -> labeled_statement .)
    AUTO            reduce using rule 33 (statement -> labeled_statement .)
    REGISTER        reduce using rule 33 (statement -> labeled_statement .)
    STATIC          reduce using rule 33 (statement -> labeled_statement .)
    EXTERN          reduce using rule 33 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 33 (statement -> labeled_statement .)
    INLINE          reduce using rule 33 (statement -> labeled_statement .)
    TYPEID          reduce using rule 33 (statement -> labeled_statement .)
    ENUM            reduce using rule 33 (statement -> labeled_statement .)
    STRUCT          reduce using rule 33 (statement -> labeled_statement .)
    UNION           reduce using rule 33 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 33 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 33 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 33 (statement -> labeled_statement .)
    LPAREN          reduce using rule 33 (statement -> labeled_statement .)
    AND             reduce using rule 33 (statement -> labeled_statement .)
    TIMES           reduce using rule 33 (statement -> labeled_statement .)
    PLUS            reduce using rule 33 (statement -> labeled_statement .)
    MINUS           reduce using rule 33 (statement -> labeled_statement .)
    NOT             reduce using rule 33 (statement -> labeled_statement .)
    LNOT            reduce using rule 33 (statement -> labeled_statement .)
    INT_CONST_DEC   reduce using rule 33 (statement -> labeled_statement .)
    INT_CONST_OCT   reduce using rule 33 (statement -> labeled_statement .)
    INT_CONST_HEX   reduce using rule 33 (statement -> labeled_statement .)
    FLOAT_CONST     reduce using rule 33 (statement -> labeled_statement .)
    CHAR_CONST      reduce using rule 33 (statement -> labeled_statement .)
    WCHAR_CONST     reduce using rule 33 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 33 (statement -> labeled_statement .)
    WSTRING_LITERAL reduce using rule 33 (statement -> labeled_statement .)
    SEMI            reduce using rule 33 (statement -> labeled_statement .)
    RBRACE          reduce using rule 33 (statement -> labeled_statement .)
    ELSE            reduce using rule 33 (statement -> labeled_statement .)


state 233

    (158) jump_statement -> RETURN . expression SEMI
    (159) jump_statement -> RETURN . SEMI
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            shift and go to state 322
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    expression                     shift and go to state 323
    unary_operator                 shift and go to state 99
    assignment_expression          shift and go to state 184

state 234

    (35) statement -> compound_statement .

    ID              reduce using rule 35 (statement -> compound_statement .)
    CASE            reduce using rule 35 (statement -> compound_statement .)
    DEFAULT         reduce using rule 35 (statement -> compound_statement .)
    LBRACE          reduce using rule 35 (statement -> compound_statement .)
    IF              reduce using rule 35 (statement -> compound_statement .)
    SWITCH          reduce using rule 35 (statement -> compound_statement .)
    WHILE           reduce using rule 35 (statement -> compound_statement .)
    DO              reduce using rule 35 (statement -> compound_statement .)
    FOR             reduce using rule 35 (statement -> compound_statement .)
    GOTO            reduce using rule 35 (statement -> compound_statement .)
    BREAK           reduce using rule 35 (statement -> compound_statement .)
    CONTINUE        reduce using rule 35 (statement -> compound_statement .)
    RETURN          reduce using rule 35 (statement -> compound_statement .)
    CONST           reduce using rule 35 (statement -> compound_statement .)
    RESTRICT        reduce using rule 35 (statement -> compound_statement .)
    VOLATILE        reduce using rule 35 (statement -> compound_statement .)
    VOID            reduce using rule 35 (statement -> compound_statement .)
    CHAR            reduce using rule 35 (statement -> compound_statement .)
    SHORT           reduce using rule 35 (statement -> compound_statement .)
    INT             reduce using rule 35 (statement -> compound_statement .)
    LONG            reduce using rule 35 (statement -> compound_statement .)
    FLOAT           reduce using rule 35 (statement -> compound_statement .)
    DOUBLE          reduce using rule 35 (statement -> compound_statement .)
    SIGNED          reduce using rule 35 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 35 (statement -> compound_statement .)
    AUTO            reduce using rule 35 (statement -> compound_statement .)
    REGISTER        reduce using rule 35 (statement -> compound_statement .)
    STATIC          reduce using rule 35 (statement -> compound_statement .)
    EXTERN          reduce using rule 35 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 35 (statement -> compound_statement .)
    INLINE          reduce using rule 35 (statement -> compound_statement .)
    TYPEID          reduce using rule 35 (statement -> compound_statement .)
    ENUM            reduce using rule 35 (statement -> compound_statement .)
    STRUCT          reduce using rule 35 (statement -> compound_statement .)
    UNION           reduce using rule 35 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 35 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 35 (statement -> compound_statement .)
    SIZEOF          reduce using rule 35 (statement -> compound_statement .)
    LPAREN          reduce using rule 35 (statement -> compound_statement .)
    AND             reduce using rule 35 (statement -> compound_statement .)
    TIMES           reduce using rule 35 (statement -> compound_statement .)
    PLUS            reduce using rule 35 (statement -> compound_statement .)
    MINUS           reduce using rule 35 (statement -> compound_statement .)
    NOT             reduce using rule 35 (statement -> compound_statement .)
    LNOT            reduce using rule 35 (statement -> compound_statement .)
    INT_CONST_DEC   reduce using rule 35 (statement -> compound_statement .)
    INT_CONST_OCT   reduce using rule 35 (statement -> compound_statement .)
    INT_CONST_HEX   reduce using rule 35 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 35 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 35 (statement -> compound_statement .)
    WCHAR_CONST     reduce using rule 35 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 35 (statement -> compound_statement .)
    WSTRING_LITERAL reduce using rule 35 (statement -> compound_statement .)
    SEMI            reduce using rule 35 (statement -> compound_statement .)
    RBRACE          reduce using rule 35 (statement -> compound_statement .)
    ELSE            reduce using rule 35 (statement -> compound_statement .)


state 235

    (153) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 324


state 236

    (157) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 325


state 237

    (14) expression_opt -> expression .
    (162) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 14 (expression_opt -> expression .)
    RPAREN          reduce using rule 14 (expression_opt -> expression .)
    COMMA           shift and go to state 272


state 238

    (147) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 326


state 239

    (151) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 327


state 240

    (146) labeled_statement -> CASE . constant_expression COLON statement
    (177) constant_expression -> . conditional_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 257
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    constant_expression            shift and go to state 328
    primary_expression             shift and go to state 105

state 241

    (6) block_item_list_opt -> block_item_list .
    (143) block_item_list -> block_item_list . block_item
    (140) block_item -> . declaration
    (141) block_item -> . statement
    (40) declaration -> . decl_body SEMI
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (39) decl_body -> . declaration_specifiers init_declarator_list_opt
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RBRACE          reduce using rule 6 (block_item_list_opt -> block_item_list .)
    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    SEMI            reduce using rule 241 (empty -> .)
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    storage_class_specifier        shift and go to state 1
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    struct_or_union_specifier      shift and go to state 5
    unified_wstring_literal        shift and go to state 87
    type_specifier                 shift and go to state 12
    compound_statement             shift and go to state 234
    iteration_statement            shift and go to state 229
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    typedef_name                   shift and go to state 25
    statement                      shift and go to state 243
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 98
    struct_or_union                shift and go to state 7
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    declaration_specifiers         shift and go to state 73
    declaration                    shift and go to state 244
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    enum_specifier                 shift and go to state 41
    decl_body                      shift and go to state 37
    type_qualifier                 shift and go to state 38
    labeled_statement              shift and go to state 232
    function_specifier             shift and go to state 40
    block_item                     shift and go to state 329
    empty                          shift and go to state 330
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 242

    (150) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 331


state 243

    (141) block_item -> statement .

    ID              reduce using rule 141 (block_item -> statement .)
    CASE            reduce using rule 141 (block_item -> statement .)
    DEFAULT         reduce using rule 141 (block_item -> statement .)
    LBRACE          reduce using rule 141 (block_item -> statement .)
    IF              reduce using rule 141 (block_item -> statement .)
    SWITCH          reduce using rule 141 (block_item -> statement .)
    WHILE           reduce using rule 141 (block_item -> statement .)
    DO              reduce using rule 141 (block_item -> statement .)
    FOR             reduce using rule 141 (block_item -> statement .)
    GOTO            reduce using rule 141 (block_item -> statement .)
    BREAK           reduce using rule 141 (block_item -> statement .)
    CONTINUE        reduce using rule 141 (block_item -> statement .)
    RETURN          reduce using rule 141 (block_item -> statement .)
    CONST           reduce using rule 141 (block_item -> statement .)
    RESTRICT        reduce using rule 141 (block_item -> statement .)
    VOLATILE        reduce using rule 141 (block_item -> statement .)
    VOID            reduce using rule 141 (block_item -> statement .)
    CHAR            reduce using rule 141 (block_item -> statement .)
    SHORT           reduce using rule 141 (block_item -> statement .)
    INT             reduce using rule 141 (block_item -> statement .)
    LONG            reduce using rule 141 (block_item -> statement .)
    FLOAT           reduce using rule 141 (block_item -> statement .)
    DOUBLE          reduce using rule 141 (block_item -> statement .)
    SIGNED          reduce using rule 141 (block_item -> statement .)
    UNSIGNED        reduce using rule 141 (block_item -> statement .)
    AUTO            reduce using rule 141 (block_item -> statement .)
    REGISTER        reduce using rule 141 (block_item -> statement .)
    STATIC          reduce using rule 141 (block_item -> statement .)
    EXTERN          reduce using rule 141 (block_item -> statement .)
    TYPEDEF         reduce using rule 141 (block_item -> statement .)
    INLINE          reduce using rule 141 (block_item -> statement .)
    TYPEID          reduce using rule 141 (block_item -> statement .)
    ENUM            reduce using rule 141 (block_item -> statement .)
    STRUCT          reduce using rule 141 (block_item -> statement .)
    UNION           reduce using rule 141 (block_item -> statement .)
    PLUSPLUS        reduce using rule 141 (block_item -> statement .)
    MINUSMINUS      reduce using rule 141 (block_item -> statement .)
    SIZEOF          reduce using rule 141 (block_item -> statement .)
    LPAREN          reduce using rule 141 (block_item -> statement .)
    AND             reduce using rule 141 (block_item -> statement .)
    TIMES           reduce using rule 141 (block_item -> statement .)
    PLUS            reduce using rule 141 (block_item -> statement .)
    MINUS           reduce using rule 141 (block_item -> statement .)
    NOT             reduce using rule 141 (block_item -> statement .)
    LNOT            reduce using rule 141 (block_item -> statement .)
    INT_CONST_DEC   reduce using rule 141 (block_item -> statement .)
    INT_CONST_OCT   reduce using rule 141 (block_item -> statement .)
    INT_CONST_HEX   reduce using rule 141 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 141 (block_item -> statement .)
    CHAR_CONST      reduce using rule 141 (block_item -> statement .)
    WCHAR_CONST     reduce using rule 141 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 141 (block_item -> statement .)
    WSTRING_LITERAL reduce using rule 141 (block_item -> statement .)
    SEMI            reduce using rule 141 (block_item -> statement .)
    RBRACE          reduce using rule 141 (block_item -> statement .)


state 244

    (140) block_item -> declaration .

    ID              reduce using rule 140 (block_item -> declaration .)
    CASE            reduce using rule 140 (block_item -> declaration .)
    DEFAULT         reduce using rule 140 (block_item -> declaration .)
    LBRACE          reduce using rule 140 (block_item -> declaration .)
    IF              reduce using rule 140 (block_item -> declaration .)
    SWITCH          reduce using rule 140 (block_item -> declaration .)
    WHILE           reduce using rule 140 (block_item -> declaration .)
    DO              reduce using rule 140 (block_item -> declaration .)
    FOR             reduce using rule 140 (block_item -> declaration .)
    GOTO            reduce using rule 140 (block_item -> declaration .)
    BREAK           reduce using rule 140 (block_item -> declaration .)
    CONTINUE        reduce using rule 140 (block_item -> declaration .)
    RETURN          reduce using rule 140 (block_item -> declaration .)
    CONST           reduce using rule 140 (block_item -> declaration .)
    RESTRICT        reduce using rule 140 (block_item -> declaration .)
    VOLATILE        reduce using rule 140 (block_item -> declaration .)
    VOID            reduce using rule 140 (block_item -> declaration .)
    CHAR            reduce using rule 140 (block_item -> declaration .)
    SHORT           reduce using rule 140 (block_item -> declaration .)
    INT             reduce using rule 140 (block_item -> declaration .)
    LONG            reduce using rule 140 (block_item -> declaration .)
    FLOAT           reduce using rule 140 (block_item -> declaration .)
    DOUBLE          reduce using rule 140 (block_item -> declaration .)
    SIGNED          reduce using rule 140 (block_item -> declaration .)
    UNSIGNED        reduce using rule 140 (block_item -> declaration .)
    AUTO            reduce using rule 140 (block_item -> declaration .)
    REGISTER        reduce using rule 140 (block_item -> declaration .)
    STATIC          reduce using rule 140 (block_item -> declaration .)
    EXTERN          reduce using rule 140 (block_item -> declaration .)
    TYPEDEF         reduce using rule 140 (block_item -> declaration .)
    INLINE          reduce using rule 140 (block_item -> declaration .)
    TYPEID          reduce using rule 140 (block_item -> declaration .)
    ENUM            reduce using rule 140 (block_item -> declaration .)
    STRUCT          reduce using rule 140 (block_item -> declaration .)
    UNION           reduce using rule 140 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 140 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 140 (block_item -> declaration .)
    SIZEOF          reduce using rule 140 (block_item -> declaration .)
    LPAREN          reduce using rule 140 (block_item -> declaration .)
    AND             reduce using rule 140 (block_item -> declaration .)
    TIMES           reduce using rule 140 (block_item -> declaration .)
    PLUS            reduce using rule 140 (block_item -> declaration .)
    MINUS           reduce using rule 140 (block_item -> declaration .)
    NOT             reduce using rule 140 (block_item -> declaration .)
    LNOT            reduce using rule 140 (block_item -> declaration .)
    INT_CONST_DEC   reduce using rule 140 (block_item -> declaration .)
    INT_CONST_OCT   reduce using rule 140 (block_item -> declaration .)
    INT_CONST_HEX   reduce using rule 140 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 140 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 140 (block_item -> declaration .)
    WCHAR_CONST     reduce using rule 140 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 140 (block_item -> declaration .)
    WSTRING_LITERAL reduce using rule 140 (block_item -> declaration .)
    SEMI            reduce using rule 140 (block_item -> declaration .)
    RBRACE          reduce using rule 140 (block_item -> declaration .)


state 245

    (38) statement -> jump_statement .

    ID              reduce using rule 38 (statement -> jump_statement .)
    CASE            reduce using rule 38 (statement -> jump_statement .)
    DEFAULT         reduce using rule 38 (statement -> jump_statement .)
    LBRACE          reduce using rule 38 (statement -> jump_statement .)
    IF              reduce using rule 38 (statement -> jump_statement .)
    SWITCH          reduce using rule 38 (statement -> jump_statement .)
    WHILE           reduce using rule 38 (statement -> jump_statement .)
    DO              reduce using rule 38 (statement -> jump_statement .)
    FOR             reduce using rule 38 (statement -> jump_statement .)
    GOTO            reduce using rule 38 (statement -> jump_statement .)
    BREAK           reduce using rule 38 (statement -> jump_statement .)
    CONTINUE        reduce using rule 38 (statement -> jump_statement .)
    RETURN          reduce using rule 38 (statement -> jump_statement .)
    CONST           reduce using rule 38 (statement -> jump_statement .)
    RESTRICT        reduce using rule 38 (statement -> jump_statement .)
    VOLATILE        reduce using rule 38 (statement -> jump_statement .)
    VOID            reduce using rule 38 (statement -> jump_statement .)
    CHAR            reduce using rule 38 (statement -> jump_statement .)
    SHORT           reduce using rule 38 (statement -> jump_statement .)
    INT             reduce using rule 38 (statement -> jump_statement .)
    LONG            reduce using rule 38 (statement -> jump_statement .)
    FLOAT           reduce using rule 38 (statement -> jump_statement .)
    DOUBLE          reduce using rule 38 (statement -> jump_statement .)
    SIGNED          reduce using rule 38 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 38 (statement -> jump_statement .)
    AUTO            reduce using rule 38 (statement -> jump_statement .)
    REGISTER        reduce using rule 38 (statement -> jump_statement .)
    STATIC          reduce using rule 38 (statement -> jump_statement .)
    EXTERN          reduce using rule 38 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 38 (statement -> jump_statement .)
    INLINE          reduce using rule 38 (statement -> jump_statement .)
    TYPEID          reduce using rule 38 (statement -> jump_statement .)
    ENUM            reduce using rule 38 (statement -> jump_statement .)
    STRUCT          reduce using rule 38 (statement -> jump_statement .)
    UNION           reduce using rule 38 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 38 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 38 (statement -> jump_statement .)
    SIZEOF          reduce using rule 38 (statement -> jump_statement .)
    LPAREN          reduce using rule 38 (statement -> jump_statement .)
    AND             reduce using rule 38 (statement -> jump_statement .)
    TIMES           reduce using rule 38 (statement -> jump_statement .)
    PLUS            reduce using rule 38 (statement -> jump_statement .)
    MINUS           reduce using rule 38 (statement -> jump_statement .)
    NOT             reduce using rule 38 (statement -> jump_statement .)
    LNOT            reduce using rule 38 (statement -> jump_statement .)
    INT_CONST_DEC   reduce using rule 38 (statement -> jump_statement .)
    INT_CONST_OCT   reduce using rule 38 (statement -> jump_statement .)
    INT_CONST_HEX   reduce using rule 38 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 38 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 38 (statement -> jump_statement .)
    WCHAR_CONST     reduce using rule 38 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 38 (statement -> jump_statement .)
    WSTRING_LITERAL reduce using rule 38 (statement -> jump_statement .)
    SEMI            reduce using rule 38 (statement -> jump_statement .)
    RBRACE          reduce using rule 38 (statement -> jump_statement .)
    ELSE            reduce using rule 38 (statement -> jump_statement .)


state 246

    (156) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 332


state 247

    (142) block_item_list -> block_item .

    ID              reduce using rule 142 (block_item_list -> block_item .)
    CASE            reduce using rule 142 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 142 (block_item_list -> block_item .)
    LBRACE          reduce using rule 142 (block_item_list -> block_item .)
    IF              reduce using rule 142 (block_item_list -> block_item .)
    SWITCH          reduce using rule 142 (block_item_list -> block_item .)
    WHILE           reduce using rule 142 (block_item_list -> block_item .)
    DO              reduce using rule 142 (block_item_list -> block_item .)
    FOR             reduce using rule 142 (block_item_list -> block_item .)
    GOTO            reduce using rule 142 (block_item_list -> block_item .)
    BREAK           reduce using rule 142 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 142 (block_item_list -> block_item .)
    RETURN          reduce using rule 142 (block_item_list -> block_item .)
    CONST           reduce using rule 142 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 142 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 142 (block_item_list -> block_item .)
    VOID            reduce using rule 142 (block_item_list -> block_item .)
    CHAR            reduce using rule 142 (block_item_list -> block_item .)
    SHORT           reduce using rule 142 (block_item_list -> block_item .)
    INT             reduce using rule 142 (block_item_list -> block_item .)
    LONG            reduce using rule 142 (block_item_list -> block_item .)
    FLOAT           reduce using rule 142 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 142 (block_item_list -> block_item .)
    SIGNED          reduce using rule 142 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 142 (block_item_list -> block_item .)
    AUTO            reduce using rule 142 (block_item_list -> block_item .)
    REGISTER        reduce using rule 142 (block_item_list -> block_item .)
    STATIC          reduce using rule 142 (block_item_list -> block_item .)
    EXTERN          reduce using rule 142 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 142 (block_item_list -> block_item .)
    INLINE          reduce using rule 142 (block_item_list -> block_item .)
    TYPEID          reduce using rule 142 (block_item_list -> block_item .)
    ENUM            reduce using rule 142 (block_item_list -> block_item .)
    STRUCT          reduce using rule 142 (block_item_list -> block_item .)
    UNION           reduce using rule 142 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 142 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 142 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 142 (block_item_list -> block_item .)
    LPAREN          reduce using rule 142 (block_item_list -> block_item .)
    AND             reduce using rule 142 (block_item_list -> block_item .)
    TIMES           reduce using rule 142 (block_item_list -> block_item .)
    PLUS            reduce using rule 142 (block_item_list -> block_item .)
    MINUS           reduce using rule 142 (block_item_list -> block_item .)
    NOT             reduce using rule 142 (block_item_list -> block_item .)
    LNOT            reduce using rule 142 (block_item_list -> block_item .)
    INT_CONST_DEC   reduce using rule 142 (block_item_list -> block_item .)
    INT_CONST_OCT   reduce using rule 142 (block_item_list -> block_item .)
    INT_CONST_HEX   reduce using rule 142 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 142 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 142 (block_item_list -> block_item .)
    WCHAR_CONST     reduce using rule 142 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 142 (block_item_list -> block_item .)
    WSTRING_LITERAL reduce using rule 142 (block_item_list -> block_item .)
    SEMI            reduce using rule 142 (block_item_list -> block_item .)
    RBRACE          reduce using rule 142 (block_item_list -> block_item .)


state 248

    (5) block_item_list_opt -> empty .
    (13) expression_opt -> empty .

    RBRACE          reduce using rule 5 (block_item_list_opt -> empty .)
    SEMI            reduce using rule 13 (expression_opt -> empty .)


state 249

    (152) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 333
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 250

    (36) statement -> selection_statement .

    ID              reduce using rule 36 (statement -> selection_statement .)
    CASE            reduce using rule 36 (statement -> selection_statement .)
    DEFAULT         reduce using rule 36 (statement -> selection_statement .)
    LBRACE          reduce using rule 36 (statement -> selection_statement .)
    IF              reduce using rule 36 (statement -> selection_statement .)
    SWITCH          reduce using rule 36 (statement -> selection_statement .)
    WHILE           reduce using rule 36 (statement -> selection_statement .)
    DO              reduce using rule 36 (statement -> selection_statement .)
    FOR             reduce using rule 36 (statement -> selection_statement .)
    GOTO            reduce using rule 36 (statement -> selection_statement .)
    BREAK           reduce using rule 36 (statement -> selection_statement .)
    CONTINUE        reduce using rule 36 (statement -> selection_statement .)
    RETURN          reduce using rule 36 (statement -> selection_statement .)
    CONST           reduce using rule 36 (statement -> selection_statement .)
    RESTRICT        reduce using rule 36 (statement -> selection_statement .)
    VOLATILE        reduce using rule 36 (statement -> selection_statement .)
    VOID            reduce using rule 36 (statement -> selection_statement .)
    CHAR            reduce using rule 36 (statement -> selection_statement .)
    SHORT           reduce using rule 36 (statement -> selection_statement .)
    INT             reduce using rule 36 (statement -> selection_statement .)
    LONG            reduce using rule 36 (statement -> selection_statement .)
    FLOAT           reduce using rule 36 (statement -> selection_statement .)
    DOUBLE          reduce using rule 36 (statement -> selection_statement .)
    SIGNED          reduce using rule 36 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 36 (statement -> selection_statement .)
    AUTO            reduce using rule 36 (statement -> selection_statement .)
    REGISTER        reduce using rule 36 (statement -> selection_statement .)
    STATIC          reduce using rule 36 (statement -> selection_statement .)
    EXTERN          reduce using rule 36 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 36 (statement -> selection_statement .)
    INLINE          reduce using rule 36 (statement -> selection_statement .)
    TYPEID          reduce using rule 36 (statement -> selection_statement .)
    ENUM            reduce using rule 36 (statement -> selection_statement .)
    STRUCT          reduce using rule 36 (statement -> selection_statement .)
    UNION           reduce using rule 36 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 36 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 36 (statement -> selection_statement .)
    SIZEOF          reduce using rule 36 (statement -> selection_statement .)
    LPAREN          reduce using rule 36 (statement -> selection_statement .)
    AND             reduce using rule 36 (statement -> selection_statement .)
    TIMES           reduce using rule 36 (statement -> selection_statement .)
    PLUS            reduce using rule 36 (statement -> selection_statement .)
    MINUS           reduce using rule 36 (statement -> selection_statement .)
    NOT             reduce using rule 36 (statement -> selection_statement .)
    LNOT            reduce using rule 36 (statement -> selection_statement .)
    INT_CONST_DEC   reduce using rule 36 (statement -> selection_statement .)
    INT_CONST_OCT   reduce using rule 36 (statement -> selection_statement .)
    INT_CONST_HEX   reduce using rule 36 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 36 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 36 (statement -> selection_statement .)
    WCHAR_CONST     reduce using rule 36 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 36 (statement -> selection_statement .)
    WSTRING_LITERAL reduce using rule 36 (statement -> selection_statement .)
    SEMI            reduce using rule 36 (statement -> selection_statement .)
    RBRACE          reduce using rule 36 (statement -> selection_statement .)
    ELSE            reduce using rule 36 (statement -> selection_statement .)


state 251

    (144) compound_statement -> LBRACE block_item_list_opt . RBRACE

    RBRACE          shift and go to state 334


state 252

    (145) labeled_statement -> ID . COLON statement
    (230) identifier -> ID .

    COLON           shift and go to state 335
    LBRACKET        reduce using rule 230 (identifier -> ID .)
    LPAREN          reduce using rule 230 (identifier -> ID .)
    PERIOD          reduce using rule 230 (identifier -> ID .)
    ARROW           reduce using rule 230 (identifier -> ID .)
    PLUSPLUS        reduce using rule 230 (identifier -> ID .)
    MINUSMINUS      reduce using rule 230 (identifier -> ID .)
    EQUALS          reduce using rule 230 (identifier -> ID .)
    XOREQUAL        reduce using rule 230 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 230 (identifier -> ID .)
    DIVEQUAL        reduce using rule 230 (identifier -> ID .)
    MODEQUAL        reduce using rule 230 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 230 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 230 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 230 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 230 (identifier -> ID .)
    ANDEQUAL        reduce using rule 230 (identifier -> ID .)
    OREQUAL         reduce using rule 230 (identifier -> ID .)
    CONDOP          reduce using rule 230 (identifier -> ID .)
    TIMES           reduce using rule 230 (identifier -> ID .)
    DIVIDE          reduce using rule 230 (identifier -> ID .)
    MOD             reduce using rule 230 (identifier -> ID .)
    PLUS            reduce using rule 230 (identifier -> ID .)
    MINUS           reduce using rule 230 (identifier -> ID .)
    RSHIFT          reduce using rule 230 (identifier -> ID .)
    LSHIFT          reduce using rule 230 (identifier -> ID .)
    LT              reduce using rule 230 (identifier -> ID .)
    LE              reduce using rule 230 (identifier -> ID .)
    GE              reduce using rule 230 (identifier -> ID .)
    GT              reduce using rule 230 (identifier -> ID .)
    EQ              reduce using rule 230 (identifier -> ID .)
    NE              reduce using rule 230 (identifier -> ID .)
    AND             reduce using rule 230 (identifier -> ID .)
    OR              reduce using rule 230 (identifier -> ID .)
    XOR             reduce using rule 230 (identifier -> ID .)
    LAND            reduce using rule 230 (identifier -> ID .)
    LOR             reduce using rule 230 (identifier -> ID .)
    COMMA           reduce using rule 230 (identifier -> ID .)
    SEMI            reduce using rule 230 (identifier -> ID .)


state 253

    (148) selection_statement -> IF . LPAREN expression RPAREN statement
    (149) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 336


state 254

    (78) struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .

    CONST           reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    RESTRICT        reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    INLINE          reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    TYPEID          reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    ID              reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 78 (struct_or_union_specifier -> struct_or_union TYPEID LBRACE struct_declaration_list RBRACE .)


state 255

    (87) struct_declarator -> declarator COLON . constant_expression
    (177) constant_expression -> . conditional_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 257
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    constant_expression            shift and go to state 337
    primary_expression             shift and go to state 105

state 256

    (88) struct_declarator -> COLON constant_expression .

    SEMI            reduce using rule 88 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 88 (struct_declarator -> COLON constant_expression .)


state 257

    (177) constant_expression -> conditional_expression .

    COLON           reduce using rule 177 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 177 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 177 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 177 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 177 (constant_expression -> conditional_expression .)


state 258

    (85) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (86) struct_declarator -> . declarator
    (87) struct_declarator -> . declarator COLON constant_expression
    (88) struct_declarator -> . COLON constant_expression
    (99) declarator -> . direct_declarator
    (100) declarator -> . pointer direct_declarator
    (101) direct_declarator -> . ID
    (102) direct_declarator -> . LPAREN declarator RPAREN
    (103) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (104) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (105) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (106) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer

    COLON           shift and go to state 149
    ID              shift and go to state 29
    LPAREN          shift and go to state 4
    TIMES           shift and go to state 24

    struct_declarator              shift and go to state 338
    direct_declarator              shift and go to state 22
    declarator                     shift and go to state 148
    pointer                        shift and go to state 13

state 259

    (83) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    RBRACE          reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CONST           reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    RESTRICT        reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOLATILE        reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOID            reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CHAR            reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SHORT           reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    INT             reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LONG            reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    FLOAT           reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    DOUBLE          reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SIGNED          reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNSIGNED        reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    TYPEID          reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    ENUM            reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STRUCT          reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNION           reduce using rule 83 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 260

    (77) struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .

    CONST           reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    RESTRICT        reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    INLINE          reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    TYPEID          reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    ID              reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 77 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)


state 261

    (165) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RBRACE          reduce using rule 165 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 165 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 165 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 165 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 165 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 165 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 262

    (206) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (221) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE

    RPAREN          shift and go to state 339


state 263

    (218) postfix_expression -> postfix_expression ARROW identifier .

    LBRACKET        reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    LPAREN          reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    PERIOD          reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    ARROW           reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSPLUS        reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSMINUS      reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMES           reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVIDE          reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    MOD             reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUS            reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUS           reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFT          reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFT          reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    LT              reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    LE              reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    GE              reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    GT              reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    EQ              reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    NE              reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    AND             reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    OR              reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    XOR             reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    LAND            reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    LOR             reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    CONDOP          reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACKET        reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    RPAREN          reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    COMMA           reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    SEMI            reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    COLON           reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACE          reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    EQUALS          reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    XOREQUAL        reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMESEQUAL      reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVEQUAL        reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    MODEQUAL        reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSEQUAL       reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSEQUAL      reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFTEQUAL     reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFTEQUAL     reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    ANDEQUAL        reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)
    OREQUAL         reduce using rule 218 (postfix_expression -> postfix_expression ARROW identifier .)


state 264

    (217) postfix_expression -> postfix_expression PERIOD identifier .

    LBRACKET        reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    LPAREN          reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    PERIOD          reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    ARROW           reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSPLUS        reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSMINUS      reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMES           reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVIDE          reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    MOD             reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUS            reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUS           reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFT          reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFT          reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    LT              reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    LE              reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    GE              reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    GT              reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQ              reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    NE              reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    AND             reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    OR              reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOR             reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    LAND            reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    LOR             reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    CONDOP          reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACKET        reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    RPAREN          reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    COMMA           reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    SEMI            reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    COLON           reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACE          reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQUALS          reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOREQUAL        reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMESEQUAL      reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVEQUAL        reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    MODEQUAL        reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSEQUAL       reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSEQUAL      reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFTEQUAL     reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFTEQUAL     reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    ANDEQUAL        reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)
    OREQUAL         reduce using rule 217 (postfix_expression -> postfix_expression PERIOD identifier .)


state 265

    (214) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (162) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 340
    COMMA           shift and go to state 272


state 266

    (228) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 228 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 228 (argument_expression_list -> assignment_expression .)


state 267

    (216) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 216 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 268

    (215) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (229) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 341
    COMMA           shift and go to state 342


state 269

    (200) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (221) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE

    RPAREN          shift and go to state 343


state 270

    (221) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE

    RPAREN          shift and go to state 344


state 271

    (227) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 227 (primary_expression -> LPAREN expression RPAREN .)


state 272

    (162) expression -> expression COMMA . assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99
    assignment_expression          shift and go to state 345

state 273

    (221) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE
    (200) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 347
    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 346
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 274

    (129) type_name -> specifier_qualifier_list abstract_declarator_opt .

    RPAREN          reduce using rule 129 (type_name -> specifier_qualifier_list abstract_declarator_opt .)


state 275

    (133) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (139) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (130) abstract_declarator -> . pointer
    (131) abstract_declarator -> . pointer direct_abstract_declarator
    (132) abstract_declarator -> . direct_abstract_declarator
    (19) parameter_type_list_opt -> . empty
    (20) parameter_type_list_opt -> . parameter_type_list
    (107) pointer -> . TIMES type_qualifier_list_opt
    (108) pointer -> . TIMES type_qualifier_list_opt pointer
    (133) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (134) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (135) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (136) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (137) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (138) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (139) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (241) empty -> .
    (111) parameter_type_list -> . parameter_list
    (112) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (113) parameter_list -> . parameter_declaration
    (114) parameter_list -> . parameter_list COMMA parameter_declaration
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    TIMES           shift and go to state 24
    LPAREN          shift and go to state 275
    LBRACKET        shift and go to state 211
    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    abstract_declarator            shift and go to state 299
    type_specifier                 shift and go to state 12
    pointer                        shift and go to state 276
    parameter_declaration          shift and go to state 121
    empty                          shift and go to state 296
    struct_or_union                shift and go to state 7
    parameter_type_list            shift and go to state 297
    declaration_specifiers         shift and go to state 122
    typedef_name                   shift and go to state 25
    parameter_type_list_opt        shift and go to state 298
    parameter_list                 shift and go to state 124
    enum_specifier                 shift and go to state 41
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    direct_abstract_declarator     shift and go to state 213

state 276

    (130) abstract_declarator -> pointer .
    (131) abstract_declarator -> pointer . direct_abstract_declarator
    (133) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (134) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (135) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (136) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (137) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (138) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (139) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 130 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 275
    LBRACKET        shift and go to state 211

    direct_abstract_declarator     shift and go to state 304

state 277

    (186) binary_expression -> binary_expression RSHIFT binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RSHIFT          reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LSHIFT          reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LT              reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LE              reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GE              reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GT              reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    EQ              reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    NE              reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    AND             reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    OR              reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    XOR             reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LAND            reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LOR             reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACKET        reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RPAREN          reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COMMA           reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    SEMI            reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COLON           reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACE          reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190

  ! TIMES           [ reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 186 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 187 ]
  ! LSHIFT          [ shift and go to state 189 ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 278

    (198) binary_expression -> binary_expression LOR binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .)
    LOR             reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACKET        reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .)
    RPAREN          reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .)
    COMMA           reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .)
    SEMI            reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .)
    COLON           reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACE          reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189
    LT              shift and go to state 193
    LE              shift and go to state 191
    GE              shift and go to state 199
    GT              shift and go to state 195
    EQ              shift and go to state 201
    NE              shift and go to state 192
    AND             shift and go to state 202
    OR              shift and go to state 204
    XOR             shift and go to state 196
    LAND            shift and go to state 200

  ! TIMES           [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MOD             [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! PLUS            [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MINUS           [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LT              [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LE              [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GE              [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GT              [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! EQ              [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! NE              [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! AND             [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! OR              [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! XOR             [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LAND            [ reduce using rule 198 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LOR             [ shift and go to state 188 ]


state 279

    (187) binary_expression -> binary_expression LSHIFT binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RSHIFT          reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LSHIFT          reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LT              reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LE              reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GE              reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GT              reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    EQ              reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    NE              reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    AND             reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    OR              reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    XOR             reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LAND            reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LOR             reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACKET        reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RPAREN          reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COMMA           reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    SEMI            reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COLON           reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACE          reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190

  ! TIMES           [ reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 187 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 187 ]
  ! LSHIFT          [ shift and go to state 189 ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 280

    (185) binary_expression -> binary_expression MINUS binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS            reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    RSHIFT          reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    LSHIFT          reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    XOR             reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    LAND            reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    LOR             reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205

  ! TIMES           [ reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 185 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 194 ]
  ! MINUS           [ shift and go to state 190 ]
  ! RSHIFT          [ shift and go to state 187 ]
  ! LSHIFT          [ shift and go to state 189 ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 281

    (189) binary_expression -> binary_expression LE binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    LT              reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    XOR             reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    LAND            reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    LOR             reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    COLON           reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189

  ! TIMES           [ reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 189 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 282

    (193) binary_expression -> binary_expression NE binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    XOR             reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    LAND            reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    LOR             reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189
    LT              shift and go to state 193
    LE              shift and go to state 191
    GE              shift and go to state 199
    GT              shift and go to state 195

  ! TIMES           [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LE              [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GE              [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 193 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 283

    (188) binary_expression -> binary_expression LT binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    XOR             reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    LAND            reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    LOR             reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189

  ! TIMES           [ reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 188 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 284

    (184) binary_expression -> binary_expression PLUS binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS            reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    RSHIFT          reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    LSHIFT          reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    XOR             reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    LAND            reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    LOR             reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205

  ! TIMES           [ reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 184 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 194 ]
  ! MINUS           [ shift and go to state 190 ]
  ! RSHIFT          [ shift and go to state 187 ]
  ! LSHIFT          [ shift and go to state 189 ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 285

    (191) binary_expression -> binary_expression GT binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    XOR             reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    LAND            reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    LOR             reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189

  ! TIMES           [ reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 191 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 286

    (196) binary_expression -> binary_expression XOR binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    OR              reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    XOR             reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    LAND            reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    LOR             reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACKET        reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    RPAREN          reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    COMMA           reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    SEMI            reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    COLON           reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACE          reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189
    LT              shift and go to state 193
    LE              shift and go to state 191
    GE              shift and go to state 199
    GT              shift and go to state 195
    EQ              shift and go to state 201
    NE              shift and go to state 192
    AND             shift and go to state 202

  ! TIMES           [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MOD             [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! PLUS            [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MINUS           [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LT              [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LE              [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GE              [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GT              [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! EQ              [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! NE              [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! AND             [ reduce using rule 196 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 287

    (182) binary_expression -> binary_expression DIVIDE binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RSHIFT          reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LSHIFT          reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    XOR             reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LAND            reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LOR             reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COLON           reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 182 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 198 ]
  ! DIVIDE          [ shift and go to state 197 ]
  ! MOD             [ shift and go to state 205 ]
  ! PLUS            [ shift and go to state 194 ]
  ! MINUS           [ shift and go to state 190 ]
  ! RSHIFT          [ shift and go to state 187 ]
  ! LSHIFT          [ shift and go to state 189 ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 288

    (181) binary_expression -> binary_expression TIMES binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    RSHIFT          reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    LSHIFT          reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    XOR             reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    LAND            reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    LOR             reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    COLON           reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 181 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 198 ]
  ! DIVIDE          [ shift and go to state 197 ]
  ! MOD             [ shift and go to state 205 ]
  ! PLUS            [ shift and go to state 194 ]
  ! MINUS           [ shift and go to state 190 ]
  ! RSHIFT          [ shift and go to state 187 ]
  ! LSHIFT          [ shift and go to state 189 ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 289

    (190) binary_expression -> binary_expression GE binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    LT              reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    XOR             reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    LAND            reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    LOR             reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    COLON           reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189

  ! TIMES           [ reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 190 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 290

    (197) binary_expression -> binary_expression LAND binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .)
    LAND            reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .)
    LOR             reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACKET        reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .)
    RPAREN          reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .)
    COMMA           reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .)
    SEMI            reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .)
    COLON           reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACE          reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189
    LT              shift and go to state 193
    LE              shift and go to state 191
    GE              shift and go to state 199
    GT              shift and go to state 195
    EQ              shift and go to state 201
    NE              shift and go to state 192
    AND             shift and go to state 202
    OR              shift and go to state 204
    XOR             shift and go to state 196

  ! TIMES           [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MOD             [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! PLUS            [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MINUS           [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LT              [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LE              [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GE              [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GT              [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! EQ              [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! NE              [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! AND             [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! OR              [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! XOR             [ reduce using rule 197 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 291

    (192) binary_expression -> binary_expression EQ binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    XOR             reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    LAND            reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    LOR             reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189
    LT              shift and go to state 193
    LE              shift and go to state 191
    GE              shift and go to state 199
    GT              shift and go to state 195

  ! TIMES           [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! RSHIFT          [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LSHIFT          [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GE              [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 192 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 292

    (194) binary_expression -> binary_expression AND binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    XOR             reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    LAND            reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    LOR             reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189
    LT              shift and go to state 193
    LE              shift and go to state 191
    GE              shift and go to state 199
    GT              shift and go to state 195
    EQ              shift and go to state 201
    NE              shift and go to state 192

  ! TIMES           [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GE              [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 194 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 293

    (179) conditional_expression -> binary_expression CONDOP expression . COLON conditional_expression
    (162) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 348
    COMMA           shift and go to state 272


state 294

    (195) binary_expression -> binary_expression OR binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    LAND            reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    LOR             reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 197
    MOD             shift and go to state 205
    PLUS            shift and go to state 194
    MINUS           shift and go to state 190
    RSHIFT          shift and go to state 187
    LSHIFT          shift and go to state 189
    LT              shift and go to state 193
    LE              shift and go to state 191
    GE              shift and go to state 199
    GT              shift and go to state 195
    EQ              shift and go to state 201
    NE              shift and go to state 192
    AND             shift and go to state 202
    XOR             shift and go to state 196

  ! TIMES           [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GE              [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! XOR             [ reduce using rule 195 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 204 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 295

    (183) binary_expression -> binary_expression MOD binary_expression .
    (181) binary_expression -> binary_expression . TIMES binary_expression
    (182) binary_expression -> binary_expression . DIVIDE binary_expression
    (183) binary_expression -> binary_expression . MOD binary_expression
    (184) binary_expression -> binary_expression . PLUS binary_expression
    (185) binary_expression -> binary_expression . MINUS binary_expression
    (186) binary_expression -> binary_expression . RSHIFT binary_expression
    (187) binary_expression -> binary_expression . LSHIFT binary_expression
    (188) binary_expression -> binary_expression . LT binary_expression
    (189) binary_expression -> binary_expression . LE binary_expression
    (190) binary_expression -> binary_expression . GE binary_expression
    (191) binary_expression -> binary_expression . GT binary_expression
    (192) binary_expression -> binary_expression . EQ binary_expression
    (193) binary_expression -> binary_expression . NE binary_expression
    (194) binary_expression -> binary_expression . AND binary_expression
    (195) binary_expression -> binary_expression . OR binary_expression
    (196) binary_expression -> binary_expression . XOR binary_expression
    (197) binary_expression -> binary_expression . LAND binary_expression
    (198) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    RSHIFT          reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    LSHIFT          reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    XOR             reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    LAND            reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    LOR             reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    COLON           reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 183 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 198 ]
  ! DIVIDE          [ shift and go to state 197 ]
  ! MOD             [ shift and go to state 205 ]
  ! PLUS            [ shift and go to state 194 ]
  ! MINUS           [ shift and go to state 190 ]
  ! RSHIFT          [ shift and go to state 187 ]
  ! LSHIFT          [ shift and go to state 189 ]
  ! LT              [ shift and go to state 193 ]
  ! LE              [ shift and go to state 191 ]
  ! GE              [ shift and go to state 199 ]
  ! GT              [ shift and go to state 195 ]
  ! EQ              [ shift and go to state 201 ]
  ! NE              [ shift and go to state 192 ]
  ! AND             [ shift and go to state 202 ]
  ! OR              [ shift and go to state 204 ]
  ! XOR             [ shift and go to state 196 ]
  ! LAND            [ shift and go to state 200 ]
  ! LOR             [ shift and go to state 188 ]


state 296

    (19) parameter_type_list_opt -> empty .

    RPAREN          reduce using rule 19 (parameter_type_list_opt -> empty .)


state 297

    (20) parameter_type_list_opt -> parameter_type_list .

    RPAREN          reduce using rule 20 (parameter_type_list_opt -> parameter_type_list .)


state 298

    (139) direct_abstract_declarator -> LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 349


state 299

    (133) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 350


state 300

    (135) direct_abstract_declarator -> LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 351


state 301

    (137) direct_abstract_declarator -> LBRACKET TIMES . RBRACKET
    (208) unary_operator -> TIMES .

    RBRACKET        shift and go to state 352
    LPAREN          reduce using rule 208 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 208 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 208 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 208 (unary_operator -> TIMES .)
    AND             reduce using rule 208 (unary_operator -> TIMES .)
    TIMES           reduce using rule 208 (unary_operator -> TIMES .)
    PLUS            reduce using rule 208 (unary_operator -> TIMES .)
    MINUS           reduce using rule 208 (unary_operator -> TIMES .)
    NOT             reduce using rule 208 (unary_operator -> TIMES .)
    LNOT            reduce using rule 208 (unary_operator -> TIMES .)
    ID              reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 208 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 208 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 208 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 208 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 208 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 208 (unary_operator -> TIMES .)


state 302

    (134) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . assignment_expression_opt RBRACKET
    (136) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (241) empty -> .
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 354
    RBRACKET        reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    assignment_expression          shift and go to state 101
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    assignment_expression_opt      shift and go to state 353
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    identifier                     shift and go to state 117
    empty                          shift and go to state 114
    binary_expression              shift and go to state 112

state 303

    (138) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_opt RPAREN
    (19) parameter_type_list_opt -> . empty
    (20) parameter_type_list_opt -> . parameter_type_list
    (241) empty -> .
    (111) parameter_type_list -> . parameter_list
    (112) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (113) parameter_list -> . parameter_declaration
    (114) parameter_list -> . parameter_list COMMA parameter_declaration
    (115) parameter_declaration -> . declaration_specifiers declarator
    (116) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION

    RPAREN          reduce using rule 241 (empty -> .)
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 7
    type_specifier                 shift and go to state 12
    parameter_list                 shift and go to state 124
    parameter_type_list            shift and go to state 297
    parameter_declaration          shift and go to state 121
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    enum_specifier                 shift and go to state 41
    struct_or_union_specifier      shift and go to state 5
    parameter_type_list_opt        shift and go to state 355
    declaration_specifiers         shift and go to state 122
    typedef_name                   shift and go to state 25
    empty                          shift and go to state 296

state 304

    (131) abstract_declarator -> pointer direct_abstract_declarator .
    (134) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (136) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (138) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 131 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 131 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 302
    LPAREN          shift and go to state 303


state 305

    (118) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 118 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 118 (identifier_list -> identifier_list COMMA identifier .)


state 306

    (112) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 112 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 307

    (114) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 114 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 114 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 308

    (93) enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .

    CONST           reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    RESTRICT        reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    INLINE          reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    TYPEID          reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    ID              reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 93 (enum_specifier -> ENUM TYPEID LBRACE enumerator_list RBRACE .)


state 309

    (96) enumerator_list -> enumerator_list COMMA enumerator .

    RBRACE          reduce using rule 96 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 96 (enumerator_list -> enumerator_list COMMA enumerator .)


state 310

    (98) enumerator -> ID EQUALS constant_expression .

    RBRACE          reduce using rule 98 (enumerator -> ID EQUALS constant_expression .)
    COMMA           reduce using rule 98 (enumerator -> ID EQUALS constant_expression .)


state 311

    (92) enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .

    CONST           reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    RESTRICT        reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    INLINE          reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    TYPEID          reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    ID              reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 92 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)


state 312

    (12) designation_opt -> designation .

    LBRACE          reduce using rule 12 (designation_opt -> designation .)
    PLUSPLUS        reduce using rule 12 (designation_opt -> designation .)
    MINUSMINUS      reduce using rule 12 (designation_opt -> designation .)
    SIZEOF          reduce using rule 12 (designation_opt -> designation .)
    LPAREN          reduce using rule 12 (designation_opt -> designation .)
    AND             reduce using rule 12 (designation_opt -> designation .)
    TIMES           reduce using rule 12 (designation_opt -> designation .)
    PLUS            reduce using rule 12 (designation_opt -> designation .)
    MINUS           reduce using rule 12 (designation_opt -> designation .)
    NOT             reduce using rule 12 (designation_opt -> designation .)
    LNOT            reduce using rule 12 (designation_opt -> designation .)
    ID              reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_DEC   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_OCT   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_HEX   reduce using rule 12 (designation_opt -> designation .)
    FLOAT_CONST     reduce using rule 12 (designation_opt -> designation .)
    CHAR_CONST      reduce using rule 12 (designation_opt -> designation .)
    WCHAR_CONST     reduce using rule 12 (designation_opt -> designation .)
    STRING_LITERAL  reduce using rule 12 (designation_opt -> designation .)
    WSTRING_LITERAL reduce using rule 12 (designation_opt -> designation .)


state 313

    (125) designator_list -> designator .

    EQUALS          reduce using rule 125 (designator_list -> designator .)
    LBRACKET        reduce using rule 125 (designator_list -> designator .)
    PERIOD          reduce using rule 125 (designator_list -> designator .)


state 314

    (128) designator -> PERIOD . identifier
    (230) identifier -> . ID

    ID              shift and go to state 108

    identifier                     shift and go to state 356

state 315

    (127) designator -> LBRACKET . constant_expression RBRACKET
    (177) constant_expression -> . conditional_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 257
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    constant_expression            shift and go to state 357
    primary_expression             shift and go to state 105

state 316

    (122) initializer_list -> designation_opt . initializer
    (119) initializer -> . assignment_expression
    (120) initializer -> . LBRACE initializer_list RBRACE
    (121) initializer -> . LBRACE initializer_list COMMA RBRACE
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 226
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    assignment_expression          shift and go to state 225
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    conditional_expression         shift and go to state 115
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    initializer                    shift and go to state 358
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 317

    (120) initializer -> LBRACE initializer_list . RBRACE
    (121) initializer -> LBRACE initializer_list . COMMA RBRACE
    (123) initializer_list -> initializer_list . COMMA designation_opt initializer

    RBRACE          shift and go to state 359
    COMMA           shift and go to state 360


state 318

    (124) designation -> designator_list . EQUALS
    (126) designator_list -> designator_list . designator
    (127) designator -> . LBRACKET constant_expression RBRACKET
    (128) designator -> . PERIOD identifier

    EQUALS          shift and go to state 362
    LBRACKET        shift and go to state 315
    PERIOD          shift and go to state 314

    designator                     shift and go to state 361

state 319

    (11) designation_opt -> empty .

    LBRACE          reduce using rule 11 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 11 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 11 (designation_opt -> empty .)
    SIZEOF          reduce using rule 11 (designation_opt -> empty .)
    LPAREN          reduce using rule 11 (designation_opt -> empty .)
    AND             reduce using rule 11 (designation_opt -> empty .)
    TIMES           reduce using rule 11 (designation_opt -> empty .)
    PLUS            reduce using rule 11 (designation_opt -> empty .)
    MINUS           reduce using rule 11 (designation_opt -> empty .)
    NOT             reduce using rule 11 (designation_opt -> empty .)
    LNOT            reduce using rule 11 (designation_opt -> empty .)
    ID              reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 11 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 11 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 11 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 11 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 11 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 11 (designation_opt -> empty .)


state 320

    (155) jump_statement -> GOTO ID . SEMI

    SEMI            shift and go to state 363


state 321

    (160) expression_statement -> expression_opt SEMI .

    ID              reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    CASE            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    DEFAULT         reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    SWITCH          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    DO              reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    GOTO            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    CONTINUE        reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    CONST           reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    RESTRICT        reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    VOLATILE        reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    SHORT           reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    LONG            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    DOUBLE          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    SIGNED          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    UNSIGNED        reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    AUTO            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    REGISTER        reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    STATIC          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    EXTERN          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    TYPEDEF         reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    INLINE          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    TYPEID          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    ENUM            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    STRUCT          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    UNION           reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    SIZEOF          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    AND             reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    LNOT            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    INT_CONST_DEC   reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    INT_CONST_OCT   reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    INT_CONST_HEX   reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    WCHAR_CONST     reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    WSTRING_LITERAL reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 160 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 160 (expression_statement -> expression_opt SEMI .)


state 322

    (159) jump_statement -> RETURN SEMI .

    ID              reduce using rule 159 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 159 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 159 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 159 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 159 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 159 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 159 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 159 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    CONST           reduce using rule 159 (jump_statement -> RETURN SEMI .)
    RESTRICT        reduce using rule 159 (jump_statement -> RETURN SEMI .)
    VOLATILE        reduce using rule 159 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    SHORT           reduce using rule 159 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 159 (jump_statement -> RETURN SEMI .)
    LONG            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 159 (jump_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    SIGNED          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    UNSIGNED        reduce using rule 159 (jump_statement -> RETURN SEMI .)
    AUTO            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    REGISTER        reduce using rule 159 (jump_statement -> RETURN SEMI .)
    STATIC          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    EXTERN          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    TYPEDEF         reduce using rule 159 (jump_statement -> RETURN SEMI .)
    INLINE          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    TYPEID          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    ENUM            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    STRUCT          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    UNION           reduce using rule 159 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 159 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 159 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 159 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 159 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 159 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 159 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    INT_CONST_DEC   reduce using rule 159 (jump_statement -> RETURN SEMI .)
    INT_CONST_OCT   reduce using rule 159 (jump_statement -> RETURN SEMI .)
    INT_CONST_HEX   reduce using rule 159 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 159 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 159 (jump_statement -> RETURN SEMI .)
    WCHAR_CONST     reduce using rule 159 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 159 (jump_statement -> RETURN SEMI .)
    WSTRING_LITERAL reduce using rule 159 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 159 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 159 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 159 (jump_statement -> RETURN SEMI .)


state 323

    (158) jump_statement -> RETURN expression . SEMI
    (162) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 364
    COMMA           shift and go to state 272


state 324

    (153) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (40) declaration -> . decl_body SEMI
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (39) decl_body -> . declaration_specifiers init_declarator_list_opt
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (44) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (45) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (46) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) type_qualifier -> . CONST
    (66) type_qualifier -> . RESTRICT
    (67) type_qualifier -> . VOLATILE
    (53) type_specifier -> . VOID
    (54) type_specifier -> . CHAR
    (55) type_specifier -> . SHORT
    (56) type_specifier -> . INT
    (57) type_specifier -> . LONG
    (58) type_specifier -> . FLOAT
    (59) type_specifier -> . DOUBLE
    (60) type_specifier -> . SIGNED
    (61) type_specifier -> . UNSIGNED
    (62) type_specifier -> . typedef_name
    (63) type_specifier -> . enum_specifier
    (64) type_specifier -> . struct_or_union_specifier
    (47) storage_class_specifier -> . AUTO
    (48) storage_class_specifier -> . REGISTER
    (49) storage_class_specifier -> . STATIC
    (50) storage_class_specifier -> . EXTERN
    (51) storage_class_specifier -> . TYPEDEF
    (52) function_specifier -> . INLINE
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (163) typedef_name -> . TYPEID
    (89) enum_specifier -> . ENUM ID
    (90) enum_specifier -> . ENUM TYPEID
    (91) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (92) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (93) enum_specifier -> . ENUM TYPEID LBRACE enumerator_list RBRACE
    (74) struct_or_union_specifier -> . struct_or_union ID
    (75) struct_or_union_specifier -> . struct_or_union TYPEID
    (76) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (77) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (78) struct_or_union_specifier -> . struct_or_union TYPEID LBRACE struct_declaration_list RBRACE
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (79) struct_or_union -> . STRUCT
    (80) struct_or_union -> . UNION
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 42
    VOID            shift and go to state 6
    CHAR            shift and go to state 33
    SHORT           shift and go to state 2
    INT             shift and go to state 35
    LONG            shift and go to state 16
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 36
    SIGNED          shift and go to state 39
    UNSIGNED        shift and go to state 15
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 9
    TYPEDEF         shift and go to state 20
    INLINE          shift and go to state 44
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    TYPEID          shift and go to state 21
    ENUM            shift and go to state 23
    STRUCT          shift and go to state 30
    UNION           shift and go to state 17
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    storage_class_specifier        shift and go to state 1
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    struct_or_union_specifier      shift and go to state 5
    unified_wstring_literal        shift and go to state 87
    type_specifier                 shift and go to state 12
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    struct_or_union                shift and go to state 7
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 365
    primary_expression             shift and go to state 105
    declaration_specifiers         shift and go to state 73
    declaration                    shift and go to state 366
    typedef_name                   shift and go to state 25
    binary_expression              shift and go to state 112
    enum_specifier                 shift and go to state 41
    decl_body                      shift and go to state 37
    type_qualifier                 shift and go to state 38
    function_specifier             shift and go to state 40
    empty                          shift and go to state 330
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 325

    (157) jump_statement -> CONTINUE SEMI .

    ID              reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    CONST           reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    RESTRICT        reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    VOLATILE        reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    VOID            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    SHORT           reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    LONG            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    SIGNED          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    UNSIGNED        reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    AUTO            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    REGISTER        reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    EXTERN          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    TYPEDEF         reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    INLINE          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    TYPEID          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    ENUM            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    STRUCT          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    UNION           reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    AND             reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_DEC   reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_OCT   reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_HEX   reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    FLOAT_CONST     reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    CHAR_CONST      reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    WCHAR_CONST     reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    WSTRING_LITERAL reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 157 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 157 (jump_statement -> CONTINUE SEMI .)


state 326

    (147) labeled_statement -> DEFAULT COLON . statement
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 367
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 327

    (151) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    expression                     shift and go to state 368
    primary_expression             shift and go to state 105
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 328

    (146) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 369


state 329

    (143) block_item_list -> block_item_list block_item .

    ID              reduce using rule 143 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 143 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 143 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 143 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 143 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 143 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 143 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 143 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 143 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 143 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 143 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 143 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 143 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 143 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 143 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 143 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 143 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    TYPEID          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 143 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 143 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 143 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 143 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 143 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 143 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 143 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 143 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    INT_CONST_DEC   reduce using rule 143 (block_item_list -> block_item_list block_item .)
    INT_CONST_OCT   reduce using rule 143 (block_item_list -> block_item_list block_item .)
    INT_CONST_HEX   reduce using rule 143 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 143 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 143 (block_item_list -> block_item_list block_item .)
    WCHAR_CONST     reduce using rule 143 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 143 (block_item_list -> block_item_list block_item .)
    WSTRING_LITERAL reduce using rule 143 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 143 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 143 (block_item_list -> block_item_list block_item .)


state 330

    (13) expression_opt -> empty .

    SEMI            reduce using rule 13 (expression_opt -> empty .)
    RPAREN          reduce using rule 13 (expression_opt -> empty .)


state 331

    (150) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    expression                     shift and go to state 370
    primary_expression             shift and go to state 105
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 332

    (156) jump_statement -> BREAK SEMI .

    ID              reduce using rule 156 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 156 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 156 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 156 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 156 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 156 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 156 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 156 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    CONST           reduce using rule 156 (jump_statement -> BREAK SEMI .)
    RESTRICT        reduce using rule 156 (jump_statement -> BREAK SEMI .)
    VOLATILE        reduce using rule 156 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    SHORT           reduce using rule 156 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 156 (jump_statement -> BREAK SEMI .)
    LONG            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 156 (jump_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    SIGNED          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    UNSIGNED        reduce using rule 156 (jump_statement -> BREAK SEMI .)
    AUTO            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    REGISTER        reduce using rule 156 (jump_statement -> BREAK SEMI .)
    STATIC          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    EXTERN          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    TYPEDEF         reduce using rule 156 (jump_statement -> BREAK SEMI .)
    INLINE          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    TYPEID          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    ENUM            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    STRUCT          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    UNION           reduce using rule 156 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 156 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 156 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 156 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 156 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 156 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 156 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    INT_CONST_DEC   reduce using rule 156 (jump_statement -> BREAK SEMI .)
    INT_CONST_OCT   reduce using rule 156 (jump_statement -> BREAK SEMI .)
    INT_CONST_HEX   reduce using rule 156 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 156 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 156 (jump_statement -> BREAK SEMI .)
    WCHAR_CONST     reduce using rule 156 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 156 (jump_statement -> BREAK SEMI .)
    WSTRING_LITERAL reduce using rule 156 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 156 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 156 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 156 (jump_statement -> BREAK SEMI .)


state 333

    (152) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 371


state 334

    (144) compound_statement -> LBRACE block_item_list_opt RBRACE .

    ID              reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CASE            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    DEFAULT         reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LBRACE          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    IF              reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    SWITCH          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    WHILE           reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    DO              reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FOR             reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    GOTO            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    BREAK           reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CONTINUE        reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    RETURN          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CONST           reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    RESTRICT        reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    VOLATILE        reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    VOID            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CHAR            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    SHORT           reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT             reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LONG            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FLOAT           reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    DOUBLE          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    SIGNED          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    UNSIGNED        reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    AUTO            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    REGISTER        reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    STATIC          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    EXTERN          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    TYPEDEF         reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INLINE          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    TYPEID          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ENUM            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    STRUCT          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    UNION           reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PLUSPLUS        reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    MINUSMINUS      reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    SIZEOF          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LPAREN          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    AND             reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    TIMES           reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PLUS            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    MINUS           reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    NOT             reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LNOT            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT_CONST_DEC   reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT_CONST_OCT   reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT_CONST_HEX   reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FLOAT_CONST     reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CHAR_CONST      reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    WCHAR_CONST     reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    STRING_LITERAL  reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    WSTRING_LITERAL reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    SEMI            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    RBRACE          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ELSE            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PPHASH          reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    $end            reduce using rule 144 (compound_statement -> LBRACE block_item_list_opt RBRACE .)


state 335

    (145) labeled_statement -> ID COLON . statement
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 372
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 336

    (148) selection_statement -> IF LPAREN . expression RPAREN statement
    (149) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    expression                     shift and go to state 373
    primary_expression             shift and go to state 105
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 337

    (87) struct_declarator -> declarator COLON constant_expression .

    SEMI            reduce using rule 87 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 87 (struct_declarator -> declarator COLON constant_expression .)


state 338

    (85) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMI            reduce using rule 85 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 85 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 339

    (206) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (221) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE

    EQUALS          reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 206 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LBRACE          shift and go to state 347


state 340

    (214) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 214 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 341

    (215) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 215 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 342

    (229) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99
    assignment_expression          shift and go to state 374

state 343

    (200) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (221) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 347
    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    cast_expression                shift and go to state 346
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 344

    (221) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (222) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE

    LBRACE          shift and go to state 347


state 345

    (162) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 162 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 162 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 162 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 162 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 162 (expression -> expression COMMA assignment_expression .)


state 346

    (200) cast_expression -> LPAREN type_name RPAREN cast_expression .

    CONDOP          reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMES           reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 200 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 347

    (221) postfix_expression -> LPAREN type_name RPAREN LBRACE . initializer_list RBRACE
    (222) postfix_expression -> LPAREN type_name RPAREN LBRACE . initializer_list COMMA RBRACE
    (122) initializer_list -> . designation_opt initializer
    (123) initializer_list -> . initializer_list COMMA designation_opt initializer
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (241) empty -> .
    (124) designation -> . designator_list EQUALS
    (125) designator_list -> . designator
    (126) designator_list -> . designator_list designator
    (127) designator -> . LBRACKET constant_expression RBRACKET
    (128) designator -> . PERIOD identifier

    LBRACE          reduce using rule 241 (empty -> .)
    PLUSPLUS        reduce using rule 241 (empty -> .)
    MINUSMINUS      reduce using rule 241 (empty -> .)
    SIZEOF          reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    AND             reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    PLUS            reduce using rule 241 (empty -> .)
    MINUS           reduce using rule 241 (empty -> .)
    NOT             reduce using rule 241 (empty -> .)
    LNOT            reduce using rule 241 (empty -> .)
    ID              reduce using rule 241 (empty -> .)
    INT_CONST_DEC   reduce using rule 241 (empty -> .)
    INT_CONST_OCT   reduce using rule 241 (empty -> .)
    INT_CONST_HEX   reduce using rule 241 (empty -> .)
    FLOAT_CONST     reduce using rule 241 (empty -> .)
    CHAR_CONST      reduce using rule 241 (empty -> .)
    WCHAR_CONST     reduce using rule 241 (empty -> .)
    STRING_LITERAL  reduce using rule 241 (empty -> .)
    WSTRING_LITERAL reduce using rule 241 (empty -> .)
    LBRACKET        shift and go to state 315
    PERIOD          shift and go to state 314

    designation                    shift and go to state 312
    designator                     shift and go to state 313
    designation_opt                shift and go to state 316
    initializer_list               shift and go to state 375
    designator_list                shift and go to state 318
    empty                          shift and go to state 319

state 348

    (179) conditional_expression -> binary_expression CONDOP expression COLON . conditional_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 176
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    binary_expression              shift and go to state 112
    unary_expression               shift and go to state 177
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 376
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99

state 349

    (139) direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 139 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 139 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 139 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 139 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)


state 350

    (133) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 133 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 133 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 133 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 133 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 351

    (135) direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 135 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 135 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 135 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 135 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)


state 352

    (137) direct_abstract_declarator -> LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 137 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 137 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 137 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 137 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)


state 353

    (134) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 377


state 354

    (136) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES . RBRACKET
    (208) unary_operator -> TIMES .

    RBRACKET        shift and go to state 378
    LPAREN          reduce using rule 208 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 208 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 208 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 208 (unary_operator -> TIMES .)
    AND             reduce using rule 208 (unary_operator -> TIMES .)
    TIMES           reduce using rule 208 (unary_operator -> TIMES .)
    PLUS            reduce using rule 208 (unary_operator -> TIMES .)
    MINUS           reduce using rule 208 (unary_operator -> TIMES .)
    NOT             reduce using rule 208 (unary_operator -> TIMES .)
    LNOT            reduce using rule 208 (unary_operator -> TIMES .)
    ID              reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 208 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 208 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 208 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 208 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 208 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 208 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 208 (unary_operator -> TIMES .)


state 355

    (138) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 379


state 356

    (128) designator -> PERIOD identifier .

    EQUALS          reduce using rule 128 (designator -> PERIOD identifier .)
    LBRACKET        reduce using rule 128 (designator -> PERIOD identifier .)
    PERIOD          reduce using rule 128 (designator -> PERIOD identifier .)


state 357

    (127) designator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 380


state 358

    (122) initializer_list -> designation_opt initializer .

    RBRACE          reduce using rule 122 (initializer_list -> designation_opt initializer .)
    COMMA           reduce using rule 122 (initializer_list -> designation_opt initializer .)


state 359

    (120) initializer -> LBRACE initializer_list RBRACE .

    RBRACE          reduce using rule 120 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 120 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 120 (initializer -> LBRACE initializer_list RBRACE .)


state 360

    (121) initializer -> LBRACE initializer_list COMMA . RBRACE
    (123) initializer_list -> initializer_list COMMA . designation_opt initializer
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (241) empty -> .
    (124) designation -> . designator_list EQUALS
    (125) designator_list -> . designator
    (126) designator_list -> . designator_list designator
    (127) designator -> . LBRACKET constant_expression RBRACKET
    (128) designator -> . PERIOD identifier

    RBRACE          shift and go to state 381
    LBRACE          reduce using rule 241 (empty -> .)
    PLUSPLUS        reduce using rule 241 (empty -> .)
    MINUSMINUS      reduce using rule 241 (empty -> .)
    SIZEOF          reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    AND             reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    PLUS            reduce using rule 241 (empty -> .)
    MINUS           reduce using rule 241 (empty -> .)
    NOT             reduce using rule 241 (empty -> .)
    LNOT            reduce using rule 241 (empty -> .)
    ID              reduce using rule 241 (empty -> .)
    INT_CONST_DEC   reduce using rule 241 (empty -> .)
    INT_CONST_OCT   reduce using rule 241 (empty -> .)
    INT_CONST_HEX   reduce using rule 241 (empty -> .)
    FLOAT_CONST     reduce using rule 241 (empty -> .)
    CHAR_CONST      reduce using rule 241 (empty -> .)
    WCHAR_CONST     reduce using rule 241 (empty -> .)
    STRING_LITERAL  reduce using rule 241 (empty -> .)
    WSTRING_LITERAL reduce using rule 241 (empty -> .)
    LBRACKET        shift and go to state 315
    PERIOD          shift and go to state 314

    designation                    shift and go to state 312
    designator                     shift and go to state 313
    designation_opt                shift and go to state 382
    designator_list                shift and go to state 318
    empty                          shift and go to state 319

state 361

    (126) designator_list -> designator_list designator .

    EQUALS          reduce using rule 126 (designator_list -> designator_list designator .)
    LBRACKET        reduce using rule 126 (designator_list -> designator_list designator .)
    PERIOD          reduce using rule 126 (designator_list -> designator_list designator .)


state 362

    (124) designation -> designator_list EQUALS .

    LBRACE          reduce using rule 124 (designation -> designator_list EQUALS .)
    PLUSPLUS        reduce using rule 124 (designation -> designator_list EQUALS .)
    MINUSMINUS      reduce using rule 124 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 124 (designation -> designator_list EQUALS .)
    LPAREN          reduce using rule 124 (designation -> designator_list EQUALS .)
    AND             reduce using rule 124 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 124 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 124 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 124 (designation -> designator_list EQUALS .)
    NOT             reduce using rule 124 (designation -> designator_list EQUALS .)
    LNOT            reduce using rule 124 (designation -> designator_list EQUALS .)
    ID              reduce using rule 124 (designation -> designator_list EQUALS .)
    INT_CONST_DEC   reduce using rule 124 (designation -> designator_list EQUALS .)
    INT_CONST_OCT   reduce using rule 124 (designation -> designator_list EQUALS .)
    INT_CONST_HEX   reduce using rule 124 (designation -> designator_list EQUALS .)
    FLOAT_CONST     reduce using rule 124 (designation -> designator_list EQUALS .)
    CHAR_CONST      reduce using rule 124 (designation -> designator_list EQUALS .)
    WCHAR_CONST     reduce using rule 124 (designation -> designator_list EQUALS .)
    STRING_LITERAL  reduce using rule 124 (designation -> designator_list EQUALS .)
    WSTRING_LITERAL reduce using rule 124 (designation -> designator_list EQUALS .)


state 363

    (155) jump_statement -> GOTO ID SEMI .

    ID              reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    CASE            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    DEFAULT         reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    LBRACE          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    IF              reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    SWITCH          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    DO              reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    FOR             reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    BREAK           reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    CONST           reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    RESTRICT        reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    VOLATILE        reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    VOID            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    CHAR            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    SHORT           reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    INT             reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    LONG            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    FLOAT           reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    DOUBLE          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    SIGNED          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    UNSIGNED        reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    AUTO            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    REGISTER        reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    STATIC          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    EXTERN          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    TYPEDEF         reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    INLINE          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    TYPEID          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    ENUM            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    STRUCT          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    UNION           reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    PLUSPLUS        reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    MINUSMINUS      reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    SIZEOF          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    AND             reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    TIMES           reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    PLUS            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    NOT             reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    LNOT            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_DEC   reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_OCT   reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_HEX   reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    FLOAT_CONST     reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    CHAR_CONST      reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    WCHAR_CONST     reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    STRING_LITERAL  reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    WSTRING_LITERAL reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    SEMI            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    RBRACE          reduce using rule 155 (jump_statement -> GOTO ID SEMI .)
    ELSE            reduce using rule 155 (jump_statement -> GOTO ID SEMI .)


state 364

    (158) jump_statement -> RETURN expression SEMI .

    ID              reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    CONST           reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    RESTRICT        reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    VOLATILE        reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    SHORT           reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    LONG            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    SIGNED          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    UNSIGNED        reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    AUTO            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    REGISTER        reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    STATIC          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    EXTERN          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    TYPEDEF         reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    INLINE          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    TYPEID          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    ENUM            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    STRUCT          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    UNION           reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_DEC   reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_OCT   reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_HEX   reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    WCHAR_CONST     reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    WSTRING_LITERAL reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 158 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 158 (jump_statement -> RETURN expression SEMI .)


state 365

    (153) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 383


state 366

    (154) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    conditional_expression         shift and go to state 115
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    expression_opt                 shift and go to state 384
    constant                       shift and go to state 92
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    identifier                     shift and go to state 117
    expression                     shift and go to state 237
    primary_expression             shift and go to state 105
    empty                          shift and go to state 330
    binary_expression              shift and go to state 112

state 367

    (147) labeled_statement -> DEFAULT COLON statement .

    ID              reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    RESTRICT        reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    REGISTER        reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    INLINE          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    TYPEID          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    PLUSPLUS        reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    MINUSMINUS      reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    AND             reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_DEC   reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_OCT   reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_HEX   reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_CONST     reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_CONST      reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    WCHAR_CONST     reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    WSTRING_LITERAL reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    RBRACE          reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 147 (labeled_statement -> DEFAULT COLON statement .)


state 368

    (151) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (162) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 385
    COMMA           shift and go to state 272


state 369

    (146) labeled_statement -> CASE constant_expression COLON . statement
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 386
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 370

    (150) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (162) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 387
    COMMA           shift and go to state 272


state 371

    (152) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 388


state 372

    (145) labeled_statement -> ID COLON statement .

    ID              reduce using rule 145 (labeled_statement -> ID COLON statement .)
    CASE            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    DEFAULT         reduce using rule 145 (labeled_statement -> ID COLON statement .)
    LBRACE          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    IF              reduce using rule 145 (labeled_statement -> ID COLON statement .)
    SWITCH          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    WHILE           reduce using rule 145 (labeled_statement -> ID COLON statement .)
    DO              reduce using rule 145 (labeled_statement -> ID COLON statement .)
    FOR             reduce using rule 145 (labeled_statement -> ID COLON statement .)
    GOTO            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    BREAK           reduce using rule 145 (labeled_statement -> ID COLON statement .)
    CONTINUE        reduce using rule 145 (labeled_statement -> ID COLON statement .)
    RETURN          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    CONST           reduce using rule 145 (labeled_statement -> ID COLON statement .)
    RESTRICT        reduce using rule 145 (labeled_statement -> ID COLON statement .)
    VOLATILE        reduce using rule 145 (labeled_statement -> ID COLON statement .)
    VOID            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    CHAR            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    SHORT           reduce using rule 145 (labeled_statement -> ID COLON statement .)
    INT             reduce using rule 145 (labeled_statement -> ID COLON statement .)
    LONG            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    FLOAT           reduce using rule 145 (labeled_statement -> ID COLON statement .)
    DOUBLE          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    SIGNED          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    UNSIGNED        reduce using rule 145 (labeled_statement -> ID COLON statement .)
    AUTO            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    REGISTER        reduce using rule 145 (labeled_statement -> ID COLON statement .)
    STATIC          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    EXTERN          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    TYPEDEF         reduce using rule 145 (labeled_statement -> ID COLON statement .)
    INLINE          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    TYPEID          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    ENUM            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    STRUCT          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    UNION           reduce using rule 145 (labeled_statement -> ID COLON statement .)
    PLUSPLUS        reduce using rule 145 (labeled_statement -> ID COLON statement .)
    MINUSMINUS      reduce using rule 145 (labeled_statement -> ID COLON statement .)
    SIZEOF          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    LPAREN          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    AND             reduce using rule 145 (labeled_statement -> ID COLON statement .)
    TIMES           reduce using rule 145 (labeled_statement -> ID COLON statement .)
    PLUS            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    MINUS           reduce using rule 145 (labeled_statement -> ID COLON statement .)
    NOT             reduce using rule 145 (labeled_statement -> ID COLON statement .)
    LNOT            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    INT_CONST_DEC   reduce using rule 145 (labeled_statement -> ID COLON statement .)
    INT_CONST_OCT   reduce using rule 145 (labeled_statement -> ID COLON statement .)
    INT_CONST_HEX   reduce using rule 145 (labeled_statement -> ID COLON statement .)
    FLOAT_CONST     reduce using rule 145 (labeled_statement -> ID COLON statement .)
    CHAR_CONST      reduce using rule 145 (labeled_statement -> ID COLON statement .)
    WCHAR_CONST     reduce using rule 145 (labeled_statement -> ID COLON statement .)
    STRING_LITERAL  reduce using rule 145 (labeled_statement -> ID COLON statement .)
    WSTRING_LITERAL reduce using rule 145 (labeled_statement -> ID COLON statement .)
    SEMI            reduce using rule 145 (labeled_statement -> ID COLON statement .)
    RBRACE          reduce using rule 145 (labeled_statement -> ID COLON statement .)
    ELSE            reduce using rule 145 (labeled_statement -> ID COLON statement .)


state 373

    (148) selection_statement -> IF LPAREN expression . RPAREN statement
    (149) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (162) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 389
    COMMA           shift and go to state 272


state 374

    (229) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 229 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 229 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 375

    (221) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list . RBRACE
    (222) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list . COMMA RBRACE
    (123) initializer_list -> initializer_list . COMMA designation_opt initializer

    RBRACE          shift and go to state 390
    COMMA           shift and go to state 391


state 376

    (179) conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .

    RPAREN          reduce using rule 179 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 179 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 179 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 179 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 179 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 179 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)


state 377

    (134) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 134 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 134 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 134 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 134 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)


state 378

    (136) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 136 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 136 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 136 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 136 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)


state 379

    (138) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 138 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 138 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 138 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 138 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)


state 380

    (127) designator -> LBRACKET constant_expression RBRACKET .

    EQUALS          reduce using rule 127 (designator -> LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 127 (designator -> LBRACKET constant_expression RBRACKET .)
    PERIOD          reduce using rule 127 (designator -> LBRACKET constant_expression RBRACKET .)


state 381

    (121) initializer -> LBRACE initializer_list COMMA RBRACE .

    RBRACE          reduce using rule 121 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 121 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 121 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 382

    (123) initializer_list -> initializer_list COMMA designation_opt . initializer
    (119) initializer -> . assignment_expression
    (120) initializer -> . LBRACE initializer_list RBRACE
    (121) initializer -> . LBRACE initializer_list COMMA RBRACE
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 226
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    constant                       shift and go to state 92
    assignment_expression          shift and go to state 225
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    initializer                    shift and go to state 392
    primary_expression             shift and go to state 105
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    identifier                     shift and go to state 117
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 383

    (153) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    expression_opt                 shift and go to state 393
    conditional_expression         shift and go to state 115
    constant                       shift and go to state 92
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    identifier                     shift and go to state 117
    expression                     shift and go to state 237
    primary_expression             shift and go to state 105
    empty                          shift and go to state 330
    binary_expression              shift and go to state 112

state 384

    (154) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 394


state 385

    (151) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 395
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 386

    (146) labeled_statement -> CASE constant_expression COLON statement .

    ID              reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    RESTRICT        reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    REGISTER        reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    INLINE          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEID          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSPLUS        reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSMINUS      reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    AND             reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_DEC   reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_OCT   reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_HEX   reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_CONST     reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_CONST      reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    WCHAR_CONST     reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    WSTRING_LITERAL reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    RBRACE          reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 146 (labeled_statement -> CASE constant_expression COLON statement .)


state 387

    (150) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 396
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 388

    (152) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    conditional_expression         shift and go to state 115
    cast_expression                shift and go to state 98
    constant                       shift and go to state 92
    identifier                     shift and go to state 117
    expression                     shift and go to state 397
    primary_expression             shift and go to state 105
    unary_operator                 shift and go to state 99
    binary_expression              shift and go to state 112

state 389

    (148) selection_statement -> IF LPAREN expression RPAREN . statement
    (149) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 398
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 390

    (221) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .

    LBRACKET        reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LPAREN          reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    PERIOD          reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    ARROW           reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    PLUSPLUS        reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MINUSMINUS      reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    TIMES           reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    DIVIDE          reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MOD             reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    PLUS            reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MINUS           reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RSHIFT          reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LSHIFT          reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LT              reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LE              reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    GE              reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    GT              reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    EQ              reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    NE              reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    AND             reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    OR              reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    XOR             reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LAND            reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LOR             reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    CONDOP          reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RBRACKET        reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RPAREN          reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    COLON           reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    EQUALS          reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    XOREQUAL        reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    TIMESEQUAL      reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    DIVEQUAL        reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MODEQUAL        reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    PLUSEQUAL       reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MINUSEQUAL      reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LSHIFTEQUAL     reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RSHIFTEQUAL     reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    ANDEQUAL        reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    OREQUAL         reduce using rule 221 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)


state 391

    (222) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA . RBRACE
    (123) initializer_list -> initializer_list COMMA . designation_opt initializer
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (241) empty -> .
    (124) designation -> . designator_list EQUALS
    (125) designator_list -> . designator
    (126) designator_list -> . designator_list designator
    (127) designator -> . LBRACKET constant_expression RBRACKET
    (128) designator -> . PERIOD identifier

    RBRACE          shift and go to state 399
    LBRACE          reduce using rule 241 (empty -> .)
    PLUSPLUS        reduce using rule 241 (empty -> .)
    MINUSMINUS      reduce using rule 241 (empty -> .)
    SIZEOF          reduce using rule 241 (empty -> .)
    LPAREN          reduce using rule 241 (empty -> .)
    AND             reduce using rule 241 (empty -> .)
    TIMES           reduce using rule 241 (empty -> .)
    PLUS            reduce using rule 241 (empty -> .)
    MINUS           reduce using rule 241 (empty -> .)
    NOT             reduce using rule 241 (empty -> .)
    LNOT            reduce using rule 241 (empty -> .)
    ID              reduce using rule 241 (empty -> .)
    INT_CONST_DEC   reduce using rule 241 (empty -> .)
    INT_CONST_OCT   reduce using rule 241 (empty -> .)
    INT_CONST_HEX   reduce using rule 241 (empty -> .)
    FLOAT_CONST     reduce using rule 241 (empty -> .)
    CHAR_CONST      reduce using rule 241 (empty -> .)
    WCHAR_CONST     reduce using rule 241 (empty -> .)
    STRING_LITERAL  reduce using rule 241 (empty -> .)
    WSTRING_LITERAL reduce using rule 241 (empty -> .)
    LBRACKET        shift and go to state 315
    PERIOD          shift and go to state 314

    designation                    shift and go to state 312
    designator                     shift and go to state 313
    designation_opt                shift and go to state 382
    designator_list                shift and go to state 318
    empty                          shift and go to state 319

state 392

    (123) initializer_list -> initializer_list COMMA designation_opt initializer .

    RBRACE          reduce using rule 123 (initializer_list -> initializer_list COMMA designation_opt initializer .)
    COMMA           reduce using rule 123 (initializer_list -> initializer_list COMMA designation_opt initializer .)


state 393

    (153) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 400


state 394

    (154) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    conditional_expression         shift and go to state 115
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    expression_opt                 shift and go to state 401
    constant                       shift and go to state 92
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    identifier                     shift and go to state 117
    expression                     shift and go to state 237
    primary_expression             shift and go to state 105
    empty                          shift and go to state 330
    binary_expression              shift and go to state 112

state 395

    (151) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    ID              reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_OCT   reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_HEX   reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WCHAR_CONST     reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WSTRING_LITERAL reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 151 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 396

    (150) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    ID              reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND             reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_OCT   reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_HEX   reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WCHAR_CONST     reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WSTRING_LITERAL reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 150 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 397

    (152) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (162) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 402
    COMMA           shift and go to state 272


state 398

    (148) selection_statement -> IF LPAREN expression RPAREN statement .
    (149) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_OCT   reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_HEX   reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WCHAR_CONST     reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WSTRING_LITERAL reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 403

  ! ELSE            [ reduce using rule 148 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 399

    (222) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .

    LBRACKET        reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LPAREN          reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    PERIOD          reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    ARROW           reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    PLUSPLUS        reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MINUSMINUS      reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    TIMES           reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    DIVIDE          reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MOD             reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    PLUS            reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MINUS           reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RSHIFT          reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LSHIFT          reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LT              reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LE              reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    GE              reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    GT              reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    EQ              reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    NE              reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    AND             reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    OR              reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    XOR             reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LAND            reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LOR             reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    CONDOP          reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RBRACKET        reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RPAREN          reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    COLON           reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    EQUALS          reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    XOREQUAL        reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    TIMESEQUAL      reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    DIVEQUAL        reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MODEQUAL        reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    PLUSEQUAL       reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MINUSEQUAL      reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LSHIFTEQUAL     reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RSHIFTEQUAL     reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    ANDEQUAL        reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    OREQUAL         reduce using rule 222 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)


state 400

    (153) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    ID              shift and go to state 108
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    assignment_expression          shift and go to state 184
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    expression_opt                 shift and go to state 404
    conditional_expression         shift and go to state 115
    constant                       shift and go to state 92
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 99
    identifier                     shift and go to state 117
    expression                     shift and go to state 237
    primary_expression             shift and go to state 105
    empty                          shift and go to state 330
    binary_expression              shift and go to state 112

state 401

    (154) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 405


state 402

    (152) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 406


state 403

    (149) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 407
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 404

    (153) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 408


state 405

    (154) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 409
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 406

    (152) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    ID              reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONST           reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RESTRICT        reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOLATILE        reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SHORT           reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LONG            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DOUBLE          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIGNED          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNSIGNED        reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AUTO            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    REGISTER        reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    EXTERN          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEDEF         reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INLINE          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEID          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ENUM            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRUCT          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNION           reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AND             reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_DEC   reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_OCT   reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_HEX   reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WCHAR_CONST     reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WSTRING_LITERAL reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 152 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 407

    (149) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    ID              reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RESTRICT        reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    REGISTER        reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INLINE          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEID          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_DEC   reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_OCT   reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_HEX   reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WCHAR_CONST     reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WSTRING_LITERAL reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 149 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 408

    (153) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (33) statement -> . labeled_statement
    (34) statement -> . expression_statement
    (35) statement -> . compound_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (145) labeled_statement -> . ID COLON statement
    (146) labeled_statement -> . CASE constant_expression COLON statement
    (147) labeled_statement -> . DEFAULT COLON statement
    (160) expression_statement -> . expression_opt SEMI
    (144) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (148) selection_statement -> . IF LPAREN expression RPAREN statement
    (149) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (150) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (151) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (152) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (153) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (154) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (155) jump_statement -> . GOTO ID SEMI
    (156) jump_statement -> . BREAK SEMI
    (157) jump_statement -> . CONTINUE SEMI
    (158) jump_statement -> . RETURN expression SEMI
    (159) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (241) empty -> .
    (161) expression -> . assignment_expression
    (162) expression -> . expression COMMA assignment_expression
    (164) assignment_expression -> . conditional_expression
    (165) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (178) conditional_expression -> . binary_expression
    (179) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (201) unary_expression -> . postfix_expression
    (202) unary_expression -> . PLUSPLUS unary_expression
    (203) unary_expression -> . MINUSMINUS unary_expression
    (204) unary_expression -> . unary_operator cast_expression
    (205) unary_expression -> . SIZEOF unary_expression
    (206) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (180) binary_expression -> . cast_expression
    (181) binary_expression -> . binary_expression TIMES binary_expression
    (182) binary_expression -> . binary_expression DIVIDE binary_expression
    (183) binary_expression -> . binary_expression MOD binary_expression
    (184) binary_expression -> . binary_expression PLUS binary_expression
    (185) binary_expression -> . binary_expression MINUS binary_expression
    (186) binary_expression -> . binary_expression RSHIFT binary_expression
    (187) binary_expression -> . binary_expression LSHIFT binary_expression
    (188) binary_expression -> . binary_expression LT binary_expression
    (189) binary_expression -> . binary_expression LE binary_expression
    (190) binary_expression -> . binary_expression GE binary_expression
    (191) binary_expression -> . binary_expression GT binary_expression
    (192) binary_expression -> . binary_expression EQ binary_expression
    (193) binary_expression -> . binary_expression NE binary_expression
    (194) binary_expression -> . binary_expression AND binary_expression
    (195) binary_expression -> . binary_expression OR binary_expression
    (196) binary_expression -> . binary_expression XOR binary_expression
    (197) binary_expression -> . binary_expression LAND binary_expression
    (198) binary_expression -> . binary_expression LOR binary_expression
    (213) postfix_expression -> . primary_expression
    (214) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (215) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (216) postfix_expression -> . postfix_expression LPAREN RPAREN
    (217) postfix_expression -> . postfix_expression PERIOD identifier
    (218) postfix_expression -> . postfix_expression ARROW identifier
    (219) postfix_expression -> . postfix_expression PLUSPLUS
    (220) postfix_expression -> . postfix_expression MINUSMINUS
    (221) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (222) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (207) unary_operator -> . AND
    (208) unary_operator -> . TIMES
    (209) unary_operator -> . PLUS
    (210) unary_operator -> . MINUS
    (211) unary_operator -> . NOT
    (212) unary_operator -> . LNOT
    (199) cast_expression -> . unary_expression
    (200) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (223) primary_expression -> . identifier
    (224) primary_expression -> . constant
    (225) primary_expression -> . unified_string_literal
    (226) primary_expression -> . unified_wstring_literal
    (227) primary_expression -> . LPAREN expression RPAREN
    (230) identifier -> . ID
    (231) constant -> . INT_CONST_DEC
    (232) constant -> . INT_CONST_OCT
    (233) constant -> . INT_CONST_HEX
    (234) constant -> . FLOAT_CONST
    (235) constant -> . CHAR_CONST
    (236) constant -> . WCHAR_CONST
    (237) unified_string_literal -> . STRING_LITERAL
    (238) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (239) unified_wstring_literal -> . WSTRING_LITERAL
    (240) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 252
    CASE            shift and go to state 240
    DEFAULT         shift and go to state 238
    LBRACE          shift and go to state 137
    IF              shift and go to state 253
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 239
    DO              shift and go to state 249
    FOR             shift and go to state 235
    GOTO            shift and go to state 230
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 236
    RETURN          shift and go to state 233
    SEMI            reduce using rule 241 (empty -> .)
    PLUSPLUS        shift and go to state 102
    MINUSMINUS      shift and go to state 107
    SIZEOF          shift and go to state 93
    LPAREN          shift and go to state 106
    AND             shift and go to state 110
    TIMES           shift and go to state 167
    PLUS            shift and go to state 100
    MINUS           shift and go to state 94
    NOT             shift and go to state 116
    LNOT            shift and go to state 85
    INT_CONST_DEC   shift and go to state 111
    INT_CONST_OCT   shift and go to state 113
    INT_CONST_HEX   shift and go to state 103
    FLOAT_CONST     shift and go to state 91
    CHAR_CONST      shift and go to state 88
    WCHAR_CONST     shift and go to state 90
    STRING_LITERAL  shift and go to state 109
    WSTRING_LITERAL shift and go to state 89

    expression_statement           shift and go to state 228
    constant                       shift and go to state 92
    unary_expression               shift and go to state 86
    unified_wstring_literal        shift and go to state 87
    iteration_statement            shift and go to state 229
    compound_statement             shift and go to state 234
    selection_statement            shift and go to state 250
    unified_string_literal         shift and go to state 95
    postfix_expression             shift and go to state 96
    statement                      shift and go to state 410
    cast_expression                shift and go to state 98
    empty                          shift and go to state 330
    assignment_expression          shift and go to state 184
    expression_opt                 shift and go to state 231
    primary_expression             shift and go to state 105
    jump_statement                 shift and go to state 245
    binary_expression              shift and go to state 112
    labeled_statement              shift and go to state 232
    unary_operator                 shift and go to state 99
    conditional_expression         shift and go to state 115
    identifier                     shift and go to state 117
    expression                     shift and go to state 237

state 409

    (154) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CASE            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DEFAULT         reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SWITCH          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    GOTO            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CONST           reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RESTRICT        reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOLATILE        reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SHORT           reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LONG            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DOUBLE          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SIGNED          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    UNSIGNED        reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    AUTO            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    REGISTER        reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STATIC          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    EXTERN          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TYPEDEF         reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INLINE          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TYPEID          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ENUM            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRUCT          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    UNION           reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SIZEOF          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_DEC   reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_OCT   reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_HEX   reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WCHAR_CONST     reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WSTRING_LITERAL reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 154 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 410

    (153) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CASE            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DEFAULT         reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SWITCH          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    GOTO            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONST           reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RESTRICT        reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOLATILE        reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SHORT           reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LONG            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DOUBLE          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SIGNED          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNSIGNED        reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AUTO            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    REGISTER        reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STATIC          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    EXTERN          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TYPEDEF         reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INLINE          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TYPEID          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ENUM            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRUCT          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNION           reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SIZEOF          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_DEC   reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_OCT   reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_HEX   reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WCHAR_CONST     reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WSTRING_LITERAL reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 153 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 398 resolved as shift
