* Create a python egg - easy_install, setuptools.

* Sphinx the project up.

* Implement Things missing in Python:
  + stmt
    - ClassDef(identifier name, expr* bases, stmt* body, expr* decorator_list)
    - Return(expr? value)

    - Delete(expr* targets)

     - Print(expr? dest, expr* values, bool nl)

    - For(expr target, expr iter, stmt* body, stmt* orelse)
    - While(expr test, stmt* body, stmt* orelse)
    - With(expr context_expr, expr? optional_vars, stmt* body)

    - Raise(expr? type, expr? inst, expr? tback)
    - TryExcept(stmt* body, excepthandler* handlers, stmt* orelse)
    - TryFinally(stmt* body, stmt* finalbody)
    - Assert(expr test, expr? msg)

    - Import(alias* names)
    - ImportFrom(identifier? module, alias* names, int? level)

    ;; Make into a function call?
    - Exec(expr body, expr? globals, expr? locals)

    - Global(identifier* names)
    - Expr(expr value)
    - Pass | Break | Continue

  + expr
    - Yield(expr? value)
    expr? starargs, expr? kwargs)
    - Repr(expr value)
    - Num(object n) -- a number as a PyObject.
    - Str(string s) -- need to specify raw, unicode, etc?

    -- the following expression can appear in assignment context
    - Subscript(expr value, slice slice, expr_context ctx)
  

* XML export/import, along with XPATH.

* Implement navigation functions using selectors:
  + FindIdentifer (classes, functions or variables)
  + FindCallers
  + ListFunctionsCalled by a given function


* Tie up with Vim.

* Think of a demo case.


Much Later
==========
Cache:
  * Fixed Size
  * Store whole tree?
  * LRU ?

Implement Wildcard behaviour - sgrep?

* 11.png - Single Return 0 inside IfElse is not encapsulated in a Compound?
